(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }
    g.xxMaker = f();
  }
})(function () {
  var define, module, exports;
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw ((a.code = "MODULE_NOT_FOUND"), a);
          }
          var p = (n[i] = { exports: {} });
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r];
              return o(n || r);
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          );
        }
        return n[i].exports;
      }
      for (
        var u = "function" == typeof require && require, i = 0;
        i < t.length;
        i++
      )
        o(t[i]);
      return o;
    }
    return r;
  })()(
    {
      1: [
        function (require, module, exports) {
          const tiles = require("./src/tiles"),
            game = require("./src/game");
          (exports.compileGame = game.compileGame),
            (exports.renderGame = game.renderGame),
            (exports.compileTiles = tiles.compileTiles),
            (exports.renderTiles = tiles.renderTiles);
        },
        { "./src/game": 115, "./src/tiles": 118 },
      ],
      2: [function (require, module, exports) {}, {}],
      3: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          exports.__esModule = !0;
          var _handlebarsRuntime = require("./handlebars.runtime"),
            _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime),
            _handlebarsCompilerAst = require("./handlebars/compiler/ast"),
            _handlebarsCompilerAst2 = _interopRequireDefault(
              _handlebarsCompilerAst
            ),
            _handlebarsCompilerBase = require("./handlebars/compiler/base"),
            _handlebarsCompilerCompiler = require("./handlebars/compiler/compiler"),
            _handlebarsCompilerJavascriptCompiler = require("./handlebars/compiler/javascript-compiler"),
            _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(
              _handlebarsCompilerJavascriptCompiler
            ),
            _handlebarsCompilerVisitor = require("./handlebars/compiler/visitor"),
            _handlebarsCompilerVisitor2 = _interopRequireDefault(
              _handlebarsCompilerVisitor
            ),
            _handlebarsNoConflict = require("./handlebars/no-conflict"),
            _handlebarsNoConflict2 = _interopRequireDefault(
              _handlebarsNoConflict
            ),
            _create = _handlebarsRuntime2.default.create;
          function create() {
            var e = _create();
            return (
              (e.compile = function (r, a) {
                return _handlebarsCompilerCompiler.compile(r, a, e);
              }),
              (e.precompile = function (r, a) {
                return _handlebarsCompilerCompiler.precompile(r, a, e);
              }),
              (e.AST = _handlebarsCompilerAst2.default),
              (e.Compiler = _handlebarsCompilerCompiler.Compiler),
              (e.JavaScriptCompiler =
                _handlebarsCompilerJavascriptCompiler2.default),
              (e.Parser = _handlebarsCompilerBase.parser),
              (e.parse = _handlebarsCompilerBase.parse),
              (e.parseWithoutProcessing =
                _handlebarsCompilerBase.parseWithoutProcessing),
              e
            );
          }
          var inst = create();
          (inst.create = create),
            _handlebarsNoConflict2.default(inst),
            (inst.Visitor = _handlebarsCompilerVisitor2.default),
            (inst.default = inst),
            (exports.default = inst),
            (module.exports = exports.default);
        },
        {
          "./handlebars.runtime": 4,
          "./handlebars/compiler/ast": 6,
          "./handlebars/compiler/base": 7,
          "./handlebars/compiler/compiler": 9,
          "./handlebars/compiler/javascript-compiler": 11,
          "./handlebars/compiler/visitor": 14,
          "./handlebars/no-conflict": 31,
        },
      ],
      4: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          function _interopRequireWildcard(e) {
            if (e && e.__esModule) return e;
            var r = {};
            if (null != e)
              for (var a in e)
                Object.prototype.hasOwnProperty.call(e, a) && (r[a] = e[a]);
            return (r.default = e), r;
          }
          exports.__esModule = !0;
          var _handlebarsBase = require("./handlebars/base"),
            base = _interopRequireWildcard(_handlebarsBase),
            _handlebarsSafeString = require("./handlebars/safe-string"),
            _handlebarsSafeString2 = _interopRequireDefault(
              _handlebarsSafeString
            ),
            _handlebarsException = require("./handlebars/exception"),
            _handlebarsException2 = _interopRequireDefault(
              _handlebarsException
            ),
            _handlebarsUtils = require("./handlebars/utils"),
            Utils = _interopRequireWildcard(_handlebarsUtils),
            _handlebarsRuntime = require("./handlebars/runtime"),
            runtime = _interopRequireWildcard(_handlebarsRuntime),
            _handlebarsNoConflict = require("./handlebars/no-conflict"),
            _handlebarsNoConflict2 = _interopRequireDefault(
              _handlebarsNoConflict
            );
          function create() {
            var e = new base.HandlebarsEnvironment();
            return (
              Utils.extend(e, base),
              (e.SafeString = _handlebarsSafeString2.default),
              (e.Exception = _handlebarsException2.default),
              (e.Utils = Utils),
              (e.escapeExpression = Utils.escapeExpression),
              (e.VM = runtime),
              (e.template = function (r) {
                return runtime.template(r, e);
              }),
              e
            );
          }
          var inst = create();
          (inst.create = create),
            _handlebarsNoConflict2.default(inst),
            (inst.default = inst),
            (exports.default = inst),
            (module.exports = exports.default);
        },
        {
          "./handlebars/base": 5,
          "./handlebars/exception": 18,
          "./handlebars/no-conflict": 31,
          "./handlebars/runtime": 32,
          "./handlebars/safe-string": 33,
          "./handlebars/utils": 34,
        },
      ],
      5: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.HandlebarsEnvironment = HandlebarsEnvironment);
          var _utils = require("./utils"),
            _exception = require("./exception"),
            _exception2 = _interopRequireDefault(_exception),
            _helpers = require("./helpers"),
            _decorators = require("./decorators"),
            _logger = require("./logger"),
            _logger2 = _interopRequireDefault(_logger),
            _internalProtoAccess = require("./internal/proto-access"),
            VERSION = "4.7.6";
          exports.VERSION = VERSION;
          var COMPILER_REVISION = 8;
          exports.COMPILER_REVISION = COMPILER_REVISION;
          var LAST_COMPATIBLE_COMPILER_REVISION = 7;
          exports.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
          var REVISION_CHANGES = {
            1: "<= 1.0.rc.2",
            2: "== 1.0.0-rc.3",
            3: "== 1.0.0-rc.4",
            4: "== 1.x.x",
            5: "== 2.0.0-alpha.x",
            6: ">= 2.0.0-beta.1",
            7: ">= 4.0.0 <4.3.0",
            8: ">= 4.3.0",
          };
          exports.REVISION_CHANGES = REVISION_CHANGES;
          var objectType = "[object Object]";
          function HandlebarsEnvironment(e, t, r) {
            (this.helpers = e || {}),
              (this.partials = t || {}),
              (this.decorators = r || {}),
              _helpers.registerDefaultHelpers(this),
              _decorators.registerDefaultDecorators(this);
          }
          HandlebarsEnvironment.prototype = {
            constructor: HandlebarsEnvironment,
            logger: _logger2.default,
            log: _logger2.default.log,
            registerHelper: function (e, t) {
              if (_utils.toString.call(e) === objectType) {
                if (t)
                  throw new _exception2.default(
                    "Arg not supported with multiple helpers"
                  );
                _utils.extend(this.helpers, e);
              } else this.helpers[e] = t;
            },
            unregisterHelper: function (e) {
              delete this.helpers[e];
            },
            registerPartial: function (e, t) {
              if (_utils.toString.call(e) === objectType)
                _utils.extend(this.partials, e);
              else {
                if (void 0 === t)
                  throw new _exception2.default(
                    'Attempting to register a partial called "' +
                      e +
                      '" as undefined'
                  );
                this.partials[e] = t;
              }
            },
            unregisterPartial: function (e) {
              delete this.partials[e];
            },
            registerDecorator: function (e, t) {
              if (_utils.toString.call(e) === objectType) {
                if (t)
                  throw new _exception2.default(
                    "Arg not supported with multiple decorators"
                  );
                _utils.extend(this.decorators, e);
              } else this.decorators[e] = t;
            },
            unregisterDecorator: function (e) {
              delete this.decorators[e];
            },
            resetLoggedPropertyAccesses: function () {
              _internalProtoAccess.resetLoggedProperties();
            },
          };
          var log = _logger2.default.log;
          (exports.log = log),
            (exports.createFrame = _utils.createFrame),
            (exports.logger = _logger2.default);
        },
        {
          "./decorators": 16,
          "./exception": 18,
          "./helpers": 19,
          "./internal/proto-access": 28,
          "./logger": 30,
          "./utils": 34,
        },
      ],
      6: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var AST = {
            helpers: {
              helperExpression: function (e) {
                return (
                  "SubExpression" === e.type ||
                  (("MustacheStatement" === e.type ||
                    "BlockStatement" === e.type) &&
                    !!((e.params && e.params.length) || e.hash))
                );
              },
              scopedId: function (e) {
                return /^\.|this\b/.test(e.original);
              },
              simpleId: function (e) {
                return (
                  1 === e.parts.length && !AST.helpers.scopedId(e) && !e.depth
                );
              },
            },
          };
          (exports.default = AST), (module.exports = exports.default);
        },
        {},
      ],
      7: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireWildcard(e) {
            if (e && e.__esModule) return e;
            var r = {};
            if (null != e)
              for (var t in e)
                Object.prototype.hasOwnProperty.call(e, t) && (r[t] = e[t]);
            return (r.default = e), r;
          }
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.parseWithoutProcessing = parseWithoutProcessing),
            (exports.parse = parse);
          var _parser = require("./parser"),
            _parser2 = _interopRequireDefault(_parser),
            _whitespaceControl = require("./whitespace-control"),
            _whitespaceControl2 = _interopRequireDefault(_whitespaceControl),
            _helpers = require("./helpers"),
            Helpers = _interopRequireWildcard(_helpers),
            _utils = require("../utils");
          exports.parser = _parser2.default;
          var yy = {};
          function parseWithoutProcessing(e, r) {
            return "Program" === e.type
              ? e
              : ((_parser2.default.yy = yy),
                (yy.locInfo = function (e) {
                  return new yy.SourceLocation(r && r.srcName, e);
                }),
                _parser2.default.parse(e));
          }
          function parse(e, r) {
            var t = parseWithoutProcessing(e, r);
            return new _whitespaceControl2.default(r).accept(t);
          }
          _utils.extend(yy, Helpers);
        },
        {
          "../utils": 34,
          "./helpers": 10,
          "./parser": 12,
          "./whitespace-control": 15,
        },
      ],
      8: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var _utils = require("../utils"),
            SourceNode = void 0;
          try {
            if ("function" != typeof define || !define.amd) {
              var SourceMap = require("source-map");
              SourceNode = SourceMap.SourceNode;
            }
          } catch (t) {}
          function castChunk(t, e, r) {
            if (_utils.isArray(t)) {
              for (var n = [], i = 0, o = t.length; i < o; i++)
                n.push(e.wrap(t[i], r));
              return n;
            }
            return "boolean" == typeof t || "number" == typeof t ? t + "" : t;
          }
          function CodeGen(t) {
            (this.srcFile = t), (this.source = []);
          }
          SourceNode ||
            ((SourceNode = function (t, e, r, n) {
              (this.src = ""), n && this.add(n);
            }).prototype = {
              add: function (t) {
                _utils.isArray(t) && (t = t.join("")), (this.src += t);
              },
              prepend: function (t) {
                _utils.isArray(t) && (t = t.join("")),
                  (this.src = t + this.src);
              },
              toStringWithSourceMap: function () {
                return { code: this.toString() };
              },
              toString: function () {
                return this.src;
              },
            }),
            (CodeGen.prototype = {
              isEmpty: function () {
                return !this.source.length;
              },
              prepend: function (t, e) {
                this.source.unshift(this.wrap(t, e));
              },
              push: function (t, e) {
                this.source.push(this.wrap(t, e));
              },
              merge: function () {
                var t = this.empty();
                return (
                  this.each(function (e) {
                    t.add(["  ", e, "\n"]);
                  }),
                  t
                );
              },
              each: function (t) {
                for (var e = 0, r = this.source.length; e < r; e++)
                  t(this.source[e]);
              },
              empty: function () {
                var t = this.currentLocation || { start: {} };
                return new SourceNode(
                  t.start.line,
                  t.start.column,
                  this.srcFile
                );
              },
              wrap: function (t) {
                var e =
                  arguments.length <= 1 || void 0 === arguments[1]
                    ? this.currentLocation || { start: {} }
                    : arguments[1];
                return t instanceof SourceNode
                  ? t
                  : ((t = castChunk(t, this, e)),
                    new SourceNode(
                      e.start.line,
                      e.start.column,
                      this.srcFile,
                      t
                    ));
              },
              functionCall: function (t, e, r) {
                return (
                  (r = this.generateList(r)),
                  this.wrap([t, e ? "." + e + "(" : "(", r, ")"])
                );
              },
              quotedString: function (t) {
                return (
                  '"' +
                  (t + "")
                    .replace(/\\/g, "\\\\")
                    .replace(/"/g, '\\"')
                    .replace(/\n/g, "\\n")
                    .replace(/\r/g, "\\r")
                    .replace(/\u2028/g, "\\u2028")
                    .replace(/\u2029/g, "\\u2029") +
                  '"'
                );
              },
              objectLiteral: function (t) {
                var e = this,
                  r = [];
                Object.keys(t).forEach(function (n) {
                  var i = castChunk(t[n], e);
                  "undefined" !== i && r.push([e.quotedString(n), ":", i]);
                });
                var n = this.generateList(r);
                return n.prepend("{"), n.add("}"), n;
              },
              generateList: function (t) {
                for (var e = this.empty(), r = 0, n = t.length; r < n; r++)
                  r && e.add(","), e.add(castChunk(t[r], this));
                return e;
              },
              generateArray: function (t) {
                var e = this.generateList(t);
                return e.prepend("["), e.add("]"), e;
              },
            }),
            (exports.default = CodeGen),
            (module.exports = exports.default);
        },
        { "../utils": 34, "source-map": 113 },
      ],
      9: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.Compiler = Compiler),
            (exports.precompile = precompile),
            (exports.compile = compile);
          var _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception),
            _utils = require("../utils"),
            _ast = require("./ast"),
            _ast2 = _interopRequireDefault(_ast),
            slice = [].slice;
          function Compiler() {}
          function precompile(e, t, s) {
            if (null == e || ("string" != typeof e && "Program" !== e.type))
              throw new _exception2.default(
                "You must pass a string or Handlebars AST to Handlebars.precompile. You passed " +
                  e
              );
            "data" in (t = t || {}) || (t.data = !0),
              t.compat && (t.useDepths = !0);
            var o = s.parse(e, t),
              i = new s.Compiler().compile(o, t);
            return new s.JavaScriptCompiler().compile(i, t);
          }
          function compile(e, t, s) {
            if (
              (void 0 === t && (t = {}),
              null == e || ("string" != typeof e && "Program" !== e.type))
            )
              throw new _exception2.default(
                "You must pass a string or Handlebars AST to Handlebars.compile. You passed " +
                  e
              );
            "data" in (t = _utils.extend({}, t)) || (t.data = !0),
              t.compat && (t.useDepths = !0);
            var o = void 0;
            function i() {
              var o = s.parse(e, t),
                i = new s.Compiler().compile(o, t),
                r = new s.JavaScriptCompiler().compile(i, t, void 0, !0);
              return s.template(r);
            }
            function r(e, t) {
              return o || (o = i()), o.call(this, e, t);
            }
            return (
              (r._setup = function (e) {
                return o || (o = i()), o._setup(e);
              }),
              (r._child = function (e, t, s, r) {
                return o || (o = i()), o._child(e, t, s, r);
              }),
              r
            );
          }
          function argEquals(e, t) {
            if (e === t) return !0;
            if (
              _utils.isArray(e) &&
              _utils.isArray(t) &&
              e.length === t.length
            ) {
              for (var s = 0; s < e.length; s++)
                if (!argEquals(e[s], t[s])) return !1;
              return !0;
            }
          }
          function transformLiteralToPath(e) {
            if (!e.path.parts) {
              var t = e.path;
              e.path = {
                type: "PathExpression",
                data: !1,
                depth: 0,
                parts: [t.original + ""],
                original: t.original + "",
                loc: t.loc,
              };
            }
          }
          Compiler.prototype = {
            compiler: Compiler,
            equals: function (e) {
              var t = this.opcodes.length;
              if (e.opcodes.length !== t) return !1;
              for (var s = 0; s < t; s++) {
                var o = this.opcodes[s],
                  i = e.opcodes[s];
                if (o.opcode !== i.opcode || !argEquals(o.args, i.args))
                  return !1;
              }
              t = this.children.length;
              for (s = 0; s < t; s++)
                if (!this.children[s].equals(e.children[s])) return !1;
              return !0;
            },
            guid: 0,
            compile: function (e, t) {
              return (
                (this.sourceNode = []),
                (this.opcodes = []),
                (this.children = []),
                (this.options = t),
                (this.stringParams = t.stringParams),
                (this.trackIds = t.trackIds),
                (t.blockParams = t.blockParams || []),
                (t.knownHelpers = _utils.extend(
                  Object.create(null),
                  {
                    helperMissing: !0,
                    blockHelperMissing: !0,
                    each: !0,
                    if: !0,
                    unless: !0,
                    with: !0,
                    log: !0,
                    lookup: !0,
                  },
                  t.knownHelpers
                )),
                this.accept(e)
              );
            },
            compileProgram: function (e) {
              var t = new this.compiler().compile(e, this.options),
                s = this.guid++;
              return (
                (this.usePartial = this.usePartial || t.usePartial),
                (this.children[s] = t),
                (this.useDepths = this.useDepths || t.useDepths),
                s
              );
            },
            accept: function (e) {
              if (!this[e.type])
                throw new _exception2.default("Unknown type: " + e.type, e);
              this.sourceNode.unshift(e);
              var t = this[e.type](e);
              return this.sourceNode.shift(), t;
            },
            Program: function (e) {
              this.options.blockParams.unshift(e.blockParams);
              for (var t = e.body, s = t.length, o = 0; o < s; o++)
                this.accept(t[o]);
              return (
                this.options.blockParams.shift(),
                (this.isSimple = 1 === s),
                (this.blockParams = e.blockParams ? e.blockParams.length : 0),
                this
              );
            },
            BlockStatement: function (e) {
              transformLiteralToPath(e);
              var t = e.program,
                s = e.inverse;
              (t = t && this.compileProgram(t)),
                (s = s && this.compileProgram(s));
              var o = this.classifySexpr(e);
              "helper" === o
                ? this.helperSexpr(e, t, s)
                : "simple" === o
                ? (this.simpleSexpr(e),
                  this.opcode("pushProgram", t),
                  this.opcode("pushProgram", s),
                  this.opcode("emptyHash"),
                  this.opcode("blockValue", e.path.original))
                : (this.ambiguousSexpr(e, t, s),
                  this.opcode("pushProgram", t),
                  this.opcode("pushProgram", s),
                  this.opcode("emptyHash"),
                  this.opcode("ambiguousBlockValue")),
                this.opcode("append");
            },
            DecoratorBlock: function (e) {
              var t = e.program && this.compileProgram(e.program),
                s = this.setupFullMustacheParams(e, t, void 0),
                o = e.path;
              (this.useDecorators = !0),
                this.opcode("registerDecorator", s.length, o.original);
            },
            PartialStatement: function (e) {
              this.usePartial = !0;
              var t = e.program;
              t && (t = this.compileProgram(e.program));
              var s = e.params;
              if (s.length > 1)
                throw new _exception2.default(
                  "Unsupported number of partial arguments: " + s.length,
                  e
                );
              s.length ||
                (this.options.explicitPartialContext
                  ? this.opcode("pushLiteral", "undefined")
                  : s.push({ type: "PathExpression", parts: [], depth: 0 }));
              var o = e.name.original,
                i = "SubExpression" === e.name.type;
              i && this.accept(e.name),
                this.setupFullMustacheParams(e, t, void 0, !0);
              var r = e.indent || "";
              this.options.preventIndent &&
                r &&
                (this.opcode("appendContent", r), (r = "")),
                this.opcode("invokePartial", i, o, r),
                this.opcode("append");
            },
            PartialBlockStatement: function (e) {
              this.PartialStatement(e);
            },
            MustacheStatement: function (e) {
              this.SubExpression(e),
                e.escaped && !this.options.noEscape
                  ? this.opcode("appendEscaped")
                  : this.opcode("append");
            },
            Decorator: function (e) {
              this.DecoratorBlock(e);
            },
            ContentStatement: function (e) {
              e.value && this.opcode("appendContent", e.value);
            },
            CommentStatement: function () {},
            SubExpression: function (e) {
              transformLiteralToPath(e);
              var t = this.classifySexpr(e);
              "simple" === t
                ? this.simpleSexpr(e)
                : "helper" === t
                ? this.helperSexpr(e)
                : this.ambiguousSexpr(e);
            },
            ambiguousSexpr: function (e, t, s) {
              var o = e.path,
                i = o.parts[0],
                r = null != t || null != s;
              this.opcode("getContext", o.depth),
                this.opcode("pushProgram", t),
                this.opcode("pushProgram", s),
                (o.strict = !0),
                this.accept(o),
                this.opcode("invokeAmbiguous", i, r);
            },
            simpleSexpr: function (e) {
              var t = e.path;
              (t.strict = !0),
                this.accept(t),
                this.opcode("resolvePossibleLambda");
            },
            helperSexpr: function (e, t, s) {
              var o = this.setupFullMustacheParams(e, t, s),
                i = e.path,
                r = i.parts[0];
              if (this.options.knownHelpers[r])
                this.opcode("invokeKnownHelper", o.length, r);
              else {
                if (this.options.knownHelpersOnly)
                  throw new _exception2.default(
                    "You specified knownHelpersOnly, but used the unknown helper " +
                      r,
                    e
                  );
                (i.strict = !0),
                  (i.falsy = !0),
                  this.accept(i),
                  this.opcode(
                    "invokeHelper",
                    o.length,
                    i.original,
                    _ast2.default.helpers.simpleId(i)
                  );
              }
            },
            PathExpression: function (e) {
              this.addDepth(e.depth), this.opcode("getContext", e.depth);
              var t = e.parts[0],
                s = _ast2.default.helpers.scopedId(e),
                o = !e.depth && !s && this.blockParamIndex(t);
              o
                ? this.opcode("lookupBlockParam", o, e.parts)
                : t
                ? e.data
                  ? ((this.options.data = !0),
                    this.opcode("lookupData", e.depth, e.parts, e.strict))
                  : this.opcode(
                      "lookupOnContext",
                      e.parts,
                      e.falsy,
                      e.strict,
                      s
                    )
                : this.opcode("pushContext");
            },
            StringLiteral: function (e) {
              this.opcode("pushString", e.value);
            },
            NumberLiteral: function (e) {
              this.opcode("pushLiteral", e.value);
            },
            BooleanLiteral: function (e) {
              this.opcode("pushLiteral", e.value);
            },
            UndefinedLiteral: function () {
              this.opcode("pushLiteral", "undefined");
            },
            NullLiteral: function () {
              this.opcode("pushLiteral", "null");
            },
            Hash: function (e) {
              var t = e.pairs,
                s = 0,
                o = t.length;
              for (this.opcode("pushHash"); s < o; s++)
                this.pushParam(t[s].value);
              for (; s--; ) this.opcode("assignToHash", t[s].key);
              this.opcode("popHash");
            },
            opcode: function (e) {
              this.opcodes.push({
                opcode: e,
                args: slice.call(arguments, 1),
                loc: this.sourceNode[0].loc,
              });
            },
            addDepth: function (e) {
              e && (this.useDepths = !0);
            },
            classifySexpr: function (e) {
              var t = _ast2.default.helpers.simpleId(e.path),
                s = t && !!this.blockParamIndex(e.path.parts[0]),
                o = !s && _ast2.default.helpers.helperExpression(e),
                i = !s && (o || t);
              if (i && !o) {
                var r = e.path.parts[0],
                  a = this.options;
                a.knownHelpers[r] ? (o = !0) : a.knownHelpersOnly && (i = !1);
              }
              return o ? "helper" : i ? "ambiguous" : "simple";
            },
            pushParams: function (e) {
              for (var t = 0, s = e.length; t < s; t++) this.pushParam(e[t]);
            },
            pushParam: function (e) {
              var t = null != e.value ? e.value : e.original || "";
              if (this.stringParams)
                t.replace &&
                  (t = t.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".")),
                  e.depth && this.addDepth(e.depth),
                  this.opcode("getContext", e.depth || 0),
                  this.opcode("pushStringParam", t, e.type),
                  "SubExpression" === e.type && this.accept(e);
              else {
                if (this.trackIds) {
                  var s = void 0;
                  if (
                    (!e.parts ||
                      _ast2.default.helpers.scopedId(e) ||
                      e.depth ||
                      (s = this.blockParamIndex(e.parts[0])),
                    s)
                  ) {
                    var o = e.parts.slice(1).join(".");
                    this.opcode("pushId", "BlockParam", s, o);
                  } else
                    (t = e.original || t).replace &&
                      (t = t
                        .replace(/^this(?:\.|$)/, "")
                        .replace(/^\.\//, "")
                        .replace(/^\.$/, "")),
                      this.opcode("pushId", e.type, t);
                }
                this.accept(e);
              }
            },
            setupFullMustacheParams: function (e, t, s, o) {
              var i = e.params;
              return (
                this.pushParams(i),
                this.opcode("pushProgram", t),
                this.opcode("pushProgram", s),
                e.hash ? this.accept(e.hash) : this.opcode("emptyHash", o),
                i
              );
            },
            blockParamIndex: function (e) {
              for (var t = 0, s = this.options.blockParams.length; t < s; t++) {
                var o = this.options.blockParams[t],
                  i = o && _utils.indexOf(o, e);
                if (o && i >= 0) return [t, i];
              }
            },
          };
        },
        { "../exception": 18, "../utils": 34, "./ast": 6 },
      ],
      10: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.SourceLocation = SourceLocation),
            (exports.id = id),
            (exports.stripFlags = stripFlags),
            (exports.stripComment = stripComment),
            (exports.preparePath = preparePath),
            (exports.prepareMustache = prepareMustache),
            (exports.prepareRawBlock = prepareRawBlock),
            (exports.prepareBlock = prepareBlock),
            (exports.prepareProgram = prepareProgram),
            (exports.preparePartialBlock = preparePartialBlock);
          var _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception);
          function validateClose(e, r) {
            if (((r = r.path ? r.path.original : r), e.path.original !== r)) {
              var t = { loc: e.path.loc };
              throw new _exception2.default(
                e.path.original + " doesn't match " + r,
                t
              );
            }
          }
          function SourceLocation(e, r) {
            (this.source = e),
              (this.start = { line: r.first_line, column: r.first_column }),
              (this.end = { line: r.last_line, column: r.last_column });
          }
          function id(e) {
            return /^\[.*\]$/.test(e) ? e.substring(1, e.length - 1) : e;
          }
          function stripFlags(e, r) {
            return {
              open: "~" === e.charAt(2),
              close: "~" === r.charAt(r.length - 3),
            };
          }
          function stripComment(e) {
            return e.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
          }
          function preparePath(e, r, t) {
            t = this.locInfo(t);
            for (
              var a = e ? "@" : "", o = [], p = 0, n = 0, i = r.length;
              n < i;
              n++
            ) {
              var s = r[n].part,
                l = r[n].original !== s;
              if (
                ((a += (r[n].separator || "") + s),
                l || (".." !== s && "." !== s && "this" !== s))
              )
                o.push(s);
              else {
                if (o.length > 0)
                  throw new _exception2.default("Invalid path: " + a, {
                    loc: t,
                  });
                ".." === s && p++;
              }
            }
            return {
              type: "PathExpression",
              data: e,
              depth: p,
              parts: o,
              original: a,
              loc: t,
            };
          }
          function prepareMustache(e, r, t, a, o, p) {
            var n = a.charAt(3) || a.charAt(2),
              i = "{" !== n && "&" !== n;
            return {
              type: /\*/.test(a) ? "Decorator" : "MustacheStatement",
              path: e,
              params: r,
              hash: t,
              escaped: i,
              strip: o,
              loc: this.locInfo(p),
            };
          }
          function prepareRawBlock(e, r, t, a) {
            validateClose(e, t);
            var o = {
              type: "Program",
              body: r,
              strip: {},
              loc: (a = this.locInfo(a)),
            };
            return {
              type: "BlockStatement",
              path: e.path,
              params: e.params,
              hash: e.hash,
              program: o,
              openStrip: {},
              inverseStrip: {},
              closeStrip: {},
              loc: a,
            };
          }
          function prepareBlock(e, r, t, a, o, p) {
            a && a.path && validateClose(e, a);
            var n = /\*/.test(e.open);
            r.blockParams = e.blockParams;
            var i = void 0,
              s = void 0;
            if (t) {
              if (n)
                throw new _exception2.default(
                  "Unexpected inverse block on decorator",
                  t
                );
              t.chain && (t.program.body[0].closeStrip = a.strip),
                (s = t.strip),
                (i = t.program);
            }
            return (
              o && ((o = i), (i = r), (r = o)),
              {
                type: n ? "DecoratorBlock" : "BlockStatement",
                path: e.path,
                params: e.params,
                hash: e.hash,
                program: r,
                inverse: i,
                openStrip: e.strip,
                inverseStrip: s,
                closeStrip: a && a.strip,
                loc: this.locInfo(p),
              }
            );
          }
          function prepareProgram(e, r) {
            if (!r && e.length) {
              var t = e[0].loc,
                a = e[e.length - 1].loc;
              t &&
                a &&
                (r = {
                  source: t.source,
                  start: { line: t.start.line, column: t.start.column },
                  end: { line: a.end.line, column: a.end.column },
                });
            }
            return { type: "Program", body: e, strip: {}, loc: r };
          }
          function preparePartialBlock(e, r, t, a) {
            return (
              validateClose(e, t),
              {
                type: "PartialBlockStatement",
                name: e.path,
                params: e.params,
                hash: e.hash,
                program: r,
                openStrip: e.strip,
                closeStrip: t && t.strip,
                loc: this.locInfo(a),
              }
            );
          }
        },
        { "../exception": 18 },
      ],
      11: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(t) {
            return t && t.__esModule ? t : { default: t };
          }
          exports.__esModule = !0;
          var _base = require("../base"),
            _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception),
            _utils = require("../utils"),
            _codeGen = require("./code-gen"),
            _codeGen2 = _interopRequireDefault(_codeGen);
          function Literal(t) {
            this.value = t;
          }
          function JavaScriptCompiler() {}
          function strictLookup(t, s, e, i) {
            var r = s.popStack(),
              a = 0,
              o = e.length;
            for (t && o--; a < o; a++) r = s.nameLookup(r, e[a], i);
            return t
              ? [
                  s.aliasable("container.strict"),
                  "(",
                  r,
                  ", ",
                  s.quotedString(e[a]),
                  ", ",
                  JSON.stringify(s.source.currentLocation),
                  " )",
                ]
              : r;
          }
          (JavaScriptCompiler.prototype = {
            nameLookup: function (t, s) {
              return this.internalNameLookup(t, s);
            },
            depthedLookup: function (t) {
              return [
                this.aliasable("container.lookup"),
                '(depths, "',
                t,
                '")',
              ];
            },
            compilerInfo: function () {
              var t = _base.COMPILER_REVISION;
              return [t, _base.REVISION_CHANGES[t]];
            },
            appendToBuffer: function (t, s, e) {
              return (
                _utils.isArray(t) || (t = [t]),
                (t = this.source.wrap(t, s)),
                this.environment.isSimple
                  ? ["return ", t, ";"]
                  : e
                  ? ["buffer += ", t, ";"]
                  : ((t.appendToBuffer = !0), t)
              );
            },
            initializeBuffer: function () {
              return this.quotedString("");
            },
            internalNameLookup: function (t, s) {
              return (
                (this.lookupPropertyFunctionIsUsed = !0),
                ["lookupProperty(", t, ",", JSON.stringify(s), ")"]
              );
            },
            lookupPropertyFunctionIsUsed: !1,
            compile: function (t, s, e, i) {
              (this.environment = t),
                (this.options = s),
                (this.stringParams = this.options.stringParams),
                (this.trackIds = this.options.trackIds),
                (this.precompile = !i),
                (this.name = this.environment.name),
                (this.isChild = !!e),
                (this.context = e || {
                  decorators: [],
                  programs: [],
                  environments: [],
                }),
                this.preamble(),
                (this.stackSlot = 0),
                (this.stackVars = []),
                (this.aliases = {}),
                (this.registers = { list: [] }),
                (this.hashes = []),
                (this.compileStack = []),
                (this.inlineStack = []),
                (this.blockParams = []),
                this.compileChildren(t, s),
                (this.useDepths =
                  this.useDepths ||
                  t.useDepths ||
                  t.useDecorators ||
                  this.options.compat),
                (this.useBlockParams = this.useBlockParams || t.useBlockParams);
              var r = t.opcodes,
                a = void 0,
                o = void 0,
                n = void 0,
                h = void 0;
              for (n = 0, h = r.length; n < h; n++)
                (a = r[n]),
                  (this.source.currentLocation = a.loc),
                  (o = o || a.loc),
                  this[a.opcode].apply(this, a.args);
              if (
                ((this.source.currentLocation = o),
                this.pushSource(""),
                this.stackSlot ||
                  this.inlineStack.length ||
                  this.compileStack.length)
              )
                throw new _exception2.default(
                  "Compile completed with content left on stack"
                );
              this.decorators.isEmpty()
                ? (this.decorators = void 0)
                : ((this.useDecorators = !0),
                  this.decorators.prepend([
                    "var decorators = container.decorators, ",
                    this.lookupPropertyFunctionVarDeclaration(),
                    ";\n",
                  ]),
                  this.decorators.push("return fn;"),
                  i
                    ? (this.decorators = Function.apply(this, [
                        "fn",
                        "props",
                        "container",
                        "depth0",
                        "data",
                        "blockParams",
                        "depths",
                        this.decorators.merge(),
                      ]))
                    : (this.decorators.prepend(
                        "function(fn, props, container, depth0, data, blockParams, depths) {\n"
                      ),
                      this.decorators.push("}\n"),
                      (this.decorators = this.decorators.merge())));
              var c = this.createFunctionContext(i);
              if (this.isChild) return c;
              var p = { compiler: this.compilerInfo(), main: c };
              this.decorators &&
                ((p.main_d = this.decorators), (p.useDecorators = !0));
              var u = this.context,
                l = u.programs,
                f = u.decorators;
              for (n = 0, h = l.length; n < h; n++)
                l[n] &&
                  ((p[n] = l[n]),
                  f[n] && ((p[n + "_d"] = f[n]), (p.useDecorators = !0)));
              return (
                this.environment.usePartial && (p.usePartial = !0),
                this.options.data && (p.useData = !0),
                this.useDepths && (p.useDepths = !0),
                this.useBlockParams && (p.useBlockParams = !0),
                this.options.compat && (p.compat = !0),
                i
                  ? (p.compilerOptions = this.options)
                  : ((p.compiler = JSON.stringify(p.compiler)),
                    (this.source.currentLocation = {
                      start: { line: 1, column: 0 },
                    }),
                    (p = this.objectLiteral(p)),
                    s.srcName
                      ? ((p = p.toStringWithSourceMap({
                          file: s.destName,
                        })).map = p.map && p.map.toString())
                      : (p = p.toString())),
                p
              );
            },
            preamble: function () {
              (this.lastContext = 0),
                (this.source = new _codeGen2.default(this.options.srcName)),
                (this.decorators = new _codeGen2.default(this.options.srcName));
            },
            createFunctionContext: function (t) {
              var s = this,
                e = "",
                i = this.stackVars.concat(this.registers.list);
              i.length > 0 && (e += ", " + i.join(", "));
              var r = 0;
              Object.keys(this.aliases).forEach(function (t) {
                var i = s.aliases[t];
                i.children &&
                  i.referenceCount > 1 &&
                  ((e += ", alias" + ++r + "=" + t),
                  (i.children[0] = "alias" + r));
              }),
                this.lookupPropertyFunctionIsUsed &&
                  (e += ", " + this.lookupPropertyFunctionVarDeclaration());
              var a = ["container", "depth0", "helpers", "partials", "data"];
              (this.useBlockParams || this.useDepths) && a.push("blockParams"),
                this.useDepths && a.push("depths");
              var o = this.mergeSource(e);
              return t
                ? (a.push(o), Function.apply(this, a))
                : this.source.wrap([
                    "function(",
                    a.join(","),
                    ") {\n  ",
                    o,
                    "}",
                  ]);
            },
            mergeSource: function (t) {
              var s = this.environment.isSimple,
                e = !this.forceBuffer,
                i = void 0,
                r = void 0,
                a = void 0,
                o = void 0;
              return (
                this.source.each(function (t) {
                  t.appendToBuffer
                    ? (a ? t.prepend("  + ") : (a = t), (o = t))
                    : (a &&
                        (r ? a.prepend("buffer += ") : (i = !0),
                        o.add(";"),
                        (a = o = void 0)),
                      (r = !0),
                      s || (e = !1));
                }),
                e
                  ? a
                    ? (a.prepend("return "), o.add(";"))
                    : r || this.source.push('return "";')
                  : ((t += ", buffer = " + (i ? "" : this.initializeBuffer())),
                    a
                      ? (a.prepend("return buffer + "), o.add(";"))
                      : this.source.push("return buffer;")),
                t &&
                  this.source.prepend(
                    "var " + t.substring(2) + (i ? "" : ";\n")
                  ),
                this.source.merge()
              );
            },
            lookupPropertyFunctionVarDeclaration: function () {
              return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
            },
            blockValue: function (t) {
              var s = this.aliasable("container.hooks.blockHelperMissing"),
                e = [this.contextName(0)];
              this.setupHelperArgs(t, 0, e);
              var i = this.popStack();
              e.splice(1, 0, i),
                this.push(this.source.functionCall(s, "call", e));
            },
            ambiguousBlockValue: function () {
              var t = this.aliasable("container.hooks.blockHelperMissing"),
                s = [this.contextName(0)];
              this.setupHelperArgs("", 0, s, !0), this.flushInline();
              var e = this.topStack();
              s.splice(1, 0, e),
                this.pushSource([
                  "if (!",
                  this.lastHelper,
                  ") { ",
                  e,
                  " = ",
                  this.source.functionCall(t, "call", s),
                  "}",
                ]);
            },
            appendContent: function (t) {
              this.pendingContent
                ? (t = this.pendingContent + t)
                : (this.pendingLocation = this.source.currentLocation),
                (this.pendingContent = t);
            },
            append: function () {
              if (this.isInline())
                this.replaceStack(function (t) {
                  return [" != null ? ", t, ' : ""'];
                }),
                  this.pushSource(this.appendToBuffer(this.popStack()));
              else {
                var t = this.popStack();
                this.pushSource([
                  "if (",
                  t,
                  " != null) { ",
                  this.appendToBuffer(t, void 0, !0),
                  " }",
                ]),
                  this.environment.isSimple &&
                    this.pushSource([
                      "else { ",
                      this.appendToBuffer("''", void 0, !0),
                      " }",
                    ]);
              }
            },
            appendEscaped: function () {
              this.pushSource(
                this.appendToBuffer([
                  this.aliasable("container.escapeExpression"),
                  "(",
                  this.popStack(),
                  ")",
                ])
              );
            },
            getContext: function (t) {
              this.lastContext = t;
            },
            pushContext: function () {
              this.pushStackLiteral(this.contextName(this.lastContext));
            },
            lookupOnContext: function (t, s, e, i) {
              var r = 0;
              i || !this.options.compat || this.lastContext
                ? this.pushContext()
                : this.push(this.depthedLookup(t[r++])),
                this.resolvePath("context", t, r, s, e);
            },
            lookupBlockParam: function (t, s) {
              (this.useBlockParams = !0),
                this.push(["blockParams[", t[0], "][", t[1], "]"]),
                this.resolvePath("context", s, 1);
            },
            lookupData: function (t, s, e) {
              t
                ? this.pushStackLiteral("container.data(data, " + t + ")")
                : this.pushStackLiteral("data"),
                this.resolvePath("data", s, 0, !0, e);
            },
            resolvePath: function (t, s, e, i, r) {
              var a = this;
              if (this.options.strict || this.options.assumeObjects)
                this.push(strictLookup(this.options.strict && r, this, s, t));
              else
                for (var o = s.length; e < o; e++)
                  this.replaceStack(function (r) {
                    var o = a.nameLookup(r, s[e], t);
                    return i ? [" && ", o] : [" != null ? ", o, " : ", r];
                  });
            },
            resolvePossibleLambda: function () {
              this.push([
                this.aliasable("container.lambda"),
                "(",
                this.popStack(),
                ", ",
                this.contextName(0),
                ")",
              ]);
            },
            pushStringParam: function (t, s) {
              this.pushContext(),
                this.pushString(s),
                "SubExpression" !== s &&
                  ("string" == typeof t
                    ? this.pushString(t)
                    : this.pushStackLiteral(t));
            },
            emptyHash: function (t) {
              this.trackIds && this.push("{}"),
                this.stringParams && (this.push("{}"), this.push("{}")),
                this.pushStackLiteral(t ? "undefined" : "{}");
            },
            pushHash: function () {
              this.hash && this.hashes.push(this.hash),
                (this.hash = { values: {}, types: [], contexts: [], ids: [] });
            },
            popHash: function () {
              var t = this.hash;
              (this.hash = this.hashes.pop()),
                this.trackIds && this.push(this.objectLiteral(t.ids)),
                this.stringParams &&
                  (this.push(this.objectLiteral(t.contexts)),
                  this.push(this.objectLiteral(t.types))),
                this.push(this.objectLiteral(t.values));
            },
            pushString: function (t) {
              this.pushStackLiteral(this.quotedString(t));
            },
            pushLiteral: function (t) {
              this.pushStackLiteral(t);
            },
            pushProgram: function (t) {
              null != t
                ? this.pushStackLiteral(this.programExpression(t))
                : this.pushStackLiteral(null);
            },
            registerDecorator: function (t, s) {
              var e = this.nameLookup("decorators", s, "decorator"),
                i = this.setupHelperArgs(s, t);
              this.decorators.push([
                "fn = ",
                this.decorators.functionCall(e, "", [
                  "fn",
                  "props",
                  "container",
                  i,
                ]),
                " || fn;",
              ]);
            },
            invokeHelper: function (t, s, e) {
              var i = this.popStack(),
                r = this.setupHelper(t, s),
                a = [];
              e && a.push(r.name),
                a.push(i),
                this.options.strict ||
                  a.push(this.aliasable("container.hooks.helperMissing"));
              var o = ["(", this.itemsSeparatedBy(a, "||"), ")"],
                n = this.source.functionCall(o, "call", r.callParams);
              this.push(n);
            },
            itemsSeparatedBy: function (t, s) {
              var e = [];
              e.push(t[0]);
              for (var i = 1; i < t.length; i++) e.push(s, t[i]);
              return e;
            },
            invokeKnownHelper: function (t, s) {
              var e = this.setupHelper(t, s);
              this.push(this.source.functionCall(e.name, "call", e.callParams));
            },
            invokeAmbiguous: function (t, s) {
              this.useRegister("helper");
              var e = this.popStack();
              this.emptyHash();
              var i = this.setupHelper(0, t, s),
                r = [
                  "(",
                  "(helper = ",
                  (this.lastHelper = this.nameLookup("helpers", t, "helper")),
                  " || ",
                  e,
                  ")",
                ];
              this.options.strict ||
                ((r[0] = "(helper = "),
                r.push(
                  " != null ? helper : ",
                  this.aliasable("container.hooks.helperMissing")
                )),
                this.push([
                  "(",
                  r,
                  i.paramsInit ? ["),(", i.paramsInit] : [],
                  "),",
                  "(typeof helper === ",
                  this.aliasable('"function"'),
                  " ? ",
                  this.source.functionCall("helper", "call", i.callParams),
                  " : helper))",
                ]);
            },
            invokePartial: function (t, s, e) {
              var i = [],
                r = this.setupParams(s, 1, i);
              t && ((s = this.popStack()), delete r.name),
                e && (r.indent = JSON.stringify(e)),
                (r.helpers = "helpers"),
                (r.partials = "partials"),
                (r.decorators = "container.decorators"),
                t
                  ? i.unshift(s)
                  : i.unshift(this.nameLookup("partials", s, "partial")),
                this.options.compat && (r.depths = "depths"),
                (r = this.objectLiteral(r)),
                i.push(r),
                this.push(
                  this.source.functionCall("container.invokePartial", "", i)
                );
            },
            assignToHash: function (t) {
              var s = this.popStack(),
                e = void 0,
                i = void 0,
                r = void 0;
              this.trackIds && (r = this.popStack()),
                this.stringParams &&
                  ((i = this.popStack()), (e = this.popStack()));
              var a = this.hash;
              e && (a.contexts[t] = e),
                i && (a.types[t] = i),
                r && (a.ids[t] = r),
                (a.values[t] = s);
            },
            pushId: function (t, s, e) {
              "BlockParam" === t
                ? this.pushStackLiteral(
                    "blockParams[" +
                      s[0] +
                      "].path[" +
                      s[1] +
                      "]" +
                      (e ? " + " + JSON.stringify("." + e) : "")
                  )
                : "PathExpression" === t
                ? this.pushString(s)
                : "SubExpression" === t
                ? this.pushStackLiteral("true")
                : this.pushStackLiteral("null");
            },
            compiler: JavaScriptCompiler,
            compileChildren: function (t, s) {
              for (
                var e = t.children, i = void 0, r = void 0, a = 0, o = e.length;
                a < o;
                a++
              ) {
                (i = e[a]), (r = new this.compiler());
                var n = this.matchExistingProgram(i);
                if (null == n) {
                  this.context.programs.push("");
                  var h = this.context.programs.length;
                  (i.index = h),
                    (i.name = "program" + h),
                    (this.context.programs[h] = r.compile(
                      i,
                      s,
                      this.context,
                      !this.precompile
                    )),
                    (this.context.decorators[h] = r.decorators),
                    (this.context.environments[h] = i),
                    (this.useDepths = this.useDepths || r.useDepths),
                    (this.useBlockParams =
                      this.useBlockParams || r.useBlockParams),
                    (i.useDepths = this.useDepths),
                    (i.useBlockParams = this.useBlockParams);
                } else
                  (i.index = n.index),
                    (i.name = "program" + n.index),
                    (this.useDepths = this.useDepths || n.useDepths),
                    (this.useBlockParams =
                      this.useBlockParams || n.useBlockParams);
              }
            },
            matchExistingProgram: function (t) {
              for (
                var s = 0, e = this.context.environments.length;
                s < e;
                s++
              ) {
                var i = this.context.environments[s];
                if (i && i.equals(t)) return i;
              }
            },
            programExpression: function (t) {
              var s = this.environment.children[t],
                e = [s.index, "data", s.blockParams];
              return (
                (this.useBlockParams || this.useDepths) &&
                  e.push("blockParams"),
                this.useDepths && e.push("depths"),
                "container.program(" + e.join(", ") + ")"
              );
            },
            useRegister: function (t) {
              this.registers[t] ||
                ((this.registers[t] = !0), this.registers.list.push(t));
            },
            push: function (t) {
              return (
                t instanceof Literal || (t = this.source.wrap(t)),
                this.inlineStack.push(t),
                t
              );
            },
            pushStackLiteral: function (t) {
              this.push(new Literal(t));
            },
            pushSource: function (t) {
              this.pendingContent &&
                (this.source.push(
                  this.appendToBuffer(
                    this.source.quotedString(this.pendingContent),
                    this.pendingLocation
                  )
                ),
                (this.pendingContent = void 0)),
                t && this.source.push(t);
            },
            replaceStack: function (t) {
              var s = ["("],
                e = void 0,
                i = void 0,
                r = void 0;
              if (!this.isInline())
                throw new _exception2.default("replaceStack on non-inline");
              var a = this.popStack(!0);
              if (a instanceof Literal) (s = ["(", (e = [a.value])]), (r = !0);
              else {
                i = !0;
                var o = this.incrStack();
                (s = ["((", this.push(o), " = ", a, ")"]),
                  (e = this.topStack());
              }
              var n = t.call(this, e);
              r || this.popStack(),
                i && this.stackSlot--,
                this.push(s.concat(n, ")"));
            },
            incrStack: function () {
              return (
                this.stackSlot++,
                this.stackSlot > this.stackVars.length &&
                  this.stackVars.push("stack" + this.stackSlot),
                this.topStackName()
              );
            },
            topStackName: function () {
              return "stack" + this.stackSlot;
            },
            flushInline: function () {
              var t = this.inlineStack;
              this.inlineStack = [];
              for (var s = 0, e = t.length; s < e; s++) {
                var i = t[s];
                if (i instanceof Literal) this.compileStack.push(i);
                else {
                  var r = this.incrStack();
                  this.pushSource([r, " = ", i, ";"]),
                    this.compileStack.push(r);
                }
              }
            },
            isInline: function () {
              return this.inlineStack.length;
            },
            popStack: function (t) {
              var s = this.isInline(),
                e = (s ? this.inlineStack : this.compileStack).pop();
              if (!t && e instanceof Literal) return e.value;
              if (!s) {
                if (!this.stackSlot)
                  throw new _exception2.default("Invalid stack pop");
                this.stackSlot--;
              }
              return e;
            },
            topStack: function () {
              var t = this.isInline() ? this.inlineStack : this.compileStack,
                s = t[t.length - 1];
              return s instanceof Literal ? s.value : s;
            },
            contextName: function (t) {
              return this.useDepths && t ? "depths[" + t + "]" : "depth" + t;
            },
            quotedString: function (t) {
              return this.source.quotedString(t);
            },
            objectLiteral: function (t) {
              return this.source.objectLiteral(t);
            },
            aliasable: function (t) {
              var s = this.aliases[t];
              return s
                ? (s.referenceCount++, s)
                : (((s = this.aliases[t] = this.source.wrap(t)).aliasable = !0),
                  (s.referenceCount = 1),
                  s);
            },
            setupHelper: function (t, s, e) {
              var i = [];
              return {
                params: i,
                paramsInit: this.setupHelperArgs(s, t, i, e),
                name: this.nameLookup("helpers", s, "helper"),
                callParams: [
                  this.aliasable(
                    this.contextName(0) +
                      " != null ? " +
                      this.contextName(0) +
                      " : (container.nullContext || {})"
                  ),
                ].concat(i),
              };
            },
            setupParams: function (t, s, e) {
              var i = {},
                r = [],
                a = [],
                o = [],
                n = !e,
                h = void 0;
              n && (e = []),
                (i.name = this.quotedString(t)),
                (i.hash = this.popStack()),
                this.trackIds && (i.hashIds = this.popStack()),
                this.stringParams &&
                  ((i.hashTypes = this.popStack()),
                  (i.hashContexts = this.popStack()));
              var c = this.popStack(),
                p = this.popStack();
              (p || c) &&
                ((i.fn = p || "container.noop"),
                (i.inverse = c || "container.noop"));
              for (var u = s; u--; )
                (h = this.popStack()),
                  (e[u] = h),
                  this.trackIds && (o[u] = this.popStack()),
                  this.stringParams &&
                    ((a[u] = this.popStack()), (r[u] = this.popStack()));
              return (
                n && (i.args = this.source.generateArray(e)),
                this.trackIds && (i.ids = this.source.generateArray(o)),
                this.stringParams &&
                  ((i.types = this.source.generateArray(a)),
                  (i.contexts = this.source.generateArray(r))),
                this.options.data && (i.data = "data"),
                this.useBlockParams && (i.blockParams = "blockParams"),
                i
              );
            },
            setupHelperArgs: function (t, s, e, i) {
              var r = this.setupParams(t, s, e);
              return (
                (r.loc = JSON.stringify(this.source.currentLocation)),
                (r = this.objectLiteral(r)),
                i
                  ? (this.useRegister("options"),
                    e.push("options"),
                    ["options=", r])
                  : e
                  ? (e.push(r), "")
                  : r
              );
            },
          }),
            (function () {
              for (
                var t = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(
                    " "
                  ),
                  s = (JavaScriptCompiler.RESERVED_WORDS = {}),
                  e = 0,
                  i = t.length;
                e < i;
                e++
              )
                s[t[e]] = !0;
            })(),
            (JavaScriptCompiler.isValidJavaScriptVariableName = function (t) {
              return (
                !JavaScriptCompiler.RESERVED_WORDS[t] &&
                /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)
              );
            }),
            (exports.default = JavaScriptCompiler),
            (module.exports = exports.default);
        },
        { "../base": 5, "../exception": 18, "../utils": 34, "./code-gen": 8 },
      ],
      12: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var handlebars = (function () {
            var t = {
                trace: function () {},
                yy: {},
                symbols_: {
                  error: 2,
                  root: 3,
                  program: 4,
                  EOF: 5,
                  program_repetition0: 6,
                  statement: 7,
                  mustache: 8,
                  block: 9,
                  rawBlock: 10,
                  partial: 11,
                  partialBlock: 12,
                  content: 13,
                  COMMENT: 14,
                  CONTENT: 15,
                  openRawBlock: 16,
                  rawBlock_repetition0: 17,
                  END_RAW_BLOCK: 18,
                  OPEN_RAW_BLOCK: 19,
                  helperName: 20,
                  openRawBlock_repetition0: 21,
                  openRawBlock_option0: 22,
                  CLOSE_RAW_BLOCK: 23,
                  openBlock: 24,
                  block_option0: 25,
                  closeBlock: 26,
                  openInverse: 27,
                  block_option1: 28,
                  OPEN_BLOCK: 29,
                  openBlock_repetition0: 30,
                  openBlock_option0: 31,
                  openBlock_option1: 32,
                  CLOSE: 33,
                  OPEN_INVERSE: 34,
                  openInverse_repetition0: 35,
                  openInverse_option0: 36,
                  openInverse_option1: 37,
                  openInverseChain: 38,
                  OPEN_INVERSE_CHAIN: 39,
                  openInverseChain_repetition0: 40,
                  openInverseChain_option0: 41,
                  openInverseChain_option1: 42,
                  inverseAndProgram: 43,
                  INVERSE: 44,
                  inverseChain: 45,
                  inverseChain_option0: 46,
                  OPEN_ENDBLOCK: 47,
                  OPEN: 48,
                  mustache_repetition0: 49,
                  mustache_option0: 50,
                  OPEN_UNESCAPED: 51,
                  mustache_repetition1: 52,
                  mustache_option1: 53,
                  CLOSE_UNESCAPED: 54,
                  OPEN_PARTIAL: 55,
                  partialName: 56,
                  partial_repetition0: 57,
                  partial_option0: 58,
                  openPartialBlock: 59,
                  OPEN_PARTIAL_BLOCK: 60,
                  openPartialBlock_repetition0: 61,
                  openPartialBlock_option0: 62,
                  param: 63,
                  sexpr: 64,
                  OPEN_SEXPR: 65,
                  sexpr_repetition0: 66,
                  sexpr_option0: 67,
                  CLOSE_SEXPR: 68,
                  hash: 69,
                  hash_repetition_plus0: 70,
                  hashSegment: 71,
                  ID: 72,
                  EQUALS: 73,
                  blockParams: 74,
                  OPEN_BLOCK_PARAMS: 75,
                  blockParams_repetition_plus0: 76,
                  CLOSE_BLOCK_PARAMS: 77,
                  path: 78,
                  dataName: 79,
                  STRING: 80,
                  NUMBER: 81,
                  BOOLEAN: 82,
                  UNDEFINED: 83,
                  NULL: 84,
                  DATA: 85,
                  pathSegments: 86,
                  SEP: 87,
                  $accept: 0,
                  $end: 1,
                },
                terminals_: {
                  2: "error",
                  5: "EOF",
                  14: "COMMENT",
                  15: "CONTENT",
                  18: "END_RAW_BLOCK",
                  19: "OPEN_RAW_BLOCK",
                  23: "CLOSE_RAW_BLOCK",
                  29: "OPEN_BLOCK",
                  33: "CLOSE",
                  34: "OPEN_INVERSE",
                  39: "OPEN_INVERSE_CHAIN",
                  44: "INVERSE",
                  47: "OPEN_ENDBLOCK",
                  48: "OPEN",
                  51: "OPEN_UNESCAPED",
                  54: "CLOSE_UNESCAPED",
                  55: "OPEN_PARTIAL",
                  60: "OPEN_PARTIAL_BLOCK",
                  65: "OPEN_SEXPR",
                  68: "CLOSE_SEXPR",
                  72: "ID",
                  73: "EQUALS",
                  75: "OPEN_BLOCK_PARAMS",
                  77: "CLOSE_BLOCK_PARAMS",
                  80: "STRING",
                  81: "NUMBER",
                  82: "BOOLEAN",
                  83: "UNDEFINED",
                  84: "NULL",
                  85: "DATA",
                  87: "SEP",
                },
                productions_: [
                  0,
                  [3, 2],
                  [4, 1],
                  [7, 1],
                  [7, 1],
                  [7, 1],
                  [7, 1],
                  [7, 1],
                  [7, 1],
                  [7, 1],
                  [13, 1],
                  [10, 3],
                  [16, 5],
                  [9, 4],
                  [9, 4],
                  [24, 6],
                  [27, 6],
                  [38, 6],
                  [43, 2],
                  [45, 3],
                  [45, 1],
                  [26, 3],
                  [8, 5],
                  [8, 5],
                  [11, 5],
                  [12, 3],
                  [59, 5],
                  [63, 1],
                  [63, 1],
                  [64, 5],
                  [69, 1],
                  [71, 3],
                  [74, 3],
                  [20, 1],
                  [20, 1],
                  [20, 1],
                  [20, 1],
                  [20, 1],
                  [20, 1],
                  [20, 1],
                  [56, 1],
                  [56, 1],
                  [79, 2],
                  [78, 1],
                  [86, 3],
                  [86, 1],
                  [6, 0],
                  [6, 2],
                  [17, 0],
                  [17, 2],
                  [21, 0],
                  [21, 2],
                  [22, 0],
                  [22, 1],
                  [25, 0],
                  [25, 1],
                  [28, 0],
                  [28, 1],
                  [30, 0],
                  [30, 2],
                  [31, 0],
                  [31, 1],
                  [32, 0],
                  [32, 1],
                  [35, 0],
                  [35, 2],
                  [36, 0],
                  [36, 1],
                  [37, 0],
                  [37, 1],
                  [40, 0],
                  [40, 2],
                  [41, 0],
                  [41, 1],
                  [42, 0],
                  [42, 1],
                  [46, 0],
                  [46, 1],
                  [49, 0],
                  [49, 2],
                  [50, 0],
                  [50, 1],
                  [52, 0],
                  [52, 2],
                  [53, 0],
                  [53, 1],
                  [57, 0],
                  [57, 2],
                  [58, 0],
                  [58, 1],
                  [61, 0],
                  [61, 2],
                  [62, 0],
                  [62, 1],
                  [66, 0],
                  [66, 2],
                  [67, 0],
                  [67, 1],
                  [70, 1],
                  [70, 2],
                  [76, 1],
                  [76, 2],
                ],
                performAction: function (t, e, s, i, r, n, a) {
                  var h = n.length - 1;
                  switch (r) {
                    case 1:
                      return n[h - 1];
                    case 2:
                      this.$ = i.prepareProgram(n[h]);
                      break;
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                      this.$ = n[h];
                      break;
                    case 9:
                      this.$ = {
                        type: "CommentStatement",
                        value: i.stripComment(n[h]),
                        strip: i.stripFlags(n[h], n[h]),
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 10:
                      this.$ = {
                        type: "ContentStatement",
                        original: n[h],
                        value: n[h],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 11:
                      this.$ = i.prepareRawBlock(
                        n[h - 2],
                        n[h - 1],
                        n[h],
                        this._$
                      );
                      break;
                    case 12:
                      this.$ = {
                        path: n[h - 3],
                        params: n[h - 2],
                        hash: n[h - 1],
                      };
                      break;
                    case 13:
                      this.$ = i.prepareBlock(
                        n[h - 3],
                        n[h - 2],
                        n[h - 1],
                        n[h],
                        !1,
                        this._$
                      );
                      break;
                    case 14:
                      this.$ = i.prepareBlock(
                        n[h - 3],
                        n[h - 2],
                        n[h - 1],
                        n[h],
                        !0,
                        this._$
                      );
                      break;
                    case 15:
                      this.$ = {
                        open: n[h - 5],
                        path: n[h - 4],
                        params: n[h - 3],
                        hash: n[h - 2],
                        blockParams: n[h - 1],
                        strip: i.stripFlags(n[h - 5], n[h]),
                      };
                      break;
                    case 16:
                    case 17:
                      this.$ = {
                        path: n[h - 4],
                        params: n[h - 3],
                        hash: n[h - 2],
                        blockParams: n[h - 1],
                        strip: i.stripFlags(n[h - 5], n[h]),
                      };
                      break;
                    case 18:
                      this.$ = {
                        strip: i.stripFlags(n[h - 1], n[h - 1]),
                        program: n[h],
                      };
                      break;
                    case 19:
                      var o = i.prepareBlock(
                          n[h - 2],
                          n[h - 1],
                          n[h],
                          n[h],
                          !1,
                          this._$
                        ),
                        l = i.prepareProgram([o], n[h - 1].loc);
                      (l.chained = !0),
                        (this.$ = {
                          strip: n[h - 2].strip,
                          program: l,
                          chain: !0,
                        });
                      break;
                    case 20:
                      this.$ = n[h];
                      break;
                    case 21:
                      this.$ = {
                        path: n[h - 1],
                        strip: i.stripFlags(n[h - 2], n[h]),
                      };
                      break;
                    case 22:
                    case 23:
                      this.$ = i.prepareMustache(
                        n[h - 3],
                        n[h - 2],
                        n[h - 1],
                        n[h - 4],
                        i.stripFlags(n[h - 4], n[h]),
                        this._$
                      );
                      break;
                    case 24:
                      this.$ = {
                        type: "PartialStatement",
                        name: n[h - 3],
                        params: n[h - 2],
                        hash: n[h - 1],
                        indent: "",
                        strip: i.stripFlags(n[h - 4], n[h]),
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 25:
                      this.$ = i.preparePartialBlock(
                        n[h - 2],
                        n[h - 1],
                        n[h],
                        this._$
                      );
                      break;
                    case 26:
                      this.$ = {
                        path: n[h - 3],
                        params: n[h - 2],
                        hash: n[h - 1],
                        strip: i.stripFlags(n[h - 4], n[h]),
                      };
                      break;
                    case 27:
                    case 28:
                      this.$ = n[h];
                      break;
                    case 29:
                      this.$ = {
                        type: "SubExpression",
                        path: n[h - 3],
                        params: n[h - 2],
                        hash: n[h - 1],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 30:
                      this.$ = {
                        type: "Hash",
                        pairs: n[h],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 31:
                      this.$ = {
                        type: "HashPair",
                        key: i.id(n[h - 2]),
                        value: n[h],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 32:
                      this.$ = i.id(n[h - 1]);
                      break;
                    case 33:
                    case 34:
                      this.$ = n[h];
                      break;
                    case 35:
                      this.$ = {
                        type: "StringLiteral",
                        value: n[h],
                        original: n[h],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 36:
                      this.$ = {
                        type: "NumberLiteral",
                        value: Number(n[h]),
                        original: Number(n[h]),
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 37:
                      this.$ = {
                        type: "BooleanLiteral",
                        value: "true" === n[h],
                        original: "true" === n[h],
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 38:
                      this.$ = {
                        type: "UndefinedLiteral",
                        original: void 0,
                        value: void 0,
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 39:
                      this.$ = {
                        type: "NullLiteral",
                        original: null,
                        value: null,
                        loc: i.locInfo(this._$),
                      };
                      break;
                    case 40:
                    case 41:
                      this.$ = n[h];
                      break;
                    case 42:
                      this.$ = i.preparePath(!0, n[h], this._$);
                      break;
                    case 43:
                      this.$ = i.preparePath(!1, n[h], this._$);
                      break;
                    case 44:
                      n[h - 2].push({
                        part: i.id(n[h]),
                        original: n[h],
                        separator: n[h - 1],
                      }),
                        (this.$ = n[h - 2]);
                      break;
                    case 45:
                      this.$ = [{ part: i.id(n[h]), original: n[h] }];
                      break;
                    case 46:
                      this.$ = [];
                      break;
                    case 47:
                      n[h - 1].push(n[h]);
                      break;
                    case 48:
                      this.$ = [];
                      break;
                    case 49:
                      n[h - 1].push(n[h]);
                      break;
                    case 50:
                      this.$ = [];
                      break;
                    case 51:
                      n[h - 1].push(n[h]);
                      break;
                    case 58:
                      this.$ = [];
                      break;
                    case 59:
                      n[h - 1].push(n[h]);
                      break;
                    case 64:
                      this.$ = [];
                      break;
                    case 65:
                      n[h - 1].push(n[h]);
                      break;
                    case 70:
                      this.$ = [];
                      break;
                    case 71:
                      n[h - 1].push(n[h]);
                      break;
                    case 78:
                      this.$ = [];
                      break;
                    case 79:
                      n[h - 1].push(n[h]);
                      break;
                    case 82:
                      this.$ = [];
                      break;
                    case 83:
                      n[h - 1].push(n[h]);
                      break;
                    case 86:
                      this.$ = [];
                      break;
                    case 87:
                      n[h - 1].push(n[h]);
                      break;
                    case 90:
                      this.$ = [];
                      break;
                    case 91:
                      n[h - 1].push(n[h]);
                      break;
                    case 94:
                      this.$ = [];
                      break;
                    case 95:
                      n[h - 1].push(n[h]);
                      break;
                    case 98:
                      this.$ = [n[h]];
                      break;
                    case 99:
                      n[h - 1].push(n[h]);
                      break;
                    case 100:
                      this.$ = [n[h]];
                      break;
                    case 101:
                      n[h - 1].push(n[h]);
                  }
                },
                table: [
                  {
                    3: 1,
                    4: 2,
                    5: [2, 46],
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  { 1: [3] },
                  { 5: [1, 4] },
                  {
                    5: [2, 2],
                    7: 5,
                    8: 6,
                    9: 7,
                    10: 8,
                    11: 9,
                    12: 10,
                    13: 11,
                    14: [1, 12],
                    15: [1, 20],
                    16: 17,
                    19: [1, 23],
                    24: 15,
                    27: 16,
                    29: [1, 21],
                    34: [1, 22],
                    39: [2, 2],
                    44: [2, 2],
                    47: [2, 2],
                    48: [1, 13],
                    51: [1, 14],
                    55: [1, 18],
                    59: 19,
                    60: [1, 24],
                  },
                  { 1: [2, 1] },
                  {
                    5: [2, 47],
                    14: [2, 47],
                    15: [2, 47],
                    19: [2, 47],
                    29: [2, 47],
                    34: [2, 47],
                    39: [2, 47],
                    44: [2, 47],
                    47: [2, 47],
                    48: [2, 47],
                    51: [2, 47],
                    55: [2, 47],
                    60: [2, 47],
                  },
                  {
                    5: [2, 3],
                    14: [2, 3],
                    15: [2, 3],
                    19: [2, 3],
                    29: [2, 3],
                    34: [2, 3],
                    39: [2, 3],
                    44: [2, 3],
                    47: [2, 3],
                    48: [2, 3],
                    51: [2, 3],
                    55: [2, 3],
                    60: [2, 3],
                  },
                  {
                    5: [2, 4],
                    14: [2, 4],
                    15: [2, 4],
                    19: [2, 4],
                    29: [2, 4],
                    34: [2, 4],
                    39: [2, 4],
                    44: [2, 4],
                    47: [2, 4],
                    48: [2, 4],
                    51: [2, 4],
                    55: [2, 4],
                    60: [2, 4],
                  },
                  {
                    5: [2, 5],
                    14: [2, 5],
                    15: [2, 5],
                    19: [2, 5],
                    29: [2, 5],
                    34: [2, 5],
                    39: [2, 5],
                    44: [2, 5],
                    47: [2, 5],
                    48: [2, 5],
                    51: [2, 5],
                    55: [2, 5],
                    60: [2, 5],
                  },
                  {
                    5: [2, 6],
                    14: [2, 6],
                    15: [2, 6],
                    19: [2, 6],
                    29: [2, 6],
                    34: [2, 6],
                    39: [2, 6],
                    44: [2, 6],
                    47: [2, 6],
                    48: [2, 6],
                    51: [2, 6],
                    55: [2, 6],
                    60: [2, 6],
                  },
                  {
                    5: [2, 7],
                    14: [2, 7],
                    15: [2, 7],
                    19: [2, 7],
                    29: [2, 7],
                    34: [2, 7],
                    39: [2, 7],
                    44: [2, 7],
                    47: [2, 7],
                    48: [2, 7],
                    51: [2, 7],
                    55: [2, 7],
                    60: [2, 7],
                  },
                  {
                    5: [2, 8],
                    14: [2, 8],
                    15: [2, 8],
                    19: [2, 8],
                    29: [2, 8],
                    34: [2, 8],
                    39: [2, 8],
                    44: [2, 8],
                    47: [2, 8],
                    48: [2, 8],
                    51: [2, 8],
                    55: [2, 8],
                    60: [2, 8],
                  },
                  {
                    5: [2, 9],
                    14: [2, 9],
                    15: [2, 9],
                    19: [2, 9],
                    29: [2, 9],
                    34: [2, 9],
                    39: [2, 9],
                    44: [2, 9],
                    47: [2, 9],
                    48: [2, 9],
                    51: [2, 9],
                    55: [2, 9],
                    60: [2, 9],
                  },
                  {
                    20: 25,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 36,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    4: 37,
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    39: [2, 46],
                    44: [2, 46],
                    47: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  {
                    4: 38,
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    44: [2, 46],
                    47: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  { 15: [2, 48], 17: 39, 18: [2, 48] },
                  {
                    20: 41,
                    56: 40,
                    64: 42,
                    65: [1, 43],
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    4: 44,
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    47: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  {
                    5: [2, 10],
                    14: [2, 10],
                    15: [2, 10],
                    18: [2, 10],
                    19: [2, 10],
                    29: [2, 10],
                    34: [2, 10],
                    39: [2, 10],
                    44: [2, 10],
                    47: [2, 10],
                    48: [2, 10],
                    51: [2, 10],
                    55: [2, 10],
                    60: [2, 10],
                  },
                  {
                    20: 45,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 46,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 47,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 41,
                    56: 48,
                    64: 42,
                    65: [1, 43],
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    33: [2, 78],
                    49: 49,
                    65: [2, 78],
                    72: [2, 78],
                    80: [2, 78],
                    81: [2, 78],
                    82: [2, 78],
                    83: [2, 78],
                    84: [2, 78],
                    85: [2, 78],
                  },
                  {
                    23: [2, 33],
                    33: [2, 33],
                    54: [2, 33],
                    65: [2, 33],
                    68: [2, 33],
                    72: [2, 33],
                    75: [2, 33],
                    80: [2, 33],
                    81: [2, 33],
                    82: [2, 33],
                    83: [2, 33],
                    84: [2, 33],
                    85: [2, 33],
                  },
                  {
                    23: [2, 34],
                    33: [2, 34],
                    54: [2, 34],
                    65: [2, 34],
                    68: [2, 34],
                    72: [2, 34],
                    75: [2, 34],
                    80: [2, 34],
                    81: [2, 34],
                    82: [2, 34],
                    83: [2, 34],
                    84: [2, 34],
                    85: [2, 34],
                  },
                  {
                    23: [2, 35],
                    33: [2, 35],
                    54: [2, 35],
                    65: [2, 35],
                    68: [2, 35],
                    72: [2, 35],
                    75: [2, 35],
                    80: [2, 35],
                    81: [2, 35],
                    82: [2, 35],
                    83: [2, 35],
                    84: [2, 35],
                    85: [2, 35],
                  },
                  {
                    23: [2, 36],
                    33: [2, 36],
                    54: [2, 36],
                    65: [2, 36],
                    68: [2, 36],
                    72: [2, 36],
                    75: [2, 36],
                    80: [2, 36],
                    81: [2, 36],
                    82: [2, 36],
                    83: [2, 36],
                    84: [2, 36],
                    85: [2, 36],
                  },
                  {
                    23: [2, 37],
                    33: [2, 37],
                    54: [2, 37],
                    65: [2, 37],
                    68: [2, 37],
                    72: [2, 37],
                    75: [2, 37],
                    80: [2, 37],
                    81: [2, 37],
                    82: [2, 37],
                    83: [2, 37],
                    84: [2, 37],
                    85: [2, 37],
                  },
                  {
                    23: [2, 38],
                    33: [2, 38],
                    54: [2, 38],
                    65: [2, 38],
                    68: [2, 38],
                    72: [2, 38],
                    75: [2, 38],
                    80: [2, 38],
                    81: [2, 38],
                    82: [2, 38],
                    83: [2, 38],
                    84: [2, 38],
                    85: [2, 38],
                  },
                  {
                    23: [2, 39],
                    33: [2, 39],
                    54: [2, 39],
                    65: [2, 39],
                    68: [2, 39],
                    72: [2, 39],
                    75: [2, 39],
                    80: [2, 39],
                    81: [2, 39],
                    82: [2, 39],
                    83: [2, 39],
                    84: [2, 39],
                    85: [2, 39],
                  },
                  {
                    23: [2, 43],
                    33: [2, 43],
                    54: [2, 43],
                    65: [2, 43],
                    68: [2, 43],
                    72: [2, 43],
                    75: [2, 43],
                    80: [2, 43],
                    81: [2, 43],
                    82: [2, 43],
                    83: [2, 43],
                    84: [2, 43],
                    85: [2, 43],
                    87: [1, 50],
                  },
                  { 72: [1, 35], 86: 51 },
                  {
                    23: [2, 45],
                    33: [2, 45],
                    54: [2, 45],
                    65: [2, 45],
                    68: [2, 45],
                    72: [2, 45],
                    75: [2, 45],
                    80: [2, 45],
                    81: [2, 45],
                    82: [2, 45],
                    83: [2, 45],
                    84: [2, 45],
                    85: [2, 45],
                    87: [2, 45],
                  },
                  {
                    52: 52,
                    54: [2, 82],
                    65: [2, 82],
                    72: [2, 82],
                    80: [2, 82],
                    81: [2, 82],
                    82: [2, 82],
                    83: [2, 82],
                    84: [2, 82],
                    85: [2, 82],
                  },
                  {
                    25: 53,
                    38: 55,
                    39: [1, 57],
                    43: 56,
                    44: [1, 58],
                    45: 54,
                    47: [2, 54],
                  },
                  { 28: 59, 43: 60, 44: [1, 58], 47: [2, 56] },
                  { 13: 62, 15: [1, 20], 18: [1, 61] },
                  {
                    33: [2, 86],
                    57: 63,
                    65: [2, 86],
                    72: [2, 86],
                    80: [2, 86],
                    81: [2, 86],
                    82: [2, 86],
                    83: [2, 86],
                    84: [2, 86],
                    85: [2, 86],
                  },
                  {
                    33: [2, 40],
                    65: [2, 40],
                    72: [2, 40],
                    80: [2, 40],
                    81: [2, 40],
                    82: [2, 40],
                    83: [2, 40],
                    84: [2, 40],
                    85: [2, 40],
                  },
                  {
                    33: [2, 41],
                    65: [2, 41],
                    72: [2, 41],
                    80: [2, 41],
                    81: [2, 41],
                    82: [2, 41],
                    83: [2, 41],
                    84: [2, 41],
                    85: [2, 41],
                  },
                  {
                    20: 64,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  { 26: 65, 47: [1, 66] },
                  {
                    30: 67,
                    33: [2, 58],
                    65: [2, 58],
                    72: [2, 58],
                    75: [2, 58],
                    80: [2, 58],
                    81: [2, 58],
                    82: [2, 58],
                    83: [2, 58],
                    84: [2, 58],
                    85: [2, 58],
                  },
                  {
                    33: [2, 64],
                    35: 68,
                    65: [2, 64],
                    72: [2, 64],
                    75: [2, 64],
                    80: [2, 64],
                    81: [2, 64],
                    82: [2, 64],
                    83: [2, 64],
                    84: [2, 64],
                    85: [2, 64],
                  },
                  {
                    21: 69,
                    23: [2, 50],
                    65: [2, 50],
                    72: [2, 50],
                    80: [2, 50],
                    81: [2, 50],
                    82: [2, 50],
                    83: [2, 50],
                    84: [2, 50],
                    85: [2, 50],
                  },
                  {
                    33: [2, 90],
                    61: 70,
                    65: [2, 90],
                    72: [2, 90],
                    80: [2, 90],
                    81: [2, 90],
                    82: [2, 90],
                    83: [2, 90],
                    84: [2, 90],
                    85: [2, 90],
                  },
                  {
                    20: 74,
                    33: [2, 80],
                    50: 71,
                    63: 72,
                    64: 75,
                    65: [1, 43],
                    69: 73,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  { 72: [1, 79] },
                  {
                    23: [2, 42],
                    33: [2, 42],
                    54: [2, 42],
                    65: [2, 42],
                    68: [2, 42],
                    72: [2, 42],
                    75: [2, 42],
                    80: [2, 42],
                    81: [2, 42],
                    82: [2, 42],
                    83: [2, 42],
                    84: [2, 42],
                    85: [2, 42],
                    87: [1, 50],
                  },
                  {
                    20: 74,
                    53: 80,
                    54: [2, 84],
                    63: 81,
                    64: 75,
                    65: [1, 43],
                    69: 82,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  { 26: 83, 47: [1, 66] },
                  { 47: [2, 55] },
                  {
                    4: 84,
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    39: [2, 46],
                    44: [2, 46],
                    47: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  { 47: [2, 20] },
                  {
                    20: 85,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    4: 86,
                    6: 3,
                    14: [2, 46],
                    15: [2, 46],
                    19: [2, 46],
                    29: [2, 46],
                    34: [2, 46],
                    47: [2, 46],
                    48: [2, 46],
                    51: [2, 46],
                    55: [2, 46],
                    60: [2, 46],
                  },
                  { 26: 87, 47: [1, 66] },
                  { 47: [2, 57] },
                  {
                    5: [2, 11],
                    14: [2, 11],
                    15: [2, 11],
                    19: [2, 11],
                    29: [2, 11],
                    34: [2, 11],
                    39: [2, 11],
                    44: [2, 11],
                    47: [2, 11],
                    48: [2, 11],
                    51: [2, 11],
                    55: [2, 11],
                    60: [2, 11],
                  },
                  { 15: [2, 49], 18: [2, 49] },
                  {
                    20: 74,
                    33: [2, 88],
                    58: 88,
                    63: 89,
                    64: 75,
                    65: [1, 43],
                    69: 90,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    65: [2, 94],
                    66: 91,
                    68: [2, 94],
                    72: [2, 94],
                    80: [2, 94],
                    81: [2, 94],
                    82: [2, 94],
                    83: [2, 94],
                    84: [2, 94],
                    85: [2, 94],
                  },
                  {
                    5: [2, 25],
                    14: [2, 25],
                    15: [2, 25],
                    19: [2, 25],
                    29: [2, 25],
                    34: [2, 25],
                    39: [2, 25],
                    44: [2, 25],
                    47: [2, 25],
                    48: [2, 25],
                    51: [2, 25],
                    55: [2, 25],
                    60: [2, 25],
                  },
                  {
                    20: 92,
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 74,
                    31: 93,
                    33: [2, 60],
                    63: 94,
                    64: 75,
                    65: [1, 43],
                    69: 95,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    75: [2, 60],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 74,
                    33: [2, 66],
                    36: 96,
                    63: 97,
                    64: 75,
                    65: [1, 43],
                    69: 98,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    75: [2, 66],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 74,
                    22: 99,
                    23: [2, 52],
                    63: 100,
                    64: 75,
                    65: [1, 43],
                    69: 101,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    20: 74,
                    33: [2, 92],
                    62: 102,
                    63: 103,
                    64: 75,
                    65: [1, 43],
                    69: 104,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  { 33: [1, 105] },
                  {
                    33: [2, 79],
                    65: [2, 79],
                    72: [2, 79],
                    80: [2, 79],
                    81: [2, 79],
                    82: [2, 79],
                    83: [2, 79],
                    84: [2, 79],
                    85: [2, 79],
                  },
                  { 33: [2, 81] },
                  {
                    23: [2, 27],
                    33: [2, 27],
                    54: [2, 27],
                    65: [2, 27],
                    68: [2, 27],
                    72: [2, 27],
                    75: [2, 27],
                    80: [2, 27],
                    81: [2, 27],
                    82: [2, 27],
                    83: [2, 27],
                    84: [2, 27],
                    85: [2, 27],
                  },
                  {
                    23: [2, 28],
                    33: [2, 28],
                    54: [2, 28],
                    65: [2, 28],
                    68: [2, 28],
                    72: [2, 28],
                    75: [2, 28],
                    80: [2, 28],
                    81: [2, 28],
                    82: [2, 28],
                    83: [2, 28],
                    84: [2, 28],
                    85: [2, 28],
                  },
                  {
                    23: [2, 30],
                    33: [2, 30],
                    54: [2, 30],
                    68: [2, 30],
                    71: 106,
                    72: [1, 107],
                    75: [2, 30],
                  },
                  {
                    23: [2, 98],
                    33: [2, 98],
                    54: [2, 98],
                    68: [2, 98],
                    72: [2, 98],
                    75: [2, 98],
                  },
                  {
                    23: [2, 45],
                    33: [2, 45],
                    54: [2, 45],
                    65: [2, 45],
                    68: [2, 45],
                    72: [2, 45],
                    73: [1, 108],
                    75: [2, 45],
                    80: [2, 45],
                    81: [2, 45],
                    82: [2, 45],
                    83: [2, 45],
                    84: [2, 45],
                    85: [2, 45],
                    87: [2, 45],
                  },
                  {
                    23: [2, 44],
                    33: [2, 44],
                    54: [2, 44],
                    65: [2, 44],
                    68: [2, 44],
                    72: [2, 44],
                    75: [2, 44],
                    80: [2, 44],
                    81: [2, 44],
                    82: [2, 44],
                    83: [2, 44],
                    84: [2, 44],
                    85: [2, 44],
                    87: [2, 44],
                  },
                  { 54: [1, 109] },
                  {
                    54: [2, 83],
                    65: [2, 83],
                    72: [2, 83],
                    80: [2, 83],
                    81: [2, 83],
                    82: [2, 83],
                    83: [2, 83],
                    84: [2, 83],
                    85: [2, 83],
                  },
                  { 54: [2, 85] },
                  {
                    5: [2, 13],
                    14: [2, 13],
                    15: [2, 13],
                    19: [2, 13],
                    29: [2, 13],
                    34: [2, 13],
                    39: [2, 13],
                    44: [2, 13],
                    47: [2, 13],
                    48: [2, 13],
                    51: [2, 13],
                    55: [2, 13],
                    60: [2, 13],
                  },
                  {
                    38: 55,
                    39: [1, 57],
                    43: 56,
                    44: [1, 58],
                    45: 111,
                    46: 110,
                    47: [2, 76],
                  },
                  {
                    33: [2, 70],
                    40: 112,
                    65: [2, 70],
                    72: [2, 70],
                    75: [2, 70],
                    80: [2, 70],
                    81: [2, 70],
                    82: [2, 70],
                    83: [2, 70],
                    84: [2, 70],
                    85: [2, 70],
                  },
                  { 47: [2, 18] },
                  {
                    5: [2, 14],
                    14: [2, 14],
                    15: [2, 14],
                    19: [2, 14],
                    29: [2, 14],
                    34: [2, 14],
                    39: [2, 14],
                    44: [2, 14],
                    47: [2, 14],
                    48: [2, 14],
                    51: [2, 14],
                    55: [2, 14],
                    60: [2, 14],
                  },
                  { 33: [1, 113] },
                  {
                    33: [2, 87],
                    65: [2, 87],
                    72: [2, 87],
                    80: [2, 87],
                    81: [2, 87],
                    82: [2, 87],
                    83: [2, 87],
                    84: [2, 87],
                    85: [2, 87],
                  },
                  { 33: [2, 89] },
                  {
                    20: 74,
                    63: 115,
                    64: 75,
                    65: [1, 43],
                    67: 114,
                    68: [2, 96],
                    69: 116,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  { 33: [1, 117] },
                  { 32: 118, 33: [2, 62], 74: 119, 75: [1, 120] },
                  {
                    33: [2, 59],
                    65: [2, 59],
                    72: [2, 59],
                    75: [2, 59],
                    80: [2, 59],
                    81: [2, 59],
                    82: [2, 59],
                    83: [2, 59],
                    84: [2, 59],
                    85: [2, 59],
                  },
                  { 33: [2, 61], 75: [2, 61] },
                  { 33: [2, 68], 37: 121, 74: 122, 75: [1, 120] },
                  {
                    33: [2, 65],
                    65: [2, 65],
                    72: [2, 65],
                    75: [2, 65],
                    80: [2, 65],
                    81: [2, 65],
                    82: [2, 65],
                    83: [2, 65],
                    84: [2, 65],
                    85: [2, 65],
                  },
                  { 33: [2, 67], 75: [2, 67] },
                  { 23: [1, 123] },
                  {
                    23: [2, 51],
                    65: [2, 51],
                    72: [2, 51],
                    80: [2, 51],
                    81: [2, 51],
                    82: [2, 51],
                    83: [2, 51],
                    84: [2, 51],
                    85: [2, 51],
                  },
                  { 23: [2, 53] },
                  { 33: [1, 124] },
                  {
                    33: [2, 91],
                    65: [2, 91],
                    72: [2, 91],
                    80: [2, 91],
                    81: [2, 91],
                    82: [2, 91],
                    83: [2, 91],
                    84: [2, 91],
                    85: [2, 91],
                  },
                  { 33: [2, 93] },
                  {
                    5: [2, 22],
                    14: [2, 22],
                    15: [2, 22],
                    19: [2, 22],
                    29: [2, 22],
                    34: [2, 22],
                    39: [2, 22],
                    44: [2, 22],
                    47: [2, 22],
                    48: [2, 22],
                    51: [2, 22],
                    55: [2, 22],
                    60: [2, 22],
                  },
                  {
                    23: [2, 99],
                    33: [2, 99],
                    54: [2, 99],
                    68: [2, 99],
                    72: [2, 99],
                    75: [2, 99],
                  },
                  { 73: [1, 108] },
                  {
                    20: 74,
                    63: 125,
                    64: 75,
                    65: [1, 43],
                    72: [1, 35],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    5: [2, 23],
                    14: [2, 23],
                    15: [2, 23],
                    19: [2, 23],
                    29: [2, 23],
                    34: [2, 23],
                    39: [2, 23],
                    44: [2, 23],
                    47: [2, 23],
                    48: [2, 23],
                    51: [2, 23],
                    55: [2, 23],
                    60: [2, 23],
                  },
                  { 47: [2, 19] },
                  { 47: [2, 77] },
                  {
                    20: 74,
                    33: [2, 72],
                    41: 126,
                    63: 127,
                    64: 75,
                    65: [1, 43],
                    69: 128,
                    70: 76,
                    71: 77,
                    72: [1, 78],
                    75: [2, 72],
                    78: 26,
                    79: 27,
                    80: [1, 28],
                    81: [1, 29],
                    82: [1, 30],
                    83: [1, 31],
                    84: [1, 32],
                    85: [1, 34],
                    86: 33,
                  },
                  {
                    5: [2, 24],
                    14: [2, 24],
                    15: [2, 24],
                    19: [2, 24],
                    29: [2, 24],
                    34: [2, 24],
                    39: [2, 24],
                    44: [2, 24],
                    47: [2, 24],
                    48: [2, 24],
                    51: [2, 24],
                    55: [2, 24],
                    60: [2, 24],
                  },
                  { 68: [1, 129] },
                  {
                    65: [2, 95],
                    68: [2, 95],
                    72: [2, 95],
                    80: [2, 95],
                    81: [2, 95],
                    82: [2, 95],
                    83: [2, 95],
                    84: [2, 95],
                    85: [2, 95],
                  },
                  { 68: [2, 97] },
                  {
                    5: [2, 21],
                    14: [2, 21],
                    15: [2, 21],
                    19: [2, 21],
                    29: [2, 21],
                    34: [2, 21],
                    39: [2, 21],
                    44: [2, 21],
                    47: [2, 21],
                    48: [2, 21],
                    51: [2, 21],
                    55: [2, 21],
                    60: [2, 21],
                  },
                  { 33: [1, 130] },
                  { 33: [2, 63] },
                  { 72: [1, 132], 76: 131 },
                  { 33: [1, 133] },
                  { 33: [2, 69] },
                  { 15: [2, 12], 18: [2, 12] },
                  {
                    14: [2, 26],
                    15: [2, 26],
                    19: [2, 26],
                    29: [2, 26],
                    34: [2, 26],
                    47: [2, 26],
                    48: [2, 26],
                    51: [2, 26],
                    55: [2, 26],
                    60: [2, 26],
                  },
                  {
                    23: [2, 31],
                    33: [2, 31],
                    54: [2, 31],
                    68: [2, 31],
                    72: [2, 31],
                    75: [2, 31],
                  },
                  { 33: [2, 74], 42: 134, 74: 135, 75: [1, 120] },
                  {
                    33: [2, 71],
                    65: [2, 71],
                    72: [2, 71],
                    75: [2, 71],
                    80: [2, 71],
                    81: [2, 71],
                    82: [2, 71],
                    83: [2, 71],
                    84: [2, 71],
                    85: [2, 71],
                  },
                  { 33: [2, 73], 75: [2, 73] },
                  {
                    23: [2, 29],
                    33: [2, 29],
                    54: [2, 29],
                    65: [2, 29],
                    68: [2, 29],
                    72: [2, 29],
                    75: [2, 29],
                    80: [2, 29],
                    81: [2, 29],
                    82: [2, 29],
                    83: [2, 29],
                    84: [2, 29],
                    85: [2, 29],
                  },
                  {
                    14: [2, 15],
                    15: [2, 15],
                    19: [2, 15],
                    29: [2, 15],
                    34: [2, 15],
                    39: [2, 15],
                    44: [2, 15],
                    47: [2, 15],
                    48: [2, 15],
                    51: [2, 15],
                    55: [2, 15],
                    60: [2, 15],
                  },
                  { 72: [1, 137], 77: [1, 136] },
                  { 72: [2, 100], 77: [2, 100] },
                  {
                    14: [2, 16],
                    15: [2, 16],
                    19: [2, 16],
                    29: [2, 16],
                    34: [2, 16],
                    44: [2, 16],
                    47: [2, 16],
                    48: [2, 16],
                    51: [2, 16],
                    55: [2, 16],
                    60: [2, 16],
                  },
                  { 33: [1, 138] },
                  { 33: [2, 75] },
                  { 33: [2, 32] },
                  { 72: [2, 101], 77: [2, 101] },
                  {
                    14: [2, 17],
                    15: [2, 17],
                    19: [2, 17],
                    29: [2, 17],
                    34: [2, 17],
                    39: [2, 17],
                    44: [2, 17],
                    47: [2, 17],
                    48: [2, 17],
                    51: [2, 17],
                    55: [2, 17],
                    60: [2, 17],
                  },
                ],
                defaultActions: {
                  4: [2, 1],
                  54: [2, 55],
                  56: [2, 20],
                  60: [2, 57],
                  73: [2, 81],
                  82: [2, 85],
                  86: [2, 18],
                  90: [2, 89],
                  101: [2, 53],
                  104: [2, 93],
                  110: [2, 19],
                  111: [2, 77],
                  116: [2, 97],
                  119: [2, 63],
                  122: [2, 69],
                  135: [2, 75],
                  136: [2, 32],
                },
                parseError: function (t, e) {
                  throw new Error(t);
                },
                parse: function (t) {
                  var e = this,
                    s = [0],
                    i = [null],
                    r = [],
                    n = this.table,
                    a = "",
                    h = 0,
                    o = 0,
                    l = 0;
                  this.lexer.setInput(t),
                    (this.lexer.yy = this.yy),
                    (this.yy.lexer = this.lexer),
                    (this.yy.parser = this),
                    void 0 === this.lexer.yylloc && (this.lexer.yylloc = {});
                  var c = this.lexer.yylloc;
                  r.push(c);
                  var p = this.lexer.options && this.lexer.options.ranges;
                  "function" == typeof this.yy.parseError &&
                    (this.parseError = this.yy.parseError);
                  for (var u, y, _, g, m, k, b, E, f, $, N = {}; ; ) {
                    if (
                      ((_ = s[s.length - 1]),
                      this.defaultActions[_]
                        ? (g = this.defaultActions[_])
                        : (null == u &&
                            (($ = void 0),
                            "number" != typeof ($ = e.lexer.lex() || 1) &&
                              ($ = e.symbols_[$] || $),
                            (u = $)),
                          (g = n[_] && n[_][u])),
                      void 0 === g || !g.length || !g[0])
                    ) {
                      var x = "";
                      if (!l) {
                        for (k in ((f = []), n[_]))
                          this.terminals_[k] &&
                            k > 2 &&
                            f.push("'" + this.terminals_[k] + "'");
                        (x = this.lexer.showPosition
                          ? "Parse error on line " +
                            (h + 1) +
                            ":\n" +
                            this.lexer.showPosition() +
                            "\nExpecting " +
                            f.join(", ") +
                            ", got '" +
                            (this.terminals_[u] || u) +
                            "'"
                          : "Parse error on line " +
                            (h + 1) +
                            ": Unexpected " +
                            (1 == u
                              ? "end of input"
                              : "'" + (this.terminals_[u] || u) + "'")),
                          this.parseError(x, {
                            text: this.lexer.match,
                            token: this.terminals_[u] || u,
                            line: this.lexer.yylineno,
                            loc: c,
                            expected: f,
                          });
                      }
                    }
                    if (g[0] instanceof Array && g.length > 1)
                      throw new Error(
                        "Parse Error: multiple actions possible at state: " +
                          _ +
                          ", token: " +
                          u
                      );
                    switch (g[0]) {
                      case 1:
                        s.push(u),
                          i.push(this.lexer.yytext),
                          r.push(this.lexer.yylloc),
                          s.push(g[1]),
                          (u = null),
                          y
                            ? ((u = y), (y = null))
                            : ((o = this.lexer.yyleng),
                              (a = this.lexer.yytext),
                              (h = this.lexer.yylineno),
                              (c = this.lexer.yylloc),
                              l > 0 && l--);
                        break;
                      case 2:
                        if (
                          ((b = this.productions_[g[1]][1]),
                          (N.$ = i[i.length - b]),
                          (N._$ = {
                            first_line: r[r.length - (b || 1)].first_line,
                            last_line: r[r.length - 1].last_line,
                            first_column: r[r.length - (b || 1)].first_column,
                            last_column: r[r.length - 1].last_column,
                          }),
                          p &&
                            (N._$.range = [
                              r[r.length - (b || 1)].range[0],
                              r[r.length - 1].range[1],
                            ]),
                          void 0 !==
                            (m = this.performAction.call(
                              N,
                              a,
                              o,
                              h,
                              this.yy,
                              g[1],
                              i,
                              r
                            )))
                        )
                          return m;
                        b &&
                          ((s = s.slice(0, -1 * b * 2)),
                          (i = i.slice(0, -1 * b)),
                          (r = r.slice(0, -1 * b))),
                          s.push(this.productions_[g[1]][0]),
                          i.push(N.$),
                          r.push(N._$),
                          (E = n[s[s.length - 2]][s[s.length - 1]]),
                          s.push(E);
                        break;
                      case 3:
                        return !0;
                    }
                  }
                  return !0;
                },
              },
              e = (function () {
                var t = {
                  EOF: 1,
                  parseError: function (t, e) {
                    if (!this.yy.parser) throw new Error(t);
                    this.yy.parser.parseError(t, e);
                  },
                  setInput: function (t) {
                    return (
                      (this._input = t),
                      (this._more = this._less = this.done = !1),
                      (this.yylineno = this.yyleng = 0),
                      (this.yytext = this.matched = this.match = ""),
                      (this.conditionStack = ["INITIAL"]),
                      (this.yylloc = {
                        first_line: 1,
                        first_column: 0,
                        last_line: 1,
                        last_column: 0,
                      }),
                      this.options.ranges && (this.yylloc.range = [0, 0]),
                      (this.offset = 0),
                      this
                    );
                  },
                  input: function () {
                    var t = this._input[0];
                    return (
                      (this.yytext += t),
                      this.yyleng++,
                      this.offset++,
                      (this.match += t),
                      (this.matched += t),
                      t.match(/(?:\r\n?|\n).*/g)
                        ? (this.yylineno++, this.yylloc.last_line++)
                        : this.yylloc.last_column++,
                      this.options.ranges && this.yylloc.range[1]++,
                      (this._input = this._input.slice(1)),
                      t
                    );
                  },
                  unput: function (t) {
                    var e = t.length,
                      s = t.split(/(?:\r\n?|\n)/g);
                    (this._input = t + this._input),
                      (this.yytext = this.yytext.substr(
                        0,
                        this.yytext.length - e - 1
                      )),
                      (this.offset -= e);
                    var i = this.match.split(/(?:\r\n?|\n)/g);
                    (this.match = this.match.substr(0, this.match.length - 1)),
                      (this.matched = this.matched.substr(
                        0,
                        this.matched.length - 1
                      )),
                      s.length - 1 && (this.yylineno -= s.length - 1);
                    var r = this.yylloc.range;
                    return (
                      (this.yylloc = {
                        first_line: this.yylloc.first_line,
                        last_line: this.yylineno + 1,
                        first_column: this.yylloc.first_column,
                        last_column: s
                          ? (s.length === i.length
                              ? this.yylloc.first_column
                              : 0) +
                            i[i.length - s.length].length -
                            s[0].length
                          : this.yylloc.first_column - e,
                      }),
                      this.options.ranges &&
                        (this.yylloc.range = [r[0], r[0] + this.yyleng - e]),
                      this
                    );
                  },
                  more: function () {
                    return (this._more = !0), this;
                  },
                  less: function (t) {
                    this.unput(this.match.slice(t));
                  },
                  pastInput: function () {
                    var t = this.matched.substr(
                      0,
                      this.matched.length - this.match.length
                    );
                    return (
                      (t.length > 20 ? "..." : "") +
                      t.substr(-20).replace(/\n/g, "")
                    );
                  },
                  upcomingInput: function () {
                    var t = this.match;
                    return (
                      t.length < 20 &&
                        (t += this._input.substr(0, 20 - t.length)),
                      (t.substr(0, 20) + (t.length > 20 ? "..." : "")).replace(
                        /\n/g,
                        ""
                      )
                    );
                  },
                  showPosition: function () {
                    var t = this.pastInput(),
                      e = new Array(t.length + 1).join("-");
                    return t + this.upcomingInput() + "\n" + e + "^";
                  },
                  next: function () {
                    if (this.done) return this.EOF;
                    var t, e, s, i, r;
                    this._input || (this.done = !0),
                      this._more || ((this.yytext = ""), (this.match = ""));
                    for (
                      var n = this._currentRules(), a = 0;
                      a < n.length &&
                      (!(s = this._input.match(this.rules[n[a]])) ||
                        (e && !(s[0].length > e[0].length)) ||
                        ((e = s), (i = a), this.options.flex));
                      a++
                    );
                    return e
                      ? ((r = e[0].match(/(?:\r\n?|\n).*/g)) &&
                          (this.yylineno += r.length),
                        (this.yylloc = {
                          first_line: this.yylloc.last_line,
                          last_line: this.yylineno + 1,
                          first_column: this.yylloc.last_column,
                          last_column: r
                            ? r[r.length - 1].length -
                              r[r.length - 1].match(/\r?\n?/)[0].length
                            : this.yylloc.last_column + e[0].length,
                        }),
                        (this.yytext += e[0]),
                        (this.match += e[0]),
                        (this.matches = e),
                        (this.yyleng = this.yytext.length),
                        this.options.ranges &&
                          (this.yylloc.range = [
                            this.offset,
                            (this.offset += this.yyleng),
                          ]),
                        (this._more = !1),
                        (this._input = this._input.slice(e[0].length)),
                        (this.matched += e[0]),
                        (t = this.performAction.call(
                          this,
                          this.yy,
                          this,
                          n[i],
                          this.conditionStack[this.conditionStack.length - 1]
                        )),
                        this.done && this._input && (this.done = !1),
                        t || void 0)
                      : "" === this._input
                      ? this.EOF
                      : this.parseError(
                          "Lexical error on line " +
                            (this.yylineno + 1) +
                            ". Unrecognized text.\n" +
                            this.showPosition(),
                          { text: "", token: null, line: this.yylineno }
                        );
                  },
                  lex: function () {
                    var t = this.next();
                    return void 0 !== t ? t : this.lex();
                  },
                  begin: function (t) {
                    this.conditionStack.push(t);
                  },
                  popState: function () {
                    return this.conditionStack.pop();
                  },
                  _currentRules: function () {
                    return this.conditions[
                      this.conditionStack[this.conditionStack.length - 1]
                    ].rules;
                  },
                  topState: function () {
                    return this.conditionStack[this.conditionStack.length - 2];
                  },
                  pushState: function (t) {
                    this.begin(t);
                  },
                  options: {},
                  performAction: function (t, e, s, i) {
                    function r(t, s) {
                      return (e.yytext = e.yytext.substring(
                        t,
                        e.yyleng - s + t
                      ));
                    }
                    switch (s) {
                      case 0:
                        if (
                          ("\\\\" === e.yytext.slice(-2)
                            ? (r(0, 1), this.begin("mu"))
                            : "\\" === e.yytext.slice(-1)
                            ? (r(0, 1), this.begin("emu"))
                            : this.begin("mu"),
                          e.yytext)
                        )
                          return 15;
                        break;
                      case 1:
                        return 15;
                      case 2:
                        return this.popState(), 15;
                      case 3:
                        return this.begin("raw"), 15;
                      case 4:
                        return (
                          this.popState(),
                          "raw" ===
                          this.conditionStack[this.conditionStack.length - 1]
                            ? 15
                            : (r(5, 9), "END_RAW_BLOCK")
                        );
                      case 5:
                        return 15;
                      case 6:
                        return this.popState(), 14;
                      case 7:
                        return 65;
                      case 8:
                        return 68;
                      case 9:
                        return 19;
                      case 10:
                        return this.popState(), this.begin("raw"), 23;
                      case 11:
                        return 55;
                      case 12:
                        return 60;
                      case 13:
                        return 29;
                      case 14:
                        return 47;
                      case 15:
                      case 16:
                        return this.popState(), 44;
                      case 17:
                        return 34;
                      case 18:
                        return 39;
                      case 19:
                        return 51;
                      case 20:
                        return 48;
                      case 21:
                        this.unput(e.yytext),
                          this.popState(),
                          this.begin("com");
                        break;
                      case 22:
                        return this.popState(), 14;
                      case 23:
                        return 48;
                      case 24:
                        return 73;
                      case 25:
                      case 26:
                        return 72;
                      case 27:
                        return 87;
                      case 28:
                        break;
                      case 29:
                        return this.popState(), 54;
                      case 30:
                        return this.popState(), 33;
                      case 31:
                        return (e.yytext = r(1, 2).replace(/\\"/g, '"')), 80;
                      case 32:
                        return (e.yytext = r(1, 2).replace(/\\'/g, "'")), 80;
                      case 33:
                        return 85;
                      case 34:
                      case 35:
                        return 82;
                      case 36:
                        return 83;
                      case 37:
                        return 84;
                      case 38:
                        return 81;
                      case 39:
                        return 75;
                      case 40:
                        return 77;
                      case 41:
                        return 72;
                      case 42:
                        return (
                          (e.yytext = e.yytext.replace(/\\([\\\]])/g, "$1")), 72
                        );
                      case 43:
                        return "INVALID";
                      case 44:
                        return 5;
                    }
                  },
                  rules: [
                    /^(?:[^\x00]*?(?=(\{\{)))/,
                    /^(?:[^\x00]+)/,
                    /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,
                    /^(?:\{\{\{\{(?=[^\/]))/,
                    /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,
                    /^(?:[^\x00]+?(?=(\{\{\{\{)))/,
                    /^(?:[\s\S]*?--(~)?\}\})/,
                    /^(?:\()/,
                    /^(?:\))/,
                    /^(?:\{\{\{\{)/,
                    /^(?:\}\}\}\})/,
                    /^(?:\{\{(~)?>)/,
                    /^(?:\{\{(~)?#>)/,
                    /^(?:\{\{(~)?#\*?)/,
                    /^(?:\{\{(~)?\/)/,
                    /^(?:\{\{(~)?\^\s*(~)?\}\})/,
                    /^(?:\{\{(~)?\s*else\s*(~)?\}\})/,
                    /^(?:\{\{(~)?\^)/,
                    /^(?:\{\{(~)?\s*else\b)/,
                    /^(?:\{\{(~)?\{)/,
                    /^(?:\{\{(~)?&)/,
                    /^(?:\{\{(~)?!--)/,
                    /^(?:\{\{(~)?![\s\S]*?\}\})/,
                    /^(?:\{\{(~)?\*?)/,
                    /^(?:=)/,
                    /^(?:\.\.)/,
                    /^(?:\.(?=([=~}\s\/.)|])))/,
                    /^(?:[\/.])/,
                    /^(?:\s+)/,
                    /^(?:\}(~)?\}\})/,
                    /^(?:(~)?\}\})/,
                    /^(?:"(\\["]|[^"])*")/,
                    /^(?:'(\\[']|[^'])*')/,
                    /^(?:@)/,
                    /^(?:true(?=([~}\s)])))/,
                    /^(?:false(?=([~}\s)])))/,
                    /^(?:undefined(?=([~}\s)])))/,
                    /^(?:null(?=([~}\s)])))/,
                    /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,
                    /^(?:as\s+\|)/,
                    /^(?:\|)/,
                    /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,
                    /^(?:\[(\\\]|[^\]])*\])/,
                    /^(?:.)/,
                    /^(?:$)/,
                  ],
                  conditions: {
                    mu: {
                      rules: [
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22,
                        23,
                        24,
                        25,
                        26,
                        27,
                        28,
                        29,
                        30,
                        31,
                        32,
                        33,
                        34,
                        35,
                        36,
                        37,
                        38,
                        39,
                        40,
                        41,
                        42,
                        43,
                        44,
                      ],
                      inclusive: !1,
                    },
                    emu: { rules: [2], inclusive: !1 },
                    com: { rules: [6], inclusive: !1 },
                    raw: { rules: [3, 4, 5], inclusive: !1 },
                    INITIAL: { rules: [0, 1, 44], inclusive: !0 },
                  },
                };
                return t;
              })();
            function s() {
              this.yy = {};
            }
            return (t.lexer = e), (s.prototype = t), (t.Parser = s), new s();
          })();
          (exports.default = handlebars), (module.exports = exports.default);
        },
        {},
      ],
      13: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(t) {
            return t && t.__esModule ? t : { default: t };
          }
          (exports.__esModule = !0),
            (exports.print = print),
            (exports.PrintVisitor = PrintVisitor);
          var _visitor = require("./visitor"),
            _visitor2 = _interopRequireDefault(_visitor);
          function print(t) {
            return new PrintVisitor().accept(t);
          }
          function PrintVisitor() {
            this.padding = 0;
          }
          (PrintVisitor.prototype = new _visitor2.default()),
            (PrintVisitor.prototype.pad = function (t) {
              for (var i = "", r = 0, n = this.padding; r < n; r++) i += "  ";
              return (i += t + "\n");
            }),
            (PrintVisitor.prototype.Program = function (t) {
              var i = "",
                r = t.body,
                n = void 0,
                o = void 0;
              if (t.blockParams) {
                var e = "BLOCK PARAMS: [";
                for (n = 0, o = t.blockParams.length; n < o; n++)
                  e += " " + t.blockParams[n];
                (e += " ]"), (i += this.pad(e));
              }
              for (n = 0, o = r.length; n < o; n++) i += this.accept(r[n]);
              return this.padding--, i;
            }),
            (PrintVisitor.prototype.MustacheStatement = function (t) {
              return this.pad("{{ " + this.SubExpression(t) + " }}");
            }),
            (PrintVisitor.prototype.Decorator = function (t) {
              return this.pad("{{ DIRECTIVE " + this.SubExpression(t) + " }}");
            }),
            (PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (
              t
            ) {
              var i = "";
              return (
                (i += this.pad(
                  ("DecoratorBlock" === t.type ? "DIRECTIVE " : "") + "BLOCK:"
                )),
                this.padding++,
                (i += this.pad(this.SubExpression(t))),
                t.program &&
                  ((i += this.pad("PROGRAM:")),
                  this.padding++,
                  (i += this.accept(t.program)),
                  this.padding--),
                t.inverse &&
                  (t.program && this.padding++,
                  (i += this.pad("{{^}}")),
                  this.padding++,
                  (i += this.accept(t.inverse)),
                  this.padding--,
                  t.program && this.padding--),
                this.padding--,
                i
              );
            }),
            (PrintVisitor.prototype.PartialStatement = function (t) {
              var i = "PARTIAL:" + t.name.original;
              return (
                t.params[0] && (i += " " + this.accept(t.params[0])),
                t.hash && (i += " " + this.accept(t.hash)),
                this.pad("{{> " + i + " }}")
              );
            }),
            (PrintVisitor.prototype.PartialBlockStatement = function (t) {
              var i = "PARTIAL BLOCK:" + t.name.original;
              return (
                t.params[0] && (i += " " + this.accept(t.params[0])),
                t.hash && (i += " " + this.accept(t.hash)),
                (i += " " + this.pad("PROGRAM:")),
                this.padding++,
                (i += this.accept(t.program)),
                this.padding--,
                this.pad("{{> " + i + " }}")
              );
            }),
            (PrintVisitor.prototype.ContentStatement = function (t) {
              return this.pad("CONTENT[ '" + t.value + "' ]");
            }),
            (PrintVisitor.prototype.CommentStatement = function (t) {
              return this.pad("{{! '" + t.value + "' }}");
            }),
            (PrintVisitor.prototype.SubExpression = function (t) {
              for (var i, r = t.params, n = [], o = 0, e = r.length; o < e; o++)
                n.push(this.accept(r[o]));
              return (
                (r = "[" + n.join(", ") + "]"),
                (i = t.hash ? " " + this.accept(t.hash) : ""),
                this.accept(t.path) + " " + r + i
              );
            }),
            (PrintVisitor.prototype.PathExpression = function (t) {
              var i = t.parts.join("/");
              return (t.data ? "@" : "") + "PATH:" + i;
            }),
            (PrintVisitor.prototype.StringLiteral = function (t) {
              return '"' + t.value + '"';
            }),
            (PrintVisitor.prototype.NumberLiteral = function (t) {
              return "NUMBER{" + t.value + "}";
            }),
            (PrintVisitor.prototype.BooleanLiteral = function (t) {
              return "BOOLEAN{" + t.value + "}";
            }),
            (PrintVisitor.prototype.UndefinedLiteral = function () {
              return "UNDEFINED";
            }),
            (PrintVisitor.prototype.NullLiteral = function () {
              return "NULL";
            }),
            (PrintVisitor.prototype.Hash = function (t) {
              for (var i = t.pairs, r = [], n = 0, o = i.length; n < o; n++)
                r.push(this.accept(i[n]));
              return "HASH{" + r.join(", ") + "}";
            }),
            (PrintVisitor.prototype.HashPair = function (t) {
              return t.key + "=" + this.accept(t.value);
            });
        },
        { "./visitor": 14 },
      ],
      14: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(t) {
            return t && t.__esModule ? t : { default: t };
          }
          exports.__esModule = !0;
          var _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception);
          function Visitor() {
            this.parents = [];
          }
          function visitSubExpression(t) {
            this.acceptRequired(t, "path"),
              this.acceptArray(t.params),
              this.acceptKey(t, "hash");
          }
          function visitBlock(t) {
            visitSubExpression.call(this, t),
              this.acceptKey(t, "program"),
              this.acceptKey(t, "inverse");
          }
          function visitPartial(t) {
            this.acceptRequired(t, "name"),
              this.acceptArray(t.params),
              this.acceptKey(t, "hash");
          }
          (Visitor.prototype = {
            constructor: Visitor,
            mutating: !1,
            acceptKey: function (t, e) {
              var i = this.accept(t[e]);
              if (this.mutating) {
                if (i && !Visitor.prototype[i.type])
                  throw new _exception2.default(
                    'Unexpected node type "' +
                      i.type +
                      '" found when accepting ' +
                      e +
                      " on " +
                      t.type
                  );
                t[e] = i;
              }
            },
            acceptRequired: function (t, e) {
              if ((this.acceptKey(t, e), !t[e]))
                throw new _exception2.default(t.type + " requires " + e);
            },
            acceptArray: function (t) {
              for (var e = 0, i = t.length; e < i; e++)
                this.acceptKey(t, e), t[e] || (t.splice(e, 1), e--, i--);
            },
            accept: function (t) {
              if (t) {
                if (!this[t.type])
                  throw new _exception2.default("Unknown type: " + t.type, t);
                this.current && this.parents.unshift(this.current),
                  (this.current = t);
                var e = this[t.type](t);
                return (
                  (this.current = this.parents.shift()),
                  !this.mutating || e ? e : !1 !== e ? t : void 0
                );
              }
            },
            Program: function (t) {
              this.acceptArray(t.body);
            },
            MustacheStatement: visitSubExpression,
            Decorator: visitSubExpression,
            BlockStatement: visitBlock,
            DecoratorBlock: visitBlock,
            PartialStatement: visitPartial,
            PartialBlockStatement: function (t) {
              visitPartial.call(this, t), this.acceptKey(t, "program");
            },
            ContentStatement: function () {},
            CommentStatement: function () {},
            SubExpression: visitSubExpression,
            PathExpression: function () {},
            StringLiteral: function () {},
            NumberLiteral: function () {},
            BooleanLiteral: function () {},
            UndefinedLiteral: function () {},
            NullLiteral: function () {},
            Hash: function (t) {
              this.acceptArray(t.pairs);
            },
            HashPair: function (t) {
              this.acceptRequired(t, "value");
            },
          }),
            (exports.default = Visitor),
            (module.exports = exports.default);
        },
        { "../exception": 18 },
      ],
      15: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(t) {
            return t && t.__esModule ? t : { default: t };
          }
          exports.__esModule = !0;
          var _visitor = require("./visitor"),
            _visitor2 = _interopRequireDefault(_visitor);
          function WhitespaceControl() {
            var t =
              arguments.length <= 0 || void 0 === arguments[0]
                ? {}
                : arguments[0];
            this.options = t;
          }
          function isPrevWhitespace(t, e, o) {
            void 0 === e && (e = t.length);
            var i = t[e - 1],
              n = t[e - 2];
            return i
              ? "ContentStatement" === i.type
                ? (n || !o ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(i.original)
                : void 0
              : o;
          }
          function isNextWhitespace(t, e, o) {
            void 0 === e && (e = -1);
            var i = t[e + 1],
              n = t[e + 2];
            return i
              ? "ContentStatement" === i.type
                ? (n || !o ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(i.original)
                : void 0
              : o;
          }
          function omitRight(t, e, o) {
            var i = t[null == e ? 0 : e + 1];
            if (i && "ContentStatement" === i.type && (o || !i.rightStripped)) {
              var n = i.value;
              (i.value = i.value.replace(o ? /^\s+/ : /^[ \t]*\r?\n?/, "")),
                (i.rightStripped = i.value !== n);
            }
          }
          function omitLeft(t, e, o) {
            var i = t[null == e ? t.length - 1 : e - 1];
            if (i && "ContentStatement" === i.type && (o || !i.leftStripped)) {
              var n = i.value;
              return (
                (i.value = i.value.replace(o ? /\s+$/ : /[ \t]+$/, "")),
                (i.leftStripped = i.value !== n),
                i.leftStripped
              );
            }
          }
          (WhitespaceControl.prototype = new _visitor2.default()),
            (WhitespaceControl.prototype.Program = function (t) {
              var e = !this.options.ignoreStandalone,
                o = !this.isRootSeen;
              this.isRootSeen = !0;
              for (var i = t.body, n = 0, r = i.length; n < r; n++) {
                var a = i[n],
                  p = this.accept(a);
                if (p) {
                  var l = isPrevWhitespace(i, n, o),
                    s = isNextWhitespace(i, n, o),
                    c = p.openStandalone && l,
                    u = p.closeStandalone && s,
                    d = p.inlineStandalone && l && s;
                  p.close && omitRight(i, n, !0),
                    p.open && omitLeft(i, n, !0),
                    e &&
                      d &&
                      (omitRight(i, n),
                      omitLeft(i, n) &&
                        "PartialStatement" === a.type &&
                        (a.indent = /([ \t]+$)/.exec(i[n - 1].original)[1])),
                    e &&
                      c &&
                      (omitRight((a.program || a.inverse).body),
                      omitLeft(i, n)),
                    e &&
                      u &&
                      (omitRight(i, n),
                      omitLeft((a.inverse || a.program).body));
                }
              }
              return t;
            }),
            (WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (
              t
            ) {
              this.accept(t.program), this.accept(t.inverse);
              var e = t.program || t.inverse,
                o = t.program && t.inverse,
                i = o,
                n = o;
              if (o && o.chained)
                for (i = o.body[0].program; n.chained; )
                  n = n.body[n.body.length - 1].program;
              var r = {
                open: t.openStrip.open,
                close: t.closeStrip.close,
                openStandalone: isNextWhitespace(e.body),
                closeStandalone: isPrevWhitespace((i || e).body),
              };
              if ((t.openStrip.close && omitRight(e.body, null, !0), o)) {
                var a = t.inverseStrip;
                a.open && omitLeft(e.body, null, !0),
                  a.close && omitRight(i.body, null, !0),
                  t.closeStrip.open && omitLeft(n.body, null, !0),
                  !this.options.ignoreStandalone &&
                    isPrevWhitespace(e.body) &&
                    isNextWhitespace(i.body) &&
                    (omitLeft(e.body), omitRight(i.body));
              } else t.closeStrip.open && omitLeft(e.body, null, !0);
              return r;
            }),
            (WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (
              t
            ) {
              return t.strip;
            }),
            (WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (
              t
            ) {
              var e = t.strip || {};
              return { inlineStandalone: !0, open: e.open, close: e.close };
            }),
            (exports.default = WhitespaceControl),
            (module.exports = exports.default);
        },
        { "./visitor": 14 },
      ],
      16: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.registerDefaultDecorators = registerDefaultDecorators);
          var _decoratorsInline = require("./decorators/inline"),
            _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);
          function registerDefaultDecorators(e) {
            _decoratorsInline2.default(e);
          }
        },
        { "./decorators/inline": 17 },
      ],
      17: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var _utils = require("../utils");
          (exports.default = function (r) {
            r.registerDecorator("inline", function (r, t, a, e) {
              var s = r;
              return (
                t.partials ||
                  ((t.partials = {}),
                  (s = function (e, s) {
                    var i = a.partials;
                    a.partials = _utils.extend({}, i, t.partials);
                    var l = r(e, s);
                    return (a.partials = i), l;
                  })),
                (t.partials[e.args[0]] = e.fn),
                s
              );
            });
          }),
            (module.exports = exports.default);
        },
        { "../utils": 34 },
      ],
      18: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var errorProps = [
            "description",
            "fileName",
            "lineNumber",
            "endLineNumber",
            "message",
            "name",
            "number",
            "stack",
          ];
          function Exception(e, r) {
            var t = r && r.loc,
              o = void 0,
              n = void 0,
              i = void 0,
              c = void 0;
            t &&
              ((o = t.start.line),
              (n = t.end.line),
              (i = t.start.column),
              (c = t.end.column),
              (e += " - " + o + ":" + i));
            for (
              var s = Error.prototype.constructor.call(this, e), u = 0;
              u < errorProps.length;
              u++
            )
              this[errorProps[u]] = s[errorProps[u]];
            Error.captureStackTrace && Error.captureStackTrace(this, Exception);
            try {
              t &&
                ((this.lineNumber = o),
                (this.endLineNumber = n),
                Object.defineProperty
                  ? (Object.defineProperty(this, "column", {
                      value: i,
                      enumerable: !0,
                    }),
                    Object.defineProperty(this, "endColumn", {
                      value: c,
                      enumerable: !0,
                    }))
                  : ((this.column = i), (this.endColumn = c)));
            } catch (e) {}
          }
          (Exception.prototype = new Error()),
            (exports.default = Exception),
            (module.exports = exports.default);
        },
        {},
      ],
      19: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          (exports.__esModule = !0),
            (exports.registerDefaultHelpers = registerDefaultHelpers),
            (exports.moveHelperToHooks = moveHelperToHooks);
          var _helpersBlockHelperMissing = require("./helpers/block-helper-missing"),
            _helpersBlockHelperMissing2 = _interopRequireDefault(
              _helpersBlockHelperMissing
            ),
            _helpersEach = require("./helpers/each"),
            _helpersEach2 = _interopRequireDefault(_helpersEach),
            _helpersHelperMissing = require("./helpers/helper-missing"),
            _helpersHelperMissing2 = _interopRequireDefault(
              _helpersHelperMissing
            ),
            _helpersIf = require("./helpers/if"),
            _helpersIf2 = _interopRequireDefault(_helpersIf),
            _helpersLog = require("./helpers/log"),
            _helpersLog2 = _interopRequireDefault(_helpersLog),
            _helpersLookup = require("./helpers/lookup"),
            _helpersLookup2 = _interopRequireDefault(_helpersLookup),
            _helpersWith = require("./helpers/with"),
            _helpersWith2 = _interopRequireDefault(_helpersWith);
          function registerDefaultHelpers(e) {
            _helpersBlockHelperMissing2.default(e),
              _helpersEach2.default(e),
              _helpersHelperMissing2.default(e),
              _helpersIf2.default(e),
              _helpersLog2.default(e),
              _helpersLookup2.default(e),
              _helpersWith2.default(e);
          }
          function moveHelperToHooks(e, r, l) {
            e.helpers[r] &&
              ((e.hooks[r] = e.helpers[r]), l || delete e.helpers[r]);
          }
        },
        {
          "./helpers/block-helper-missing": 20,
          "./helpers/each": 21,
          "./helpers/helper-missing": 22,
          "./helpers/if": 23,
          "./helpers/log": 24,
          "./helpers/lookup": 25,
          "./helpers/with": 26,
        },
      ],
      20: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var _utils = require("../utils");
          (exports.default = function (t) {
            t.registerHelper("blockHelperMissing", function (e, r) {
              var i = r.inverse,
                s = r.fn;
              if (!0 === e) return s(this);
              if (!1 === e || null == e) return i(this);
              if (_utils.isArray(e))
                return e.length > 0
                  ? (r.ids && (r.ids = [r.name]), t.helpers.each(e, r))
                  : i(this);
              if (r.data && r.ids) {
                var a = _utils.createFrame(r.data);
                (a.contextPath = _utils.appendContextPath(
                  r.data.contextPath,
                  r.name
                )),
                  (r = { data: a });
              }
              return s(e, r);
            });
          }),
            (module.exports = exports.default);
        },
        { "../utils": 34 },
      ],
      21: [
        function (require, module, exports) {
          (function (global) {
            "use strict";
            function _interopRequireDefault(e) {
              return e && e.__esModule ? e : { default: e };
            }
            exports.__esModule = !0;
            var _utils = require("../utils"),
              _exception = require("../exception"),
              _exception2 = _interopRequireDefault(_exception);
            (exports.default = function (e) {
              e.registerHelper("each", function (e, t) {
                if (!t)
                  throw new _exception2.default("Must pass iterator to #each");
                var i,
                  o = t.fn,
                  a = t.inverse,
                  r = 0,
                  l = "",
                  n = void 0,
                  s = void 0;
                function u(t, i, a) {
                  n &&
                    ((n.key = t),
                    (n.index = i),
                    (n.first = 0 === i),
                    (n.last = !!a),
                    s && (n.contextPath = s + t)),
                    (l += o(e[t], {
                      data: n,
                      blockParams: _utils.blockParams([e[t], t], [s + t, null]),
                    }));
                }
                if (
                  (t.data &&
                    t.ids &&
                    (s =
                      _utils.appendContextPath(t.data.contextPath, t.ids[0]) +
                      "."),
                  _utils.isFunction(e) && (e = e.call(this)),
                  t.data && (n = _utils.createFrame(t.data)),
                  e && "object" == typeof e)
                )
                  if (_utils.isArray(e))
                    for (var c = e.length; r < c; r++)
                      r in e && u(r, r, r === e.length - 1);
                  else if (global.Symbol && e[global.Symbol.iterator]) {
                    for (
                      var d = [], f = e[global.Symbol.iterator](), p = f.next();
                      !p.done;
                      p = f.next()
                    )
                      d.push(p.value);
                    for (c = (e = d).length; r < c; r++)
                      u(r, r, r === e.length - 1);
                  } else
                    (i = void 0),
                      Object.keys(e).forEach(function (e) {
                        void 0 !== i && u(i, r - 1), (i = e), r++;
                      }),
                      void 0 !== i && u(i, r - 1, !0);
                return 0 === r && (l = a(this)), l;
              });
            }),
              (module.exports = exports.default);
          }.call(
            this,
            typeof global !== "undefined"
              ? global
              : typeof self !== "undefined"
              ? self
              : typeof window !== "undefined"
              ? window
              : {}
          ));
        },
        { "../exception": 18, "../utils": 34 },
      ],
      22: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          exports.__esModule = !0;
          var _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception);
          (exports.default = function (e) {
            e.registerHelper("helperMissing", function () {
              if (1 !== arguments.length)
                throw new _exception2.default(
                  'Missing helper: "' +
                    arguments[arguments.length - 1].name +
                    '"'
                );
            });
          }),
            (module.exports = exports.default);
        },
        { "../exception": 18 },
      ],
      23: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          exports.__esModule = !0;
          var _utils = require("../utils"),
            _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception);
          (exports.default = function (e) {
            e.registerHelper("if", function (e, t) {
              if (2 != arguments.length)
                throw new _exception2.default(
                  "#if requires exactly one argument"
                );
              return (
                _utils.isFunction(e) && (e = e.call(this)),
                (!t.hash.includeZero && !e) || _utils.isEmpty(e)
                  ? t.inverse(this)
                  : t.fn(this)
              );
            }),
              e.registerHelper("unless", function (t, i) {
                if (2 != arguments.length)
                  throw new _exception2.default(
                    "#unless requires exactly one argument"
                  );
                return e.helpers.if.call(this, t, {
                  fn: i.inverse,
                  inverse: i.fn,
                  hash: i.hash,
                });
              });
          }),
            (module.exports = exports.default);
        },
        { "../exception": 18, "../utils": 34 },
      ],
      24: [
        function (require, module, exports) {
          "use strict";
          (exports.__esModule = !0),
            (exports.default = function (e) {
              e.registerHelper("log", function () {
                for (
                  var l = [void 0], t = arguments[arguments.length - 1], a = 0;
                  a < arguments.length - 1;
                  a++
                )
                  l.push(arguments[a]);
                var o = 1;
                null != t.hash.level
                  ? (o = t.hash.level)
                  : t.data && null != t.data.level && (o = t.data.level),
                  (l[0] = o),
                  e.log.apply(e, l);
              });
            }),
            (module.exports = exports.default);
        },
        {},
      ],
      25: [
        function (require, module, exports) {
          "use strict";
          (exports.__esModule = !0),
            (exports.default = function (e) {
              e.registerHelper("lookup", function (e, o, t) {
                return e ? t.lookupProperty(e, o) : e;
              });
            }),
            (module.exports = exports.default);
        },
        {},
      ],
      26: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(t) {
            return t && t.__esModule ? t : { default: t };
          }
          exports.__esModule = !0;
          var _utils = require("../utils"),
            _exception = require("../exception"),
            _exception2 = _interopRequireDefault(_exception);
          (exports.default = function (t) {
            t.registerHelper("with", function (t, e) {
              if (2 != arguments.length)
                throw new _exception2.default(
                  "#with requires exactly one argument"
                );
              _utils.isFunction(t) && (t = t.call(this));
              var i = e.fn;
              if (_utils.isEmpty(t)) return e.inverse(this);
              var r = e.data;
              return (
                e.data &&
                  e.ids &&
                  ((r = _utils.createFrame(
                    e.data
                  )).contextPath = _utils.appendContextPath(
                    e.data.contextPath,
                    e.ids[0]
                  )),
                i(t, {
                  data: r,
                  blockParams: _utils.blockParams([t], [r && r.contextPath]),
                })
              );
            });
          }),
            (module.exports = exports.default);
        },
        { "../exception": 18, "../utils": 34 },
      ],
      27: [
        function (require, module, exports) {
          "use strict";
          (exports.__esModule = !0),
            (exports.createNewLookupObject = createNewLookupObject);
          var _utils = require("../utils");
          function createNewLookupObject() {
            for (var e = arguments.length, t = Array(e), r = 0; r < e; r++)
              t[r] = arguments[r];
            return _utils.extend.apply(void 0, [Object.create(null)].concat(t));
          }
        },
        { "../utils": 34 },
      ],
      28: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireWildcard(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
              for (var o in e)
                Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
            return (t.default = e), t;
          }
          (exports.__esModule = !0),
            (exports.createProtoAccessControl = createProtoAccessControl),
            (exports.resultIsAllowed = resultIsAllowed),
            (exports.resetLoggedProperties = resetLoggedProperties);
          var _createNewLookupObject = require("./create-new-lookup-object"),
            _logger = require("../logger"),
            logger = _interopRequireWildcard(_logger),
            loggedProperties = Object.create(null);
          function createProtoAccessControl(e) {
            var t = Object.create(null);
            (t.constructor = !1),
              (t.__defineGetter__ = !1),
              (t.__defineSetter__ = !1),
              (t.__lookupGetter__ = !1);
            var o = Object.create(null);
            return (
              (o.__proto__ = !1),
              {
                properties: {
                  whitelist: _createNewLookupObject.createNewLookupObject(
                    o,
                    e.allowedProtoProperties
                  ),
                  defaultValue: e.allowProtoPropertiesByDefault,
                },
                methods: {
                  whitelist: _createNewLookupObject.createNewLookupObject(
                    t,
                    e.allowedProtoMethods
                  ),
                  defaultValue: e.allowProtoMethodsByDefault,
                },
              }
            );
          }
          function resultIsAllowed(e, t, o) {
            return checkWhiteList(
              "function" == typeof e ? t.methods : t.properties,
              o
            );
          }
          function checkWhiteList(e, t) {
            return void 0 !== e.whitelist[t]
              ? !0 === e.whitelist[t]
              : void 0 !== e.defaultValue
              ? e.defaultValue
              : (logUnexpecedPropertyAccessOnce(t), !1);
          }
          function logUnexpecedPropertyAccessOnce(e) {
            !0 !== loggedProperties[e] &&
              ((loggedProperties[e] = !0),
              logger.log(
                "error",
                'Handlebars: Access has been denied to resolve the property "' +
                  e +
                  '" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'
              ));
          }
          function resetLoggedProperties() {
            Object.keys(loggedProperties).forEach(function (e) {
              delete loggedProperties[e];
            });
          }
        },
        { "../logger": 30, "./create-new-lookup-object": 27 },
      ],
      29: [
        function (require, module, exports) {
          "use strict";
          function wrapHelper(e, r) {
            if ("function" != typeof e) return e;
            return function () {
              var t = arguments[arguments.length - 1];
              return (
                (arguments[arguments.length - 1] = r(t)),
                e.apply(this, arguments)
              );
            };
          }
          (exports.__esModule = !0), (exports.wrapHelper = wrapHelper);
        },
        {},
      ],
      30: [
        function (require, module, exports) {
          "use strict";
          exports.__esModule = !0;
          var _utils = require("./utils"),
            logger = {
              methodMap: ["debug", "info", "warn", "error"],
              level: "info",
              lookupLevel: function (e) {
                if ("string" == typeof e) {
                  var o = _utils.indexOf(logger.methodMap, e.toLowerCase());
                  e = o >= 0 ? o : parseInt(e, 10);
                }
                return e;
              },
              log: function (e) {
                if (
                  ((e = logger.lookupLevel(e)),
                  "undefined" != typeof console &&
                    logger.lookupLevel(logger.level) <= e)
                ) {
                  var o = logger.methodMap[e];
                  console[o] || (o = "log");
                  for (
                    var l = arguments.length,
                      r = Array(l > 1 ? l - 1 : 0),
                      t = 1;
                    t < l;
                    t++
                  )
                    r[t - 1] = arguments[t];
                  console[o].apply(console, r);
                }
              },
            };
          (exports.default = logger), (module.exports = exports.default);
        },
        { "./utils": 34 },
      ],
      31: [
        function (require, module, exports) {
          (function (global) {
            "use strict";
            (exports.__esModule = !0),
              (exports.default = function (e) {
                var o = "undefined" != typeof global ? global : window,
                  n = o.Handlebars;
                e.noConflict = function () {
                  return o.Handlebars === e && (o.Handlebars = n), e;
                };
              }),
              (module.exports = exports.default);
          }.call(
            this,
            typeof global !== "undefined"
              ? global
              : typeof self !== "undefined"
              ? self
              : typeof window !== "undefined"
              ? window
              : {}
          ));
        },
        {},
      ],
      32: [
        function (require, module, exports) {
          "use strict";
          function _interopRequireDefault(e) {
            return e && e.__esModule ? e : { default: e };
          }
          function _interopRequireWildcard(e) {
            if (e && e.__esModule) return e;
            var r = {};
            if (null != e)
              for (var t in e)
                Object.prototype.hasOwnProperty.call(e, t) && (r[t] = e[t]);
            return (r.default = e), r;
          }
          (exports.__esModule = !0),
            (exports.checkRevision = checkRevision),
            (exports.template = template),
            (exports.wrapProgram = wrapProgram),
            (exports.resolvePartial = resolvePartial),
            (exports.invokePartial = invokePartial),
            (exports.noop = noop);
          var _utils = require("./utils"),
            Utils = _interopRequireWildcard(_utils),
            _exception = require("./exception"),
            _exception2 = _interopRequireDefault(_exception),
            _base = require("./base"),
            _helpers = require("./helpers"),
            _internalWrapHelper = require("./internal/wrapHelper"),
            _internalProtoAccess = require("./internal/proto-access");
          function checkRevision(e) {
            var r = (e && e[0]) || 1,
              t = _base.COMPILER_REVISION;
            if (
              !(
                r >= _base.LAST_COMPATIBLE_COMPILER_REVISION &&
                r <= _base.COMPILER_REVISION
              )
            ) {
              if (r < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
                var o = _base.REVISION_CHANGES[t],
                  a = _base.REVISION_CHANGES[r];
                throw new _exception2.default(
                  "Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" +
                    o +
                    ") or downgrade your runtime to an older version (" +
                    a +
                    ")."
                );
              }
              throw new _exception2.default(
                "Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" +
                  e[1] +
                  ")."
              );
            }
          }
          function template(e, r) {
            if (!r)
              throw new _exception2.default(
                "No environment passed to template"
              );
            if (!e || !e.main)
              throw new _exception2.default(
                "Unknown template object: " + typeof e
              );
            (e.main.decorator = e.main_d), r.VM.checkRevision(e.compiler);
            var t = e.compiler && 7 === e.compiler[0];
            var o = {
              strict: function (e, r, t) {
                if (!(e && r in e))
                  throw new _exception2.default(
                    '"' + r + '" not defined in ' + e,
                    { loc: t }
                  );
                return e[r];
              },
              lookupProperty: function (e, r) {
                var t = e[r];
                return null == t
                  ? t
                  : Object.prototype.hasOwnProperty.call(e, r)
                  ? t
                  : _internalProtoAccess.resultIsAllowed(
                      t,
                      o.protoAccessControl,
                      r
                    )
                  ? t
                  : void 0;
              },
              lookup: function (e, r) {
                for (var t = e.length, a = 0; a < t; a++) {
                  if (null != (e[a] && o.lookupProperty(e[a], r)))
                    return e[a][r];
                }
              },
              lambda: function (e, r) {
                return "function" == typeof e ? e.call(r) : e;
              },
              escapeExpression: Utils.escapeExpression,
              invokePartial: function (t, o, a) {
                a.hash &&
                  ((o = Utils.extend({}, o, a.hash)), a.ids && (a.ids[0] = !0)),
                  (t = r.VM.resolvePartial.call(this, t, o, a));
                var n = Utils.extend({}, a, {
                    hooks: this.hooks,
                    protoAccessControl: this.protoAccessControl,
                  }),
                  i = r.VM.invokePartial.call(this, t, o, n);
                if (
                  (null == i &&
                    r.compile &&
                    ((a.partials[a.name] = r.compile(t, e.compilerOptions, r)),
                    (i = a.partials[a.name](o, n))),
                  null != i)
                ) {
                  if (a.indent) {
                    for (
                      var s = i.split("\n"), l = 0, p = s.length;
                      l < p && (s[l] || l + 1 !== p);
                      l++
                    )
                      s[l] = a.indent + s[l];
                    i = s.join("\n");
                  }
                  return i;
                }
                throw new _exception2.default(
                  "The partial " +
                    a.name +
                    " could not be compiled when running in runtime-only mode"
                );
              },
              fn: function (r) {
                var t = e[r];
                return (t.decorator = e[r + "_d"]), t;
              },
              programs: [],
              program: function (e, r, t, o, a) {
                var n = this.programs[e],
                  i = this.fn(e);
                return (
                  r || a || o || t
                    ? (n = wrapProgram(this, e, i, r, t, o, a))
                    : n || (n = this.programs[e] = wrapProgram(this, e, i)),
                  n
                );
              },
              data: function (e, r) {
                for (; e && r--; ) e = e._parent;
                return e;
              },
              mergeIfNeeded: function (e, r) {
                var t = e || r;
                return e && r && e !== r && (t = Utils.extend({}, r, e)), t;
              },
              nullContext: Object.seal({}),
              noop: r.VM.noop,
              compilerInfo: e.compiler,
            };
            function a(r) {
              var t =
                  arguments.length <= 1 || void 0 === arguments[1]
                    ? {}
                    : arguments[1],
                n = t.data;
              a._setup(t), !t.partial && e.useData && (n = initData(r, n));
              var i = void 0,
                s = e.useBlockParams ? [] : void 0;
              function l(r) {
                return "" + e.main(o, r, o.helpers, o.partials, n, s, i);
              }
              return (
                e.useDepths &&
                  (i = t.depths
                    ? r != t.depths[0]
                      ? [r].concat(t.depths)
                      : t.depths
                    : [r]),
                (l = executeDecorators(e.main, l, o, t.depths || [], n, s))(
                  r,
                  t
                )
              );
            }
            return (
              (a.isTop = !0),
              (a._setup = function (a) {
                if (a.partial)
                  (o.protoAccessControl = a.protoAccessControl),
                    (o.helpers = a.helpers),
                    (o.partials = a.partials),
                    (o.decorators = a.decorators),
                    (o.hooks = a.hooks);
                else {
                  var n = Utils.extend({}, r.helpers, a.helpers);
                  wrapHelpersToPassLookupProperty(n, o),
                    (o.helpers = n),
                    e.usePartial &&
                      (o.partials = o.mergeIfNeeded(a.partials, r.partials)),
                    (e.usePartial || e.useDecorators) &&
                      (o.decorators = Utils.extend(
                        {},
                        r.decorators,
                        a.decorators
                      )),
                    (o.hooks = {}),
                    (o.protoAccessControl = _internalProtoAccess.createProtoAccessControl(
                      a
                    ));
                  var i = a.allowCallsToHelperMissing || t;
                  _helpers.moveHelperToHooks(o, "helperMissing", i),
                    _helpers.moveHelperToHooks(o, "blockHelperMissing", i);
                }
              }),
              (a._child = function (r, t, a, n) {
                if (e.useBlockParams && !a)
                  throw new _exception2.default("must pass block params");
                if (e.useDepths && !n)
                  throw new _exception2.default("must pass parent depths");
                return wrapProgram(o, r, e[r], t, 0, a, n);
              }),
              a
            );
          }
          function wrapProgram(e, r, t, o, a, n, i) {
            function s(r) {
              var a =
                  arguments.length <= 1 || void 0 === arguments[1]
                    ? {}
                    : arguments[1],
                s = i;
              return (
                !i ||
                  r == i[0] ||
                  (r === e.nullContext && null === i[0]) ||
                  (s = [r].concat(i)),
                t(
                  e,
                  r,
                  e.helpers,
                  e.partials,
                  a.data || o,
                  n && [a.blockParams].concat(n),
                  s
                )
              );
            }
            return (
              ((s = executeDecorators(t, s, e, i, o, n)).program = r),
              (s.depth = i ? i.length : 0),
              (s.blockParams = a || 0),
              s
            );
          }
          function resolvePartial(e, r, t) {
            return (
              e
                ? e.call || t.name || ((t.name = e), (e = t.partials[e]))
                : (e =
                    "@partial-block" === t.name
                      ? t.data["partial-block"]
                      : t.partials[t.name]),
              e
            );
          }
          function invokePartial(e, r, t) {
            var o = t.data && t.data["partial-block"];
            (t.partial = !0),
              t.ids && (t.data.contextPath = t.ids[0] || t.data.contextPath);
            var a = void 0;
            if (
              (t.fn &&
                t.fn !== noop &&
                (function () {
                  t.data = _base.createFrame(t.data);
                  var e = t.fn;
                  (a = t.data["partial-block"] = function (r) {
                    var t =
                      arguments.length <= 1 || void 0 === arguments[1]
                        ? {}
                        : arguments[1];
                    return (
                      (t.data = _base.createFrame(t.data)),
                      (t.data["partial-block"] = o),
                      e(r, t)
                    );
                  }),
                    e.partials &&
                      (t.partials = Utils.extend({}, t.partials, e.partials));
                })(),
              void 0 === e && a && (e = a),
              void 0 === e)
            )
              throw new _exception2.default(
                "The partial " + t.name + " could not be found"
              );
            if (e instanceof Function) return e(r, t);
          }
          function noop() {
            return "";
          }
          function initData(e, r) {
            return (
              (r && "root" in r) ||
                ((r = r ? _base.createFrame(r) : {}).root = e),
              r
            );
          }
          function executeDecorators(e, r, t, o, a, n) {
            if (e.decorator) {
              var i = {};
              (r = e.decorator(r, i, t, o && o[0], a, n, o)),
                Utils.extend(r, i);
            }
            return r;
          }
          function wrapHelpersToPassLookupProperty(e, r) {
            Object.keys(e).forEach(function (t) {
              var o = e[t];
              e[t] = passLookupPropertyOption(o, r);
            });
          }
          function passLookupPropertyOption(e, r) {
            var t = r.lookupProperty;
            return _internalWrapHelper.wrapHelper(e, function (e) {
              return Utils.extend({ lookupProperty: t }, e);
            });
          }
        },
        {
          "./base": 5,
          "./exception": 18,
          "./helpers": 19,
          "./internal/proto-access": 28,
          "./internal/wrapHelper": 29,
          "./utils": 34,
        },
      ],
      33: [
        function (require, module, exports) {
          "use strict";
          function SafeString(t) {
            this.string = t;
          }
          (exports.__esModule = !0),
            (SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
              return "" + this.string;
            }),
            (exports.default = SafeString),
            (module.exports = exports.default);
        },
        {},
      ],
      34: [
        function (require, module, exports) {
          "use strict";
          (exports.__esModule = !0),
            (exports.extend = extend),
            (exports.indexOf = indexOf),
            (exports.escapeExpression = escapeExpression),
            (exports.isEmpty = isEmpty),
            (exports.createFrame = createFrame),
            (exports.blockParams = blockParams),
            (exports.appendContextPath = appendContextPath);
          var escape = {
              "&": "&amp;",
              "<": "&lt;",
              ">": "&gt;",
              '"': "&quot;",
              "'": "&#x27;",
              "`": "&#x60;",
              "=": "&#x3D;",
            },
            badChars = /[&<>"'`=]/g,
            possible = /[&<>"'`=]/;
          function escapeChar(t) {
            return escape[t];
          }
          function extend(t) {
            for (var r = 1; r < arguments.length; r++)
              for (var e in arguments[r])
                Object.prototype.hasOwnProperty.call(arguments[r], e) &&
                  (t[e] = arguments[r][e]);
            return t;
          }
          var toString = Object.prototype.toString;
          exports.toString = toString;
          var isFunction = function (t) {
            return "function" == typeof t;
          };
          isFunction(/x/) &&
            (exports.isFunction = isFunction = function (t) {
              return (
                "function" == typeof t &&
                "[object Function]" === toString.call(t)
              );
            }),
            (exports.isFunction = isFunction);
          var isArray =
            Array.isArray ||
            function (t) {
              return (
                !(!t || "object" != typeof t) &&
                "[object Array]" === toString.call(t)
              );
            };
          function indexOf(t, r) {
            for (var e = 0, n = t.length; e < n; e++) if (t[e] === r) return e;
            return -1;
          }
          function escapeExpression(t) {
            if ("string" != typeof t) {
              if (t && t.toHTML) return t.toHTML();
              if (null == t) return "";
              if (!t) return t + "";
              t = "" + t;
            }
            return possible.test(t) ? t.replace(badChars, escapeChar) : t;
          }
          function isEmpty(t) {
            return (!t && 0 !== t) || !(!isArray(t) || 0 !== t.length);
          }
          function createFrame(t) {
            var r = extend({}, t);
            return (r._parent = t), r;
          }
          function blockParams(t, r) {
            return (t.path = r), t;
          }
          function appendContextPath(t, r) {
            return (t ? t + "." : "") + r;
          }
          exports.isArray = isArray;
        },
        {},
      ],
      35: [
        function (require, module, exports) {
          var handlebars = require("../dist/cjs/handlebars").default,
            printer = require("../dist/cjs/handlebars/compiler/printer");
          function extension(e, r) {
            var n = require("fs").readFileSync(r, "utf8");
            e.exports = handlebars.compile(n);
          }
          (handlebars.PrintVisitor = printer.PrintVisitor),
            (handlebars.print = printer.print),
            (module.exports = handlebars),
            "undefined" != typeof require &&
              require.extensions &&
              ((require.extensions[".handlebars"] = extension),
              (require.extensions[".hbs"] = extension));
        },
        {
          "../dist/cjs/handlebars": 3,
          "../dist/cjs/handlebars/compiler/printer": 13,
          fs: 2,
        },
      ],
      36: [
        function (require, module, exports) {
          module.exports = require("handlebars/runtime").default;
        },
        { "handlebars/runtime": 4 },
      ],
      37: [
        function (require, module, exports) {
          var _concat = require("./internal/_concat"),
            _curry1 = require("./internal/_curry1"),
            curryN = require("./curryN"),
            addIndex = _curry1(function (r) {
              return curryN(r.length, function () {
                var n = 0,
                  e = arguments[0],
                  t = arguments[arguments.length - 1],
                  c = Array.prototype.slice.call(arguments, 0);
                return (
                  (c[0] = function () {
                    var r = e.apply(this, _concat(arguments, [n, t]));
                    return (n += 1), r;
                  }),
                  r.apply(this, c)
                );
              });
            });
          module.exports = addIndex;
        },
        { "./curryN": 45, "./internal/_concat": 56, "./internal/_curry1": 57 },
      ],
      38: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _dispatchable = require("./internal/_dispatchable"),
            _xany = require("./internal/_xany"),
            any = _curry2(
              _dispatchable(["any"], _xany, function (r, a) {
                for (var e = 0; e < a.length; ) {
                  if (r(a[e])) return !0;
                  e += 1;
                }
                return !1;
              })
            );
          module.exports = any;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_dispatchable": 61,
          "./internal/_xany": 87,
        },
      ],
      39: [
        function (require, module, exports) {
          var _curry3 = require("./internal/_curry3"),
            assoc = _curry3(function (r, u, a) {
              var c = {};
              for (var e in a) c[e] = a[e];
              return (c[r] = u), c;
            });
          module.exports = assoc;
        },
        { "./internal/_curry3": 59 },
      ],
      40: [
        function (require, module, exports) {
          var _arity = require("./internal/_arity"),
            _curry2 = require("./internal/_curry2"),
            bind = _curry2(function (r, n) {
              return _arity(r.length, function () {
                return r.apply(n, arguments);
              });
            });
          module.exports = bind;
        },
        { "./internal/_arity": 53, "./internal/_curry2": 58 },
      ],
      41: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _dispatchable = require("./internal/_dispatchable"),
            _makeFlat = require("./internal/_makeFlat"),
            _xchain = require("./internal/_xchain"),
            map = require("./map"),
            chain = _curry2(
              _dispatchable(["fantasy-land/chain", "chain"], _xchain, function (
                a,
                r
              ) {
                return "function" == typeof r
                  ? function (e) {
                      return a(r(e))(e);
                    }
                  : _makeFlat(!1)(map(a, r));
              })
            );
          module.exports = chain;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_dispatchable": 61,
          "./internal/_makeFlat": 79,
          "./internal/_xchain": 88,
          "./map": 97,
        },
      ],
      42: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _isArray = require("./internal/_isArray"),
            _isFunction = require("./internal/_isFunction"),
            _isString = require("./internal/_isString"),
            toString = require("./toString"),
            concat = _curry2(function (r, n) {
              if (_isArray(r)) {
                if (_isArray(n)) return r.concat(n);
                throw new TypeError(toString(n) + " is not an array");
              }
              if (_isString(r)) {
                if (_isString(n)) return r + n;
                throw new TypeError(toString(n) + " is not a string");
              }
              if (null != r && _isFunction(r["fantasy-land/concat"]))
                return r["fantasy-land/concat"](n);
              if (null != r && _isFunction(r.concat)) return r.concat(n);
              throw new TypeError(
                toString(r) +
                  ' does not have a method named "concat" or "fantasy-land/concat"'
              );
            });
          module.exports = concat;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_isArray": 72,
          "./internal/_isFunction": 74,
          "./internal/_isString": 77,
          "./toString": 101,
        },
      ],
      43: [
        function (require, module, exports) {
          var _includes = require("./internal/_includes"),
            _curry2 = require("./internal/_curry2"),
            contains = _curry2(_includes);
          module.exports = contains;
        },
        { "./internal/_curry2": 58, "./internal/_includes": 68 },
      ],
      44: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            curryN = require("./curryN"),
            curry = _curry1(function (r) {
              return curryN(r.length, r);
            });
          module.exports = curry;
        },
        { "./curryN": 45, "./internal/_curry1": 57 },
      ],
      45: [
        function (require, module, exports) {
          var _arity = require("./internal/_arity"),
            _curry1 = require("./internal/_curry1"),
            _curry2 = require("./internal/_curry2"),
            _curryN = require("./internal/_curryN"),
            curryN = _curry2(function (r, u) {
              return 1 === r ? _curry1(u) : _arity(r, _curryN(r, [], u));
            });
          module.exports = curryN;
        },
        {
          "./internal/_arity": 53,
          "./internal/_curry1": 57,
          "./internal/_curry2": 58,
          "./internal/_curryN": 60,
        },
      ],
      46: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _equals = require("./internal/_equals"),
            equals = _curry2(function (r, e) {
              return _equals(r, e, [], []);
            });
          module.exports = equals;
        },
        { "./internal/_curry2": 58, "./internal/_equals": 62 },
      ],
      47: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _dispatchable = require("./internal/_dispatchable"),
            _filter = require("./internal/_filter"),
            _isObject = require("./internal/_isObject"),
            _reduce = require("./internal/_reduce"),
            _xfilter = require("./internal/_xfilter"),
            keys = require("./keys"),
            filter = _curry2(
              _dispatchable(["filter"], _xfilter, function (e, r) {
                return _isObject(r)
                  ? _reduce(
                      function (i, t) {
                        return e(r[t]) && (i[t] = r[t]), i;
                      },
                      {},
                      keys(r)
                    )
                  : _filter(e, r);
              })
            );
          module.exports = filter;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_dispatchable": 61,
          "./internal/_filter": 63,
          "./internal/_isObject": 75,
          "./internal/_reduce": 83,
          "./internal/_xfilter": 90,
          "./keys": 96,
        },
      ],
      48: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _dispatchable = require("./internal/_dispatchable"),
            _xfind = require("./internal/_xfind"),
            find = _curry2(
              _dispatchable(["find"], _xfind, function (r, i) {
                for (var e = 0, n = i.length; e < n; ) {
                  if (r(i[e])) return i[e];
                  e += 1;
                }
              })
            );
          module.exports = find;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_dispatchable": 61,
          "./internal/_xfind": 91,
        },
      ],
      49: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            keys = require("./keys"),
            forEachObjIndexed = _curry2(function (r, e) {
              for (var n = keys(e), u = 0; u < n.length; ) {
                var a = n[u];
                r(e[a], a, e), (u += 1);
              }
              return e;
            });
          module.exports = forEachObjIndexed;
        },
        { "./internal/_curry2": 58, "./keys": 96 },
      ],
      50: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            hasPath = require("./hasPath"),
            has = _curry2(function (r, a) {
              return hasPath([r], a);
            });
          module.exports = has;
        },
        { "./hasPath": 51, "./internal/_curry2": 58 },
      ],
      51: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _has = require("./internal/_has"),
            isNil = require("./isNil"),
            hasPath = _curry2(function (r, i) {
              if (0 === r.length || isNil(i)) return !1;
              for (var e = i, a = 0; a < r.length; ) {
                if (isNil(e) || !_has(r[a], e)) return !1;
                (e = e[r[a]]), (a += 1);
              }
              return !0;
            });
          module.exports = hasPath;
        },
        { "./internal/_curry2": 58, "./internal/_has": 67, "./isNil": 95 },
      ],
      52: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _indexOf = require("./internal/_indexOf"),
            _isArray = require("./internal/_isArray"),
            indexOf = _curry2(function (r, e) {
              return "function" != typeof e.indexOf || _isArray(e)
                ? _indexOf(e, r, 0)
                : e.indexOf(r);
            });
          module.exports = indexOf;
        },
        {
          "./internal/_curry2": 58,
          "./internal/_indexOf": 70,
          "./internal/_isArray": 72,
        },
      ],
      53: [
        function (require, module, exports) {
          function _arity(t, r) {
            switch (t) {
              case 0:
                return function () {
                  return r.apply(this, arguments);
                };
              case 1:
                return function (t) {
                  return r.apply(this, arguments);
                };
              case 2:
                return function (t, n) {
                  return r.apply(this, arguments);
                };
              case 3:
                return function (t, n, e) {
                  return r.apply(this, arguments);
                };
              case 4:
                return function (t, n, e, u) {
                  return r.apply(this, arguments);
                };
              case 5:
                return function (t, n, e, u, a) {
                  return r.apply(this, arguments);
                };
              case 6:
                return function (t, n, e, u, a, i) {
                  return r.apply(this, arguments);
                };
              case 7:
                return function (t, n, e, u, a, i, s) {
                  return r.apply(this, arguments);
                };
              case 8:
                return function (t, n, e, u, a, i, s, c) {
                  return r.apply(this, arguments);
                };
              case 9:
                return function (t, n, e, u, a, i, s, c, p) {
                  return r.apply(this, arguments);
                };
              case 10:
                return function (t, n, e, u, a, i, s, c, p, o) {
                  return r.apply(this, arguments);
                };
              default:
                throw new Error(
                  "First argument to _arity must be a non-negative integer no greater than ten"
                );
            }
          }
          module.exports = _arity;
        },
        {},
      ],
      54: [
        function (require, module, exports) {
          function _arrayFromIterator(r) {
            for (var o, a = []; !(o = r.next()).done; ) a.push(o.value);
            return a;
          }
          module.exports = _arrayFromIterator;
        },
        {},
      ],
      55: [
        function (require, module, exports) {
          function _complement(e) {
            return function () {
              return !e.apply(this, arguments);
            };
          }
          module.exports = _complement;
        },
        {},
      ],
      56: [
        function (require, module, exports) {
          function _concat(n, t) {
            var e;
            t = t || [];
            var o = (n = n || []).length,
              r = t.length,
              c = [];
            for (e = 0; e < o; ) (c[c.length] = n[e]), (e += 1);
            for (e = 0; e < r; ) (c[c.length] = t[e]), (e += 1);
            return c;
          }
          module.exports = _concat;
        },
        {},
      ],
      57: [
        function (require, module, exports) {
          var _isPlaceholder = require("./_isPlaceholder");
          function _curry1(r) {
            return function e(l) {
              return 0 === arguments.length || _isPlaceholder(l)
                ? e
                : r.apply(this, arguments);
            };
          }
          module.exports = _curry1;
        },
        { "./_isPlaceholder": 76 },
      ],
      58: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _isPlaceholder = require("./_isPlaceholder");
          function _curry2(r) {
            return function e(u, c) {
              switch (arguments.length) {
                case 0:
                  return e;
                case 1:
                  return _isPlaceholder(u)
                    ? e
                    : _curry1(function (e) {
                        return r(u, e);
                      });
                default:
                  return _isPlaceholder(u) && _isPlaceholder(c)
                    ? e
                    : _isPlaceholder(u)
                    ? _curry1(function (e) {
                        return r(e, c);
                      })
                    : _isPlaceholder(c)
                    ? _curry1(function (e) {
                        return r(u, e);
                      })
                    : r(u, c);
              }
            };
          }
          module.exports = _curry2;
        },
        { "./_curry1": 57, "./_isPlaceholder": 76 },
      ],
      59: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _curry2 = require("./_curry2"),
            _isPlaceholder = require("./_isPlaceholder");
          function _curry3(r) {
            return function e(c, u, l) {
              switch (arguments.length) {
                case 0:
                  return e;
                case 1:
                  return _isPlaceholder(c)
                    ? e
                    : _curry2(function (e, u) {
                        return r(c, e, u);
                      });
                case 2:
                  return _isPlaceholder(c) && _isPlaceholder(u)
                    ? e
                    : _isPlaceholder(c)
                    ? _curry2(function (e, c) {
                        return r(e, u, c);
                      })
                    : _isPlaceholder(u)
                    ? _curry2(function (e, u) {
                        return r(c, e, u);
                      })
                    : _curry1(function (e) {
                        return r(c, u, e);
                      });
                default:
                  return _isPlaceholder(c) &&
                    _isPlaceholder(u) &&
                    _isPlaceholder(l)
                    ? e
                    : _isPlaceholder(c) && _isPlaceholder(u)
                    ? _curry2(function (e, c) {
                        return r(e, c, l);
                      })
                    : _isPlaceholder(c) && _isPlaceholder(l)
                    ? _curry2(function (e, c) {
                        return r(e, u, c);
                      })
                    : _isPlaceholder(u) && _isPlaceholder(l)
                    ? _curry2(function (e, u) {
                        return r(c, e, u);
                      })
                    : _isPlaceholder(c)
                    ? _curry1(function (e) {
                        return r(e, u, l);
                      })
                    : _isPlaceholder(u)
                    ? _curry1(function (e) {
                        return r(c, e, l);
                      })
                    : _isPlaceholder(l)
                    ? _curry1(function (e) {
                        return r(c, u, e);
                      })
                    : r(c, u, l);
              }
            };
          }
          module.exports = _curry3;
        },
        { "./_curry1": 57, "./_curry2": 58, "./_isPlaceholder": 76 },
      ],
      60: [
        function (require, module, exports) {
          var _arity = require("./_arity"),
            _isPlaceholder = require("./_isPlaceholder");
          function _curryN(r, e, l) {
            return function () {
              for (
                var t = [], i = 0, a = r, n = 0;
                n < e.length || i < arguments.length;

              ) {
                var u;
                n < e.length && (!_isPlaceholder(e[n]) || i >= arguments.length)
                  ? (u = e[n])
                  : ((u = arguments[i]), (i += 1)),
                  (t[n] = u),
                  _isPlaceholder(u) || (a -= 1),
                  (n += 1);
              }
              return a <= 0 ? l.apply(this, t) : _arity(a, _curryN(r, t, l));
            };
          }
          module.exports = _curryN;
        },
        { "./_arity": 53, "./_isPlaceholder": 76 },
      ],
      61: [
        function (require, module, exports) {
          var _isArray = require("./_isArray"),
            _isTransformer = require("./_isTransformer");
          function _dispatchable(r, e, i) {
            return function () {
              if (0 === arguments.length) return i();
              var a = Array.prototype.slice.call(arguments, 0),
                n = a.pop();
              if (!_isArray(n)) {
                for (var t = 0; t < r.length; ) {
                  if ("function" == typeof n[r[t]]) return n[r[t]].apply(n, a);
                  t += 1;
                }
                if (_isTransformer(n)) return e.apply(null, a)(n);
              }
              return i.apply(this, arguments);
            };
          }
          module.exports = _dispatchable;
        },
        { "./_isArray": 72, "./_isTransformer": 78 },
      ],
      62: [
        function (require, module, exports) {
          var _arrayFromIterator = require("./_arrayFromIterator"),
            _includesWith = require("./_includesWith"),
            _functionName = require("./_functionName"),
            _has = require("./_has"),
            _objectIs = require("./_objectIs"),
            keys = require("../keys"),
            type = require("../type");
          function _uniqContentEquals(e, a, r, t) {
            var n = _arrayFromIterator(e),
              s = _arrayFromIterator(a);
            function u(e, a) {
              return _equals(e, a, r.slice(), t.slice());
            }
            return !_includesWith(
              function (e, a) {
                return !_includesWith(u, a, e);
              },
              s,
              n
            );
          }
          function _equals(e, a, r, t) {
            if (_objectIs(e, a)) return !0;
            var n = type(e);
            if (n !== type(a)) return !1;
            if (null == e || null == a) return !1;
            if (
              "function" == typeof e["fantasy-land/equals"] ||
              "function" == typeof a["fantasy-land/equals"]
            )
              return (
                "function" == typeof e["fantasy-land/equals"] &&
                e["fantasy-land/equals"](a) &&
                "function" == typeof a["fantasy-land/equals"] &&
                a["fantasy-land/equals"](e)
              );
            if ("function" == typeof e.equals || "function" == typeof a.equals)
              return (
                "function" == typeof e.equals &&
                e.equals(a) &&
                "function" == typeof a.equals &&
                a.equals(e)
              );
            switch (n) {
              case "Arguments":
              case "Array":
              case "Object":
                if (
                  "function" == typeof e.constructor &&
                  "Promise" === _functionName(e.constructor)
                )
                  return e === a;
                break;
              case "Boolean":
              case "Number":
              case "String":
                if (
                  typeof e != typeof a ||
                  !_objectIs(e.valueOf(), a.valueOf())
                )
                  return !1;
                break;
              case "Date":
                if (!_objectIs(e.valueOf(), a.valueOf())) return !1;
                break;
              case "Error":
                return e.name === a.name && e.message === a.message;
              case "RegExp":
                if (
                  e.source !== a.source ||
                  e.global !== a.global ||
                  e.ignoreCase !== a.ignoreCase ||
                  e.multiline !== a.multiline ||
                  e.sticky !== a.sticky ||
                  e.unicode !== a.unicode
                )
                  return !1;
            }
            for (var s = r.length - 1; s >= 0; ) {
              if (r[s] === e) return t[s] === a;
              s -= 1;
            }
            switch (n) {
              case "Map":
                return (
                  e.size === a.size &&
                  _uniqContentEquals(
                    e.entries(),
                    a.entries(),
                    r.concat([e]),
                    t.concat([a])
                  )
                );
              case "Set":
                return (
                  e.size === a.size &&
                  _uniqContentEquals(
                    e.values(),
                    a.values(),
                    r.concat([e]),
                    t.concat([a])
                  )
                );
              case "Arguments":
              case "Array":
              case "Object":
              case "Boolean":
              case "Number":
              case "String":
              case "Date":
              case "Error":
              case "RegExp":
              case "Int8Array":
              case "Uint8Array":
              case "Uint8ClampedArray":
              case "Int16Array":
              case "Uint16Array":
              case "Int32Array":
              case "Uint32Array":
              case "Float32Array":
              case "Float64Array":
              case "ArrayBuffer":
                break;
              default:
                return !1;
            }
            var u = keys(e);
            if (u.length !== keys(a).length) return !1;
            var c = r.concat([e]),
              o = t.concat([a]);
            for (s = u.length - 1; s >= 0; ) {
              var i = u[s];
              if (!_has(i, a) || !_equals(a[i], e[i], c, o)) return !1;
              s -= 1;
            }
            return !0;
          }
          module.exports = _equals;
        },
        {
          "../keys": 96,
          "../type": 102,
          "./_arrayFromIterator": 54,
          "./_functionName": 66,
          "./_has": 67,
          "./_includesWith": 69,
          "./_objectIs": 81,
        },
      ],
      63: [
        function (require, module, exports) {
          function _filter(e, r) {
            for (var t = 0, l = r.length, n = []; t < l; )
              e(r[t]) && (n[n.length] = r[t]), (t += 1);
            return n;
          }
          module.exports = _filter;
        },
        {},
      ],
      64: [
        function (require, module, exports) {
          var _forceReduced = require("./_forceReduced"),
            _isArrayLike = require("./_isArrayLike"),
            _reduce = require("./_reduce"),
            _xfBase = require("./_xfBase"),
            preservingReduced = function (e) {
              return {
                "@@transducer/init": _xfBase.init,
                "@@transducer/result": function (r) {
                  return e["@@transducer/result"](r);
                },
                "@@transducer/step": function (r, u) {
                  var t = e["@@transducer/step"](r, u);
                  return t["@@transducer/reduced"] ? _forceReduced(t) : t;
                },
              };
            },
            _flatCat = function (e) {
              var r = preservingReduced(e);
              return {
                "@@transducer/init": _xfBase.init,
                "@@transducer/result": function (e) {
                  return r["@@transducer/result"](e);
                },
                "@@transducer/step": function (e, u) {
                  return _isArrayLike(u)
                    ? _reduce(r, e, u)
                    : _reduce(r, e, [u]);
                },
              };
            };
          module.exports = _flatCat;
        },
        {
          "./_forceReduced": 65,
          "./_isArrayLike": 73,
          "./_reduce": 83,
          "./_xfBase": 89,
        },
      ],
      65: [
        function (require, module, exports) {
          function _forceReduced(e) {
            return { "@@transducer/value": e, "@@transducer/reduced": !0 };
          }
          module.exports = _forceReduced;
        },
        {},
      ],
      66: [
        function (require, module, exports) {
          function _functionName(n) {
            var t = String(n).match(/^function (\w*)/);
            return null == t ? "" : t[1];
          }
          module.exports = _functionName;
        },
        {},
      ],
      67: [
        function (require, module, exports) {
          function _has(t, e) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          module.exports = _has;
        },
        {},
      ],
      68: [
        function (require, module, exports) {
          var _indexOf = require("./_indexOf");
          function _includes(e, n) {
            return _indexOf(n, e, 0) >= 0;
          }
          module.exports = _includes;
        },
        { "./_indexOf": 70 },
      ],
      69: [
        function (require, module, exports) {
          function _includesWith(e, n, r) {
            for (var t = 0, i = r.length; t < i; ) {
              if (e(n, r[t])) return !0;
              t += 1;
            }
            return !1;
          }
          module.exports = _includesWith;
        },
        {},
      ],
      70: [
        function (require, module, exports) {
          var equals = require("../equals");
          function _indexOf(e, n, r) {
            var f, t;
            if ("function" == typeof e.indexOf)
              switch (typeof n) {
                case "number":
                  if (0 === n) {
                    for (f = 1 / n; r < e.length; ) {
                      if (0 === (t = e[r]) && 1 / t === f) return r;
                      r += 1;
                    }
                    return -1;
                  }
                  if (n != n) {
                    for (; r < e.length; ) {
                      if ("number" == typeof (t = e[r]) && t != t) return r;
                      r += 1;
                    }
                    return -1;
                  }
                  return e.indexOf(n, r);
                case "string":
                case "boolean":
                case "function":
                case "undefined":
                  return e.indexOf(n, r);
                case "object":
                  if (null === n) return e.indexOf(n, r);
              }
            for (; r < e.length; ) {
              if (equals(e[r], n)) return r;
              r += 1;
            }
            return -1;
          }
          module.exports = _indexOf;
        },
        { "../equals": 46 },
      ],
      71: [
        function (require, module, exports) {
          var _has = require("./_has"),
            toString = Object.prototype.toString,
            _isArguments = (function () {
              return "[object Arguments]" === toString.call(arguments)
                ? function (t) {
                    return "[object Arguments]" === toString.call(t);
                  }
                : function (t) {
                    return _has("callee", t);
                  };
            })();
          module.exports = _isArguments;
        },
        { "./_has": 67 },
      ],
      72: [
        function (require, module, exports) {
          module.exports =
            Array.isArray ||
            function (r) {
              return (
                null != r &&
                r.length >= 0 &&
                "[object Array]" === Object.prototype.toString.call(r)
              );
            };
        },
        {},
      ],
      73: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _isArray = require("./_isArray"),
            _isString = require("./_isString"),
            _isArrayLike = _curry1(function (r) {
              return (
                !!_isArray(r) ||
                (!!r &&
                  "object" == typeof r &&
                  !_isString(r) &&
                  (1 === r.nodeType
                    ? !!r.length
                    : 0 === r.length ||
                      (r.length > 0 &&
                        r.hasOwnProperty(0) &&
                        r.hasOwnProperty(r.length - 1))))
              );
            });
          module.exports = _isArrayLike;
        },
        { "./_curry1": 57, "./_isArray": 72, "./_isString": 77 },
      ],
      74: [
        function (require, module, exports) {
          function _isFunction(n) {
            var t = Object.prototype.toString.call(n);
            return (
              "[object Function]" === t ||
              "[object AsyncFunction]" === t ||
              "[object GeneratorFunction]" === t ||
              "[object AsyncGeneratorFunction]" === t
            );
          }
          module.exports = _isFunction;
        },
        {},
      ],
      75: [
        function (require, module, exports) {
          function _isObject(t) {
            return "[object Object]" === Object.prototype.toString.call(t);
          }
          module.exports = _isObject;
        },
        {},
      ],
      76: [
        function (require, module, exports) {
          function _isPlaceholder(e) {
            return (
              null != e &&
              "object" == typeof e &&
              !0 === e["@@functional/placeholder"]
            );
          }
          module.exports = _isPlaceholder;
        },
        {},
      ],
      77: [
        function (require, module, exports) {
          function _isString(t) {
            return "[object String]" === Object.prototype.toString.call(t);
          }
          module.exports = _isString;
        },
        {},
      ],
      78: [
        function (require, module, exports) {
          function _isTransformer(r) {
            return null != r && "function" == typeof r["@@transducer/step"];
          }
          module.exports = _isTransformer;
        },
        {},
      ],
      79: [
        function (require, module, exports) {
          var _isArrayLike = require("./_isArrayLike");
          function _makeFlat(e) {
            return function r(t) {
              for (var i, n, a, l = [], o = 0, u = t.length; o < u; ) {
                if (_isArrayLike(t[o]))
                  for (a = 0, n = (i = e ? r(t[o]) : t[o]).length; a < n; )
                    (l[l.length] = i[a]), (a += 1);
                else l[l.length] = t[o];
                o += 1;
              }
              return l;
            };
          }
          module.exports = _makeFlat;
        },
        { "./_isArrayLike": 73 },
      ],
      80: [
        function (require, module, exports) {
          function _map(r, a) {
            for (var e = 0, n = a.length, o = Array(n); e < n; )
              (o[e] = r(a[e])), (e += 1);
            return o;
          }
          module.exports = _map;
        },
        {},
      ],
      81: [
        function (require, module, exports) {
          function _objectIs(t, e) {
            return t === e ? 0 !== t || 1 / t == 1 / e : t != t && e != e;
          }
          module.exports =
            "function" == typeof Object.is ? Object.is : _objectIs;
        },
        {},
      ],
      82: [
        function (require, module, exports) {
          function _quote(e) {
            return (
              '"' +
              e
                .replace(/\\/g, "\\\\")
                .replace(/[\b]/g, "\\b")
                .replace(/\f/g, "\\f")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/\t/g, "\\t")
                .replace(/\v/g, "\\v")
                .replace(/\0/g, "\\0")
                .replace(/"/g, '\\"') +
              '"'
            );
          }
          module.exports = _quote;
        },
        {},
      ],
      83: [
        function (require, module, exports) {
          var _isArrayLike = require("./_isArrayLike"),
            _xwrap = require("./_xwrap"),
            bind = require("../bind");
          function _arrayReduce(e, r, t) {
            for (var u = 0, n = t.length; u < n; ) {
              if (
                (r = e["@@transducer/step"](r, t[u])) &&
                r["@@transducer/reduced"]
              ) {
                r = r["@@transducer/value"];
                break;
              }
              u += 1;
            }
            return e["@@transducer/result"](r);
          }
          function _iterableReduce(e, r, t) {
            for (var u = t.next(); !u.done; ) {
              if (
                (r = e["@@transducer/step"](r, u.value)) &&
                r["@@transducer/reduced"]
              ) {
                r = r["@@transducer/value"];
                break;
              }
              u = t.next();
            }
            return e["@@transducer/result"](r);
          }
          function _methodReduce(e, r, t, u) {
            return e["@@transducer/result"](
              t[u](bind(e["@@transducer/step"], e), r)
            );
          }
          var symIterator =
            "undefined" != typeof Symbol ? Symbol.iterator : "@@iterator";
          function _reduce(e, r, t) {
            if (("function" == typeof e && (e = _xwrap(e)), _isArrayLike(t)))
              return _arrayReduce(e, r, t);
            if ("function" == typeof t["fantasy-land/reduce"])
              return _methodReduce(e, r, t, "fantasy-land/reduce");
            if (null != t[symIterator])
              return _iterableReduce(e, r, t[symIterator]());
            if ("function" == typeof t.next) return _iterableReduce(e, r, t);
            if ("function" == typeof t.reduce)
              return _methodReduce(e, r, t, "reduce");
            throw new TypeError("reduce: list must be array or iterable");
          }
          module.exports = _reduce;
        },
        { "../bind": 40, "./_isArrayLike": 73, "./_xwrap": 93 },
      ],
      84: [
        function (require, module, exports) {
          function _reduced(e) {
            return e && e["@@transducer/reduced"]
              ? e
              : { "@@transducer/value": e, "@@transducer/reduced": !0 };
          }
          module.exports = _reduced;
        },
        {},
      ],
      85: [
        function (require, module, exports) {
          var pad = function (t) {
              return (t < 10 ? "0" : "") + t;
            },
            _toISOString =
              "function" == typeof Date.prototype.toISOString
                ? function (t) {
                    return t.toISOString();
                  }
                : function (t) {
                    return (
                      t.getUTCFullYear() +
                      "-" +
                      pad(t.getUTCMonth() + 1) +
                      "-" +
                      pad(t.getUTCDate()) +
                      "T" +
                      pad(t.getUTCHours()) +
                      ":" +
                      pad(t.getUTCMinutes()) +
                      ":" +
                      pad(t.getUTCSeconds()) +
                      "." +
                      (t.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) +
                      "Z"
                    );
                  };
          module.exports = _toISOString;
        },
        {},
      ],
      86: [
        function (require, module, exports) {
          var _includes = require("./_includes"),
            _map = require("./_map"),
            _quote = require("./_quote"),
            _toISOString = require("./_toISOString"),
            keys = require("../keys"),
            reject = require("../reject");
          function _toString(e, t) {
            var r = function (r) {
                var n = t.concat([e]);
                return _includes(r, n) ? "<Circular>" : _toString(r, n);
              },
              n = function (e, t) {
                return _map(function (t) {
                  return _quote(t) + ": " + r(e[t]);
                }, t.slice().sort());
              };
            switch (Object.prototype.toString.call(e)) {
              case "[object Arguments]":
                return (
                  "(function() { return arguments; }(" +
                  _map(r, e).join(", ") +
                  "))"
                );
              case "[object Array]":
                return (
                  "[" +
                  _map(r, e)
                    .concat(
                      n(
                        e,
                        reject(function (e) {
                          return /^\d+$/.test(e);
                        }, keys(e))
                      )
                    )
                    .join(", ") +
                  "]"
                );
              case "[object Boolean]":
                return "object" == typeof e
                  ? "new Boolean(" + r(e.valueOf()) + ")"
                  : e.toString();
              case "[object Date]":
                return (
                  "new Date(" +
                  (isNaN(e.valueOf()) ? r(NaN) : _quote(_toISOString(e))) +
                  ")"
                );
              case "[object Null]":
                return "null";
              case "[object Number]":
                return "object" == typeof e
                  ? "new Number(" + r(e.valueOf()) + ")"
                  : 1 / e == -1 / 0
                  ? "-0"
                  : e.toString(10);
              case "[object String]":
                return "object" == typeof e
                  ? "new String(" + r(e.valueOf()) + ")"
                  : _quote(e);
              case "[object Undefined]":
                return "undefined";
              default:
                if ("function" == typeof e.toString) {
                  var o = e.toString();
                  if ("[object Object]" !== o) return o;
                }
                return "{" + n(e, keys(e)).join(", ") + "}";
            }
          }
          module.exports = _toString;
        },
        {
          "../keys": 96,
          "../reject": 100,
          "./_includes": 68,
          "./_map": 80,
          "./_quote": 82,
          "./_toISOString": 85,
        },
      ],
      87: [
        function (require, module, exports) {
          var _curry2 = require("./_curry2"),
            _reduced = require("./_reduced"),
            _xfBase = require("./_xfBase"),
            XAny = (function () {
              function r(r, t) {
                (this.xf = t), (this.f = r), (this.any = !1);
              }
              return (
                (r.prototype["@@transducer/init"] = _xfBase.init),
                (r.prototype["@@transducer/result"] = function (r) {
                  return (
                    this.any || (r = this.xf["@@transducer/step"](r, !1)),
                    this.xf["@@transducer/result"](r)
                  );
                }),
                (r.prototype["@@transducer/step"] = function (r, t) {
                  return (
                    this.f(t) &&
                      ((this.any = !0),
                      (r = _reduced(this.xf["@@transducer/step"](r, !0)))),
                    r
                  );
                }),
                r
              );
            })(),
            _xany = _curry2(function (r, t) {
              return new XAny(r, t);
            });
          module.exports = _xany;
        },
        { "./_curry2": 58, "./_reduced": 84, "./_xfBase": 89 },
      ],
      88: [
        function (require, module, exports) {
          var _curry2 = require("./_curry2"),
            _flatCat = require("./_flatCat"),
            map = require("../map"),
            _xchain = _curry2(function (r, a) {
              return map(r, _flatCat(a));
            });
          module.exports = _xchain;
        },
        { "../map": 97, "./_curry2": 58, "./_flatCat": 64 },
      ],
      89: [
        function (require, module, exports) {
          module.exports = {
            init: function () {
              return this.xf["@@transducer/init"]();
            },
            result: function (t) {
              return this.xf["@@transducer/result"](t);
            },
          };
        },
        {},
      ],
      90: [
        function (require, module, exports) {
          var _curry2 = require("./_curry2"),
            _xfBase = require("./_xfBase"),
            XFilter = (function () {
              function r(r, t) {
                (this.xf = t), (this.f = r);
              }
              return (
                (r.prototype["@@transducer/init"] = _xfBase.init),
                (r.prototype["@@transducer/result"] = _xfBase.result),
                (r.prototype["@@transducer/step"] = function (r, t) {
                  return this.f(t) ? this.xf["@@transducer/step"](r, t) : r;
                }),
                r
              );
            })(),
            _xfilter = _curry2(function (r, t) {
              return new XFilter(r, t);
            });
          module.exports = _xfilter;
        },
        { "./_curry2": 58, "./_xfBase": 89 },
      ],
      91: [
        function (require, module, exports) {
          var _curry2 = require("./_curry2"),
            _reduced = require("./_reduced"),
            _xfBase = require("./_xfBase"),
            XFind = (function () {
              function r(r, t) {
                (this.xf = t), (this.f = r), (this.found = !1);
              }
              return (
                (r.prototype["@@transducer/init"] = _xfBase.init),
                (r.prototype["@@transducer/result"] = function (r) {
                  return (
                    this.found || (r = this.xf["@@transducer/step"](r, void 0)),
                    this.xf["@@transducer/result"](r)
                  );
                }),
                (r.prototype["@@transducer/step"] = function (r, t) {
                  return (
                    this.f(t) &&
                      ((this.found = !0),
                      (r = _reduced(this.xf["@@transducer/step"](r, t)))),
                    r
                  );
                }),
                r
              );
            })(),
            _xfind = _curry2(function (r, t) {
              return new XFind(r, t);
            });
          module.exports = _xfind;
        },
        { "./_curry2": 58, "./_reduced": 84, "./_xfBase": 89 },
      ],
      92: [
        function (require, module, exports) {
          var _curry2 = require("./_curry2"),
            _xfBase = require("./_xfBase"),
            XMap = (function () {
              function r(r, t) {
                (this.xf = t), (this.f = r);
              }
              return (
                (r.prototype["@@transducer/init"] = _xfBase.init),
                (r.prototype["@@transducer/result"] = _xfBase.result),
                (r.prototype["@@transducer/step"] = function (r, t) {
                  return this.xf["@@transducer/step"](r, this.f(t));
                }),
                r
              );
            })(),
            _xmap = _curry2(function (r, t) {
              return new XMap(r, t);
            });
          module.exports = _xmap;
        },
        { "./_curry2": 58, "./_xfBase": 89 },
      ],
      93: [
        function (require, module, exports) {
          var XWrap = (function () {
            function r(r) {
              this.f = r;
            }
            return (
              (r.prototype["@@transducer/init"] = function () {
                throw new Error("init not implemented on XWrap");
              }),
              (r.prototype["@@transducer/result"] = function (r) {
                return r;
              }),
              (r.prototype["@@transducer/step"] = function (r, t) {
                return this.f(r, t);
              }),
              r
            );
          })();
          function _xwrap(r) {
            return new XWrap(r);
          }
          module.exports = _xwrap;
        },
        {},
      ],
      94: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            is = _curry2(function (r, n) {
              return (null != n && n.constructor === r) || n instanceof r;
            });
          module.exports = is;
        },
        { "./internal/_curry2": 58 },
      ],
      95: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            isNil = _curry1(function (r) {
              return null == r;
            });
          module.exports = isNil;
        },
        { "./internal/_curry1": 57 },
      ],
      96: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            _has = require("./internal/_has"),
            _isArguments = require("./internal/_isArguments"),
            hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString"),
            nonEnumerableProps = [
              "constructor",
              "valueOf",
              "isPrototypeOf",
              "toString",
              "propertyIsEnumerable",
              "hasOwnProperty",
              "toLocaleString",
            ],
            hasArgsEnumBug = (function () {
              "use strict";
              return arguments.propertyIsEnumerable("length");
            })(),
            contains = function (r, n) {
              for (var e = 0; e < r.length; ) {
                if (r[e] === n) return !0;
                e += 1;
              }
              return !1;
            },
            keys =
              "function" != typeof Object.keys || hasArgsEnumBug
                ? _curry1(function (r) {
                    if (Object(r) !== r) return [];
                    var n,
                      e,
                      t = [],
                      u = hasArgsEnumBug && _isArguments(r);
                    for (n in r)
                      !_has(n, r) || (u && "length" === n) || (t[t.length] = n);
                    if (hasEnumBug)
                      for (e = nonEnumerableProps.length - 1; e >= 0; )
                        (n = nonEnumerableProps[e]),
                          _has(n, r) && !contains(t, n) && (t[t.length] = n),
                          (e -= 1);
                    return t;
                  })
                : _curry1(function (r) {
                    return Object(r) !== r ? [] : Object.keys(r);
                  });
          module.exports = keys;
        },
        {
          "./internal/_curry1": 57,
          "./internal/_has": 67,
          "./internal/_isArguments": 71,
        },
      ],
      97: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _dispatchable = require("./internal/_dispatchable"),
            _map = require("./internal/_map"),
            _reduce = require("./internal/_reduce"),
            _xmap = require("./internal/_xmap"),
            curryN = require("./curryN"),
            keys = require("./keys"),
            map = _curry2(
              _dispatchable(["fantasy-land/map", "map"], _xmap, function (
                r,
                e
              ) {
                switch (Object.prototype.toString.call(e)) {
                  case "[object Function]":
                    return curryN(e.length, function () {
                      return r.call(this, e.apply(this, arguments));
                    });
                  case "[object Object]":
                    return _reduce(
                      function (t, a) {
                        return (t[a] = r(e[a])), t;
                      },
                      {},
                      keys(e)
                    );
                  default:
                    return _map(r, e);
                }
              })
            );
          module.exports = map;
        },
        {
          "./curryN": 45,
          "./internal/_curry2": 58,
          "./internal/_dispatchable": 61,
          "./internal/_map": 80,
          "./internal/_reduce": 83,
          "./internal/_xmap": 92,
          "./keys": 96,
        },
      ],
      98: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _reduce = require("./internal/_reduce"),
            keys = require("./keys"),
            mapObjIndexed = _curry2(function (e, r) {
              return _reduce(
                function (u, n) {
                  return (u[n] = e(r[n], n, r)), u;
                },
                {},
                keys(r)
              );
            });
          module.exports = mapObjIndexed;
        },
        { "./internal/_curry2": 58, "./internal/_reduce": 83, "./keys": 96 },
      ],
      99: [
        function (require, module, exports) {
          var _curry3 = require("./internal/_curry3"),
            _reduce = require("./internal/_reduce"),
            reduce = _curry3(_reduce);
          module.exports = reduce;
        },
        { "./internal/_curry3": 59, "./internal/_reduce": 83 },
      ],
      100: [
        function (require, module, exports) {
          var _complement = require("./internal/_complement"),
            _curry2 = require("./internal/_curry2"),
            filter = require("./filter"),
            reject = _curry2(function (e, r) {
              return filter(_complement(e), r);
            });
          module.exports = reject;
        },
        {
          "./filter": 47,
          "./internal/_complement": 55,
          "./internal/_curry2": 58,
        },
      ],
      101: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            _toString = require("./internal/_toString"),
            toString = _curry1(function (r) {
              return _toString(r, []);
            });
          module.exports = toString;
        },
        { "./internal/_curry1": 57, "./internal/_toString": 86 },
      ],
      102: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            type = _curry1(function (r) {
              return null === r
                ? "Null"
                : void 0 === r
                ? "Undefined"
                : Object.prototype.toString.call(r).slice(8, -1);
            });
          module.exports = type;
        },
        { "./internal/_curry1": 57 },
      ],
      103: [
        function (require, module, exports) {
          var util = require("./util"),
            has = Object.prototype.hasOwnProperty,
            hasNativeMap = "undefined" != typeof Map;
          function ArraySet() {
            (this._array = []),
              (this._set = hasNativeMap ? new Map() : Object.create(null));
          }
          (ArraySet.fromArray = function (t, r) {
            for (var e = new ArraySet(), a = 0, i = t.length; a < i; a++)
              e.add(t[a], r);
            return e;
          }),
            (ArraySet.prototype.size = function () {
              return hasNativeMap
                ? this._set.size
                : Object.getOwnPropertyNames(this._set).length;
            }),
            (ArraySet.prototype.add = function (t, r) {
              var e = hasNativeMap ? t : util.toSetString(t),
                a = hasNativeMap ? this.has(t) : has.call(this._set, e),
                i = this._array.length;
              (a && !r) || this._array.push(t),
                a || (hasNativeMap ? this._set.set(t, i) : (this._set[e] = i));
            }),
            (ArraySet.prototype.has = function (t) {
              if (hasNativeMap) return this._set.has(t);
              var r = util.toSetString(t);
              return has.call(this._set, r);
            }),
            (ArraySet.prototype.indexOf = function (t) {
              if (hasNativeMap) {
                var r = this._set.get(t);
                if (r >= 0) return r;
              } else {
                var e = util.toSetString(t);
                if (has.call(this._set, e)) return this._set[e];
              }
              throw new Error('"' + t + '" is not in the set.');
            }),
            (ArraySet.prototype.at = function (t) {
              if (t >= 0 && t < this._array.length) return this._array[t];
              throw new Error("No element indexed by " + t);
            }),
            (ArraySet.prototype.toArray = function () {
              return this._array.slice();
            }),
            (exports.ArraySet = ArraySet);
        },
        { "./util": 112 },
      ],
      104: [
        function (require, module, exports) {
          var base64 = require("./base64"),
            VLQ_BASE_SHIFT = 5,
            VLQ_BASE = 1 << VLQ_BASE_SHIFT,
            VLQ_BASE_MASK = VLQ_BASE - 1,
            VLQ_CONTINUATION_BIT = VLQ_BASE;
          function toVLQSigned(e) {
            return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
          }
          function fromVLQSigned(e) {
            var r = e >> 1;
            return 1 == (1 & e) ? -r : r;
          }
          (exports.encode = function (e) {
            var r,
              _ = "",
              n = toVLQSigned(e);
            do {
              (r = n & VLQ_BASE_MASK),
                (n >>>= VLQ_BASE_SHIFT) > 0 && (r |= VLQ_CONTINUATION_BIT),
                (_ += base64.encode(r));
            } while (n > 0);
            return _;
          }),
            (exports.decode = function (e, r, _) {
              var n,
                o,
                S = e.length,
                t = 0,
                i = 0;
              do {
                if (r >= S)
                  throw new Error("Expected more digits in base 64 VLQ value.");
                if (-1 === (o = base64.decode(e.charCodeAt(r++))))
                  throw new Error("Invalid base64 digit: " + e.charAt(r - 1));
                (n = !!(o & VLQ_CONTINUATION_BIT)),
                  (t += (o &= VLQ_BASE_MASK) << i),
                  (i += VLQ_BASE_SHIFT);
              } while (n);
              (_.value = fromVLQSigned(t)), (_.rest = r);
            });
        },
        { "./base64": 105 },
      ],
      105: [
        function (require, module, exports) {
          var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(
            ""
          );
          (exports.encode = function (e) {
            if (0 <= e && e < intToCharMap.length) return intToCharMap[e];
            throw new TypeError("Must be between 0 and 63: " + e);
          }),
            (exports.decode = function (e) {
              return 65 <= e && e <= 90
                ? e - 65
                : 97 <= e && e <= 122
                ? e - 97 + 26
                : 48 <= e && e <= 57
                ? e - 48 + 52
                : 43 == e
                ? 62
                : 47 == e
                ? 63
                : -1;
            });
        },
        {},
      ],
      106: [
        function (require, module, exports) {
          function recursiveSearch(r, e, t, E, c, n) {
            var o = Math.floor((e - r) / 2) + r,
              s = c(t, E[o], !0);
            return 0 === s
              ? o
              : s > 0
              ? e - o > 1
                ? recursiveSearch(o, e, t, E, c, n)
                : n == exports.LEAST_UPPER_BOUND
                ? e < E.length
                  ? e
                  : -1
                : o
              : o - r > 1
              ? recursiveSearch(r, o, t, E, c, n)
              : n == exports.LEAST_UPPER_BOUND
              ? o
              : r < 0
              ? -1
              : r;
          }
          (exports.GREATEST_LOWER_BOUND = 1),
            (exports.LEAST_UPPER_BOUND = 2),
            (exports.search = function (r, e, t, E) {
              if (0 === e.length) return -1;
              var c = recursiveSearch(
                -1,
                e.length,
                r,
                e,
                t,
                E || exports.GREATEST_LOWER_BOUND
              );
              if (c < 0) return -1;
              for (; c - 1 >= 0 && 0 === t(e[c], e[c - 1], !0); ) --c;
              return c;
            });
        },
        {},
      ],
      107: [
        function (require, module, exports) {
          var util = require("./util");
          function generatedPositionAfter(t, e) {
            var r = t.generatedLine,
              i = e.generatedLine,
              a = t.generatedColumn,
              n = e.generatedColumn;
            return (
              i > r ||
              (i == r && n >= a) ||
              util.compareByGeneratedPositionsInflated(t, e) <= 0
            );
          }
          function MappingList() {
            (this._array = []),
              (this._sorted = !0),
              (this._last = { generatedLine: -1, generatedColumn: 0 });
          }
          (MappingList.prototype.unsortedForEach = function (t, e) {
            this._array.forEach(t, e);
          }),
            (MappingList.prototype.add = function (t) {
              generatedPositionAfter(this._last, t)
                ? ((this._last = t), this._array.push(t))
                : ((this._sorted = !1), this._array.push(t));
            }),
            (MappingList.prototype.toArray = function () {
              return (
                this._sorted ||
                  (this._array.sort(util.compareByGeneratedPositionsInflated),
                  (this._sorted = !0)),
                this._array
              );
            }),
            (exports.MappingList = MappingList);
        },
        { "./util": 112 },
      ],
      108: [
        function (require, module, exports) {
          function swap(n, o, r) {
            var t = n[o];
            (n[o] = n[r]), (n[r] = t);
          }
          function randomIntInRange(n, o) {
            return Math.round(n + Math.random() * (o - n));
          }
          function doQuickSort(n, o, r, t) {
            if (r < t) {
              var a = r - 1;
              swap(n, randomIntInRange(r, t), t);
              for (var u = n[t], i = r; i < t; i++)
                o(n[i], u) <= 0 && swap(n, (a += 1), i);
              swap(n, a + 1, i);
              var c = a + 1;
              doQuickSort(n, o, r, c - 1), doQuickSort(n, o, c + 1, t);
            }
          }
          exports.quickSort = function (n, o) {
            doQuickSort(n, o, 0, n.length - 1);
          };
        },
        {},
      ],
      109: [
        function (require, module, exports) {
          var util = require("./util"),
            binarySearch = require("./binary-search"),
            ArraySet = require("./array-set").ArraySet,
            base64VLQ = require("./base64-vlq"),
            quickSort = require("./quick-sort").quickSort;
          function SourceMapConsumer(e, r) {
            var n = e;
            return (
              "string" == typeof e && (n = util.parseSourceMapInput(e)),
              null != n.sections
                ? new IndexedSourceMapConsumer(n, r)
                : new BasicSourceMapConsumer(n, r)
            );
          }
          function BasicSourceMapConsumer(e, r) {
            var n = e;
            "string" == typeof e && (n = util.parseSourceMapInput(e));
            var o = util.getArg(n, "version"),
              t = util.getArg(n, "sources"),
              i = util.getArg(n, "names", []),
              u = util.getArg(n, "sourceRoot", null),
              s = util.getArg(n, "sourcesContent", null),
              a = util.getArg(n, "mappings"),
              l = util.getArg(n, "file", null);
            if (o != this._version)
              throw new Error("Unsupported version: " + o);
            u && (u = util.normalize(u)),
              (t = t
                .map(String)
                .map(util.normalize)
                .map(function (e) {
                  return u && util.isAbsolute(u) && util.isAbsolute(e)
                    ? util.relative(u, e)
                    : e;
                })),
              (this._names = ArraySet.fromArray(i.map(String), !0)),
              (this._sources = ArraySet.fromArray(t, !0)),
              (this._absoluteSources = this._sources
                .toArray()
                .map(function (e) {
                  return util.computeSourceURL(u, e, r);
                })),
              (this.sourceRoot = u),
              (this.sourcesContent = s),
              (this._mappings = a),
              (this._sourceMapURL = r),
              (this.file = l);
          }
          function Mapping() {
            (this.generatedLine = 0),
              (this.generatedColumn = 0),
              (this.source = null),
              (this.originalLine = null),
              (this.originalColumn = null),
              (this.name = null);
          }
          function IndexedSourceMapConsumer(e, r) {
            var n = e;
            "string" == typeof e && (n = util.parseSourceMapInput(e));
            var o = util.getArg(n, "version"),
              t = util.getArg(n, "sections");
            if (o != this._version)
              throw new Error("Unsupported version: " + o);
            (this._sources = new ArraySet()), (this._names = new ArraySet());
            var i = { line: -1, column: 0 };
            this._sections = t.map(function (e) {
              if (e.url)
                throw new Error(
                  "Support for url field in sections not implemented."
                );
              var n = util.getArg(e, "offset"),
                o = util.getArg(n, "line"),
                t = util.getArg(n, "column");
              if (o < i.line || (o === i.line && t < i.column))
                throw new Error(
                  "Section offsets must be ordered and non-overlapping."
                );
              return (
                (i = n),
                {
                  generatedOffset: {
                    generatedLine: o + 1,
                    generatedColumn: t + 1,
                  },
                  consumer: new SourceMapConsumer(util.getArg(e, "map"), r),
                }
              );
            });
          }
          (SourceMapConsumer.fromSourceMap = function (e, r) {
            return BasicSourceMapConsumer.fromSourceMap(e, r);
          }),
            (SourceMapConsumer.prototype._version = 3),
            (SourceMapConsumer.prototype.__generatedMappings = null),
            Object.defineProperty(
              SourceMapConsumer.prototype,
              "_generatedMappings",
              {
                configurable: !0,
                enumerable: !0,
                get: function () {
                  return (
                    this.__generatedMappings ||
                      this._parseMappings(this._mappings, this.sourceRoot),
                    this.__generatedMappings
                  );
                },
              }
            ),
            (SourceMapConsumer.prototype.__originalMappings = null),
            Object.defineProperty(
              SourceMapConsumer.prototype,
              "_originalMappings",
              {
                configurable: !0,
                enumerable: !0,
                get: function () {
                  return (
                    this.__originalMappings ||
                      this._parseMappings(this._mappings, this.sourceRoot),
                    this.__originalMappings
                  );
                },
              }
            ),
            (SourceMapConsumer.prototype._charIsMappingSeparator = function (
              e,
              r
            ) {
              var n = e.charAt(r);
              return ";" === n || "," === n;
            }),
            (SourceMapConsumer.prototype._parseMappings = function (e, r) {
              throw new Error("Subclasses must implement _parseMappings");
            }),
            (SourceMapConsumer.GENERATED_ORDER = 1),
            (SourceMapConsumer.ORIGINAL_ORDER = 2),
            (SourceMapConsumer.GREATEST_LOWER_BOUND = 1),
            (SourceMapConsumer.LEAST_UPPER_BOUND = 2),
            (SourceMapConsumer.prototype.eachMapping = function (e, r, n) {
              var o,
                t = r || null;
              switch (n || SourceMapConsumer.GENERATED_ORDER) {
                case SourceMapConsumer.GENERATED_ORDER:
                  o = this._generatedMappings;
                  break;
                case SourceMapConsumer.ORIGINAL_ORDER:
                  o = this._originalMappings;
                  break;
                default:
                  throw new Error("Unknown order of iteration.");
              }
              var i = this.sourceRoot;
              o.map(function (e) {
                var r = null === e.source ? null : this._sources.at(e.source);
                return {
                  source: (r = util.computeSourceURL(i, r, this._sourceMapURL)),
                  generatedLine: e.generatedLine,
                  generatedColumn: e.generatedColumn,
                  originalLine: e.originalLine,
                  originalColumn: e.originalColumn,
                  name: null === e.name ? null : this._names.at(e.name),
                };
              }, this).forEach(e, t);
            }),
            (SourceMapConsumer.prototype.allGeneratedPositionsFor = function (
              e
            ) {
              var r = util.getArg(e, "line"),
                n = {
                  source: util.getArg(e, "source"),
                  originalLine: r,
                  originalColumn: util.getArg(e, "column", 0),
                };
              if (((n.source = this._findSourceIndex(n.source)), n.source < 0))
                return [];
              var o = [],
                t = this._findMapping(
                  n,
                  this._originalMappings,
                  "originalLine",
                  "originalColumn",
                  util.compareByOriginalPositions,
                  binarySearch.LEAST_UPPER_BOUND
                );
              if (t >= 0) {
                var i = this._originalMappings[t];
                if (void 0 === e.column)
                  for (var u = i.originalLine; i && i.originalLine === u; )
                    o.push({
                      line: util.getArg(i, "generatedLine", null),
                      column: util.getArg(i, "generatedColumn", null),
                      lastColumn: util.getArg(i, "lastGeneratedColumn", null),
                    }),
                      (i = this._originalMappings[++t]);
                else
                  for (
                    var s = i.originalColumn;
                    i && i.originalLine === r && i.originalColumn == s;

                  )
                    o.push({
                      line: util.getArg(i, "generatedLine", null),
                      column: util.getArg(i, "generatedColumn", null),
                      lastColumn: util.getArg(i, "lastGeneratedColumn", null),
                    }),
                      (i = this._originalMappings[++t]);
              }
              return o;
            }),
            (exports.SourceMapConsumer = SourceMapConsumer),
            (BasicSourceMapConsumer.prototype = Object.create(
              SourceMapConsumer.prototype
            )),
            (BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer),
            (BasicSourceMapConsumer.prototype._findSourceIndex = function (e) {
              var r,
                n = e;
              if (
                (null != this.sourceRoot &&
                  (n = util.relative(this.sourceRoot, n)),
                this._sources.has(n))
              )
                return this._sources.indexOf(n);
              for (r = 0; r < this._absoluteSources.length; ++r)
                if (this._absoluteSources[r] == e) return r;
              return -1;
            }),
            (BasicSourceMapConsumer.fromSourceMap = function (e, r) {
              var n = Object.create(BasicSourceMapConsumer.prototype),
                o = (n._names = ArraySet.fromArray(e._names.toArray(), !0)),
                t = (n._sources = ArraySet.fromArray(e._sources.toArray(), !0));
              (n.sourceRoot = e._sourceRoot),
                (n.sourcesContent = e._generateSourcesContent(
                  n._sources.toArray(),
                  n.sourceRoot
                )),
                (n.file = e._file),
                (n._sourceMapURL = r),
                (n._absoluteSources = n._sources.toArray().map(function (e) {
                  return util.computeSourceURL(n.sourceRoot, e, r);
                }));
              for (
                var i = e._mappings.toArray().slice(),
                  u = (n.__generatedMappings = []),
                  s = (n.__originalMappings = []),
                  a = 0,
                  l = i.length;
                a < l;
                a++
              ) {
                var c = i[a],
                  p = new Mapping();
                (p.generatedLine = c.generatedLine),
                  (p.generatedColumn = c.generatedColumn),
                  c.source &&
                    ((p.source = t.indexOf(c.source)),
                    (p.originalLine = c.originalLine),
                    (p.originalColumn = c.originalColumn),
                    c.name && (p.name = o.indexOf(c.name)),
                    s.push(p)),
                  u.push(p);
              }
              return (
                quickSort(
                  n.__originalMappings,
                  util.compareByOriginalPositions
                ),
                n
              );
            }),
            (BasicSourceMapConsumer.prototype._version = 3),
            Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
              get: function () {
                return this._absoluteSources.slice();
              },
            }),
            (BasicSourceMapConsumer.prototype._parseMappings = function (e, r) {
              for (
                var n,
                  o,
                  t,
                  i,
                  u,
                  s = 1,
                  a = 0,
                  l = 0,
                  c = 0,
                  p = 0,
                  g = 0,
                  m = e.length,
                  h = 0,
                  d = {},
                  f = {},
                  _ = [],
                  C = [];
                h < m;

              )
                if (";" === e.charAt(h)) s++, h++, (a = 0);
                else if ("," === e.charAt(h)) h++;
                else {
                  for (
                    (n = new Mapping()).generatedLine = s, i = h;
                    i < m && !this._charIsMappingSeparator(e, i);
                    i++
                  );
                  if ((t = d[(o = e.slice(h, i))])) h += o.length;
                  else {
                    for (t = []; h < i; )
                      base64VLQ.decode(e, h, f),
                        (u = f.value),
                        (h = f.rest),
                        t.push(u);
                    if (2 === t.length)
                      throw new Error("Found a source, but no line and column");
                    if (3 === t.length)
                      throw new Error("Found a source and line, but no column");
                    d[o] = t;
                  }
                  (n.generatedColumn = a + t[0]),
                    (a = n.generatedColumn),
                    t.length > 1 &&
                      ((n.source = p + t[1]),
                      (p += t[1]),
                      (n.originalLine = l + t[2]),
                      (l = n.originalLine),
                      (n.originalLine += 1),
                      (n.originalColumn = c + t[3]),
                      (c = n.originalColumn),
                      t.length > 4 && ((n.name = g + t[4]), (g += t[4]))),
                    C.push(n),
                    "number" == typeof n.originalLine && _.push(n);
                }
              quickSort(C, util.compareByGeneratedPositionsDeflated),
                (this.__generatedMappings = C),
                quickSort(_, util.compareByOriginalPositions),
                (this.__originalMappings = _);
            }),
            (BasicSourceMapConsumer.prototype._findMapping = function (
              e,
              r,
              n,
              o,
              t,
              i
            ) {
              if (e[n] <= 0)
                throw new TypeError(
                  "Line must be greater than or equal to 1, got " + e[n]
                );
              if (e[o] < 0)
                throw new TypeError(
                  "Column must be greater than or equal to 0, got " + e[o]
                );
              return binarySearch.search(e, r, t, i);
            }),
            (BasicSourceMapConsumer.prototype.computeColumnSpans = function () {
              for (var e = 0; e < this._generatedMappings.length; ++e) {
                var r = this._generatedMappings[e];
                if (e + 1 < this._generatedMappings.length) {
                  var n = this._generatedMappings[e + 1];
                  if (r.generatedLine === n.generatedLine) {
                    r.lastGeneratedColumn = n.generatedColumn - 1;
                    continue;
                  }
                }
                r.lastGeneratedColumn = 1 / 0;
              }
            }),
            (BasicSourceMapConsumer.prototype.originalPositionFor = function (
              e
            ) {
              var r = {
                  generatedLine: util.getArg(e, "line"),
                  generatedColumn: util.getArg(e, "column"),
                },
                n = this._findMapping(
                  r,
                  this._generatedMappings,
                  "generatedLine",
                  "generatedColumn",
                  util.compareByGeneratedPositionsDeflated,
                  util.getArg(e, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
                );
              if (n >= 0) {
                var o = this._generatedMappings[n];
                if (o.generatedLine === r.generatedLine) {
                  var t = util.getArg(o, "source", null);
                  null !== t &&
                    ((t = this._sources.at(t)),
                    (t = util.computeSourceURL(
                      this.sourceRoot,
                      t,
                      this._sourceMapURL
                    )));
                  var i = util.getArg(o, "name", null);
                  return (
                    null !== i && (i = this._names.at(i)),
                    {
                      source: t,
                      line: util.getArg(o, "originalLine", null),
                      column: util.getArg(o, "originalColumn", null),
                      name: i,
                    }
                  );
                }
              }
              return { source: null, line: null, column: null, name: null };
            }),
            (BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function () {
              return (
                !!this.sourcesContent &&
                this.sourcesContent.length >= this._sources.size() &&
                !this.sourcesContent.some(function (e) {
                  return null == e;
                })
              );
            }),
            (BasicSourceMapConsumer.prototype.sourceContentFor = function (
              e,
              r
            ) {
              if (!this.sourcesContent) return null;
              var n = this._findSourceIndex(e);
              if (n >= 0) return this.sourcesContent[n];
              var o,
                t = e;
              if (
                (null != this.sourceRoot &&
                  (t = util.relative(this.sourceRoot, t)),
                null != this.sourceRoot && (o = util.urlParse(this.sourceRoot)))
              ) {
                var i = t.replace(/^file:\/\//, "");
                if ("file" == o.scheme && this._sources.has(i))
                  return this.sourcesContent[this._sources.indexOf(i)];
                if ((!o.path || "/" == o.path) && this._sources.has("/" + t))
                  return this.sourcesContent[this._sources.indexOf("/" + t)];
              }
              if (r) return null;
              throw new Error('"' + t + '" is not in the SourceMap.');
            }),
            (BasicSourceMapConsumer.prototype.generatedPositionFor = function (
              e
            ) {
              var r = util.getArg(e, "source");
              if ((r = this._findSourceIndex(r)) < 0)
                return { line: null, column: null, lastColumn: null };
              var n = {
                  source: r,
                  originalLine: util.getArg(e, "line"),
                  originalColumn: util.getArg(e, "column"),
                },
                o = this._findMapping(
                  n,
                  this._originalMappings,
                  "originalLine",
                  "originalColumn",
                  util.compareByOriginalPositions,
                  util.getArg(e, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
                );
              if (o >= 0) {
                var t = this._originalMappings[o];
                if (t.source === n.source)
                  return {
                    line: util.getArg(t, "generatedLine", null),
                    column: util.getArg(t, "generatedColumn", null),
                    lastColumn: util.getArg(t, "lastGeneratedColumn", null),
                  };
              }
              return { line: null, column: null, lastColumn: null };
            }),
            (exports.BasicSourceMapConsumer = BasicSourceMapConsumer),
            (IndexedSourceMapConsumer.prototype = Object.create(
              SourceMapConsumer.prototype
            )),
            (IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer),
            (IndexedSourceMapConsumer.prototype._version = 3),
            Object.defineProperty(
              IndexedSourceMapConsumer.prototype,
              "sources",
              {
                get: function () {
                  for (var e = [], r = 0; r < this._sections.length; r++)
                    for (
                      var n = 0;
                      n < this._sections[r].consumer.sources.length;
                      n++
                    )
                      e.push(this._sections[r].consumer.sources[n]);
                  return e;
                },
              }
            ),
            (IndexedSourceMapConsumer.prototype.originalPositionFor = function (
              e
            ) {
              var r = {
                  generatedLine: util.getArg(e, "line"),
                  generatedColumn: util.getArg(e, "column"),
                },
                n = binarySearch.search(r, this._sections, function (e, r) {
                  var n = e.generatedLine - r.generatedOffset.generatedLine;
                  return (
                    n || e.generatedColumn - r.generatedOffset.generatedColumn
                  );
                }),
                o = this._sections[n];
              return o
                ? o.consumer.originalPositionFor({
                    line:
                      r.generatedLine - (o.generatedOffset.generatedLine - 1),
                    column:
                      r.generatedColumn -
                      (o.generatedOffset.generatedLine === r.generatedLine
                        ? o.generatedOffset.generatedColumn - 1
                        : 0),
                    bias: e.bias,
                  })
                : { source: null, line: null, column: null, name: null };
            }),
            (IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function () {
              return this._sections.every(function (e) {
                return e.consumer.hasContentsOfAllSources();
              });
            }),
            (IndexedSourceMapConsumer.prototype.sourceContentFor = function (
              e,
              r
            ) {
              for (var n = 0; n < this._sections.length; n++) {
                var o = this._sections[n].consumer.sourceContentFor(e, !0);
                if (o) return o;
              }
              if (r) return null;
              throw new Error('"' + e + '" is not in the SourceMap.');
            }),
            (IndexedSourceMapConsumer.prototype.generatedPositionFor = function (
              e
            ) {
              for (var r = 0; r < this._sections.length; r++) {
                var n = this._sections[r];
                if (
                  -1 !== n.consumer._findSourceIndex(util.getArg(e, "source"))
                ) {
                  var o = n.consumer.generatedPositionFor(e);
                  if (o)
                    return {
                      line: o.line + (n.generatedOffset.generatedLine - 1),
                      column:
                        o.column +
                        (n.generatedOffset.generatedLine === o.line
                          ? n.generatedOffset.generatedColumn - 1
                          : 0),
                    };
                }
              }
              return { line: null, column: null };
            }),
            (IndexedSourceMapConsumer.prototype._parseMappings = function (
              e,
              r
            ) {
              (this.__generatedMappings = []), (this.__originalMappings = []);
              for (var n = 0; n < this._sections.length; n++)
                for (
                  var o = this._sections[n],
                    t = o.consumer._generatedMappings,
                    i = 0;
                  i < t.length;
                  i++
                ) {
                  var u = t[i],
                    s = o.consumer._sources.at(u.source);
                  (s = util.computeSourceURL(
                    o.consumer.sourceRoot,
                    s,
                    this._sourceMapURL
                  )),
                    this._sources.add(s),
                    (s = this._sources.indexOf(s));
                  var a = null;
                  u.name &&
                    ((a = o.consumer._names.at(u.name)),
                    this._names.add(a),
                    (a = this._names.indexOf(a)));
                  var l = {
                    source: s,
                    generatedLine:
                      u.generatedLine + (o.generatedOffset.generatedLine - 1),
                    generatedColumn:
                      u.generatedColumn +
                      (o.generatedOffset.generatedLine === u.generatedLine
                        ? o.generatedOffset.generatedColumn - 1
                        : 0),
                    originalLine: u.originalLine,
                    originalColumn: u.originalColumn,
                    name: a,
                  };
                  this.__generatedMappings.push(l),
                    "number" == typeof l.originalLine &&
                      this.__originalMappings.push(l);
                }
              quickSort(
                this.__generatedMappings,
                util.compareByGeneratedPositionsDeflated
              ),
                quickSort(
                  this.__originalMappings,
                  util.compareByOriginalPositions
                );
            }),
            (exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer);
        },
        {
          "./array-set": 103,
          "./base64-vlq": 104,
          "./binary-search": 106,
          "./quick-sort": 108,
          "./util": 112,
        },
      ],
      110: [
        function (require, module, exports) {
          var base64VLQ = require("./base64-vlq"),
            util = require("./util"),
            ArraySet = require("./array-set").ArraySet,
            MappingList = require("./mapping-list").MappingList;
          function SourceMapGenerator(e) {
            e || (e = {}),
              (this._file = util.getArg(e, "file", null)),
              (this._sourceRoot = util.getArg(e, "sourceRoot", null)),
              (this._skipValidation = util.getArg(e, "skipValidation", !1)),
              (this._sources = new ArraySet()),
              (this._names = new ArraySet()),
              (this._mappings = new MappingList()),
              (this._sourcesContents = null);
          }
          (SourceMapGenerator.prototype._version = 3),
            (SourceMapGenerator.fromSourceMap = function (e) {
              var n = e.sourceRoot,
                r = new SourceMapGenerator({ file: e.file, sourceRoot: n });
              return (
                e.eachMapping(function (e) {
                  var t = {
                    generated: {
                      line: e.generatedLine,
                      column: e.generatedColumn,
                    },
                  };
                  null != e.source &&
                    ((t.source = e.source),
                    null != n && (t.source = util.relative(n, t.source)),
                    (t.original = {
                      line: e.originalLine,
                      column: e.originalColumn,
                    }),
                    null != e.name && (t.name = e.name)),
                    r.addMapping(t);
                }),
                e.sources.forEach(function (t) {
                  var o = t;
                  null !== n && (o = util.relative(n, t)),
                    r._sources.has(o) || r._sources.add(o);
                  var i = e.sourceContentFor(t);
                  null != i && r.setSourceContent(t, i);
                }),
                r
              );
            }),
            (SourceMapGenerator.prototype.addMapping = function (e) {
              var n = util.getArg(e, "generated"),
                r = util.getArg(e, "original", null),
                t = util.getArg(e, "source", null),
                o = util.getArg(e, "name", null);
              this._skipValidation || this._validateMapping(n, r, t, o),
                null != t &&
                  ((t = String(t)),
                  this._sources.has(t) || this._sources.add(t)),
                null != o &&
                  ((o = String(o)), this._names.has(o) || this._names.add(o)),
                this._mappings.add({
                  generatedLine: n.line,
                  generatedColumn: n.column,
                  originalLine: null != r && r.line,
                  originalColumn: null != r && r.column,
                  source: t,
                  name: o,
                });
            }),
            (SourceMapGenerator.prototype.setSourceContent = function (e, n) {
              var r = e;
              null != this._sourceRoot &&
                (r = util.relative(this._sourceRoot, r)),
                null != n
                  ? (this._sourcesContents ||
                      (this._sourcesContents = Object.create(null)),
                    (this._sourcesContents[util.toSetString(r)] = n))
                  : this._sourcesContents &&
                    (delete this._sourcesContents[util.toSetString(r)],
                    0 === Object.keys(this._sourcesContents).length &&
                      (this._sourcesContents = null));
            }),
            (SourceMapGenerator.prototype.applySourceMap = function (e, n, r) {
              var t = n;
              if (null == n) {
                if (null == e.file)
                  throw new Error(
                    'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.'
                  );
                t = e.file;
              }
              var o = this._sourceRoot;
              null != o && (t = util.relative(o, t));
              var i = new ArraySet(),
                s = new ArraySet();
              this._mappings.unsortedForEach(function (n) {
                if (n.source === t && null != n.originalLine) {
                  var l = e.originalPositionFor({
                    line: n.originalLine,
                    column: n.originalColumn,
                  });
                  null != l.source &&
                    ((n.source = l.source),
                    null != r && (n.source = util.join(r, n.source)),
                    null != o && (n.source = util.relative(o, n.source)),
                    (n.originalLine = l.line),
                    (n.originalColumn = l.column),
                    null != l.name && (n.name = l.name));
                }
                var u = n.source;
                null == u || i.has(u) || i.add(u);
                var a = n.name;
                null == a || s.has(a) || s.add(a);
              }, this),
                (this._sources = i),
                (this._names = s),
                e.sources.forEach(function (n) {
                  var t = e.sourceContentFor(n);
                  null != t &&
                    (null != r && (n = util.join(r, n)),
                    null != o && (n = util.relative(o, n)),
                    this.setSourceContent(n, t));
                }, this);
            }),
            (SourceMapGenerator.prototype._validateMapping = function (
              e,
              n,
              r,
              t
            ) {
              if (n && "number" != typeof n.line && "number" != typeof n.column)
                throw new Error(
                  "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
                );
              if (
                (!(
                  e &&
                  "line" in e &&
                  "column" in e &&
                  e.line > 0 &&
                  e.column >= 0
                ) ||
                  n ||
                  r ||
                  t) &&
                !(
                  e &&
                  "line" in e &&
                  "column" in e &&
                  n &&
                  "line" in n &&
                  "column" in n &&
                  e.line > 0 &&
                  e.column >= 0 &&
                  n.line > 0 &&
                  n.column >= 0 &&
                  r
                )
              )
                throw new Error(
                  "Invalid mapping: " +
                    JSON.stringify({
                      generated: e,
                      source: r,
                      original: n,
                      name: t,
                    })
                );
            }),
            (SourceMapGenerator.prototype._serializeMappings = function () {
              for (
                var e,
                  n,
                  r,
                  t,
                  o = 0,
                  i = 1,
                  s = 0,
                  l = 0,
                  u = 0,
                  a = 0,
                  c = "",
                  p = this._mappings.toArray(),
                  g = 0,
                  h = p.length;
                g < h;
                g++
              ) {
                if (((e = ""), (n = p[g]).generatedLine !== i))
                  for (o = 0; n.generatedLine !== i; ) (e += ";"), i++;
                else if (g > 0) {
                  if (!util.compareByGeneratedPositionsInflated(n, p[g - 1]))
                    continue;
                  e += ",";
                }
                (e += base64VLQ.encode(n.generatedColumn - o)),
                  (o = n.generatedColumn),
                  null != n.source &&
                    ((t = this._sources.indexOf(n.source)),
                    (e += base64VLQ.encode(t - a)),
                    (a = t),
                    (e += base64VLQ.encode(n.originalLine - 1 - l)),
                    (l = n.originalLine - 1),
                    (e += base64VLQ.encode(n.originalColumn - s)),
                    (s = n.originalColumn),
                    null != n.name &&
                      ((r = this._names.indexOf(n.name)),
                      (e += base64VLQ.encode(r - u)),
                      (u = r))),
                  (c += e);
              }
              return c;
            }),
            (SourceMapGenerator.prototype._generateSourcesContent = function (
              e,
              n
            ) {
              return e.map(function (e) {
                if (!this._sourcesContents) return null;
                null != n && (e = util.relative(n, e));
                var r = util.toSetString(e);
                return Object.prototype.hasOwnProperty.call(
                  this._sourcesContents,
                  r
                )
                  ? this._sourcesContents[r]
                  : null;
              }, this);
            }),
            (SourceMapGenerator.prototype.toJSON = function () {
              var e = {
                version: this._version,
                sources: this._sources.toArray(),
                names: this._names.toArray(),
                mappings: this._serializeMappings(),
              };
              return (
                null != this._file && (e.file = this._file),
                null != this._sourceRoot && (e.sourceRoot = this._sourceRoot),
                this._sourcesContents &&
                  (e.sourcesContent = this._generateSourcesContent(
                    e.sources,
                    e.sourceRoot
                  )),
                e
              );
            }),
            (SourceMapGenerator.prototype.toString = function () {
              return JSON.stringify(this.toJSON());
            }),
            (exports.SourceMapGenerator = SourceMapGenerator);
        },
        {
          "./array-set": 103,
          "./base64-vlq": 104,
          "./mapping-list": 107,
          "./util": 112,
        },
      ],
      111: [
        function (require, module, exports) {
          var SourceMapGenerator = require("./source-map-generator")
              .SourceMapGenerator,
            util = require("./util"),
            REGEX_NEWLINE = /(\r?\n)/,
            NEWLINE_CODE = 10,
            isSourceNode = "$$$isSourceNode$$$";
          function SourceNode(e, n, o, r, t) {
            (this.children = []),
              (this.sourceContents = {}),
              (this.line = null == e ? null : e),
              (this.column = null == n ? null : n),
              (this.source = null == o ? null : o),
              (this.name = null == t ? null : t),
              (this[isSourceNode] = !0),
              null != r && this.add(r);
          }
          (SourceNode.fromStringWithSourceMap = function (e, n, o) {
            var r = new SourceNode(),
              t = e.split(REGEX_NEWLINE),
              i = 0,
              u = function () {
                return e() + (e() || "");
                function e() {
                  return i < t.length ? t[i++] : void 0;
                }
              },
              l = 1,
              c = 0,
              s = null;
            return (
              n.eachMapping(function (e) {
                if (null !== s) {
                  if (!(l < e.generatedLine)) {
                    var n = (o = t[i] || "").substr(0, e.generatedColumn - c);
                    return (
                      (t[i] = o.substr(e.generatedColumn - c)),
                      (c = e.generatedColumn),
                      a(s, n),
                      void (s = e)
                    );
                  }
                  a(s, u()), l++, (c = 0);
                }
                for (; l < e.generatedLine; ) r.add(u()), l++;
                if (c < e.generatedColumn) {
                  var o = t[i] || "";
                  r.add(o.substr(0, e.generatedColumn)),
                    (t[i] = o.substr(e.generatedColumn)),
                    (c = e.generatedColumn);
                }
                s = e;
              }, this),
              i < t.length && (s && a(s, u()), r.add(t.splice(i).join(""))),
              n.sources.forEach(function (e) {
                var t = n.sourceContentFor(e);
                null != t &&
                  (null != o && (e = util.join(o, e)),
                  r.setSourceContent(e, t));
              }),
              r
            );
            function a(e, n) {
              if (null === e || void 0 === e.source) r.add(n);
              else {
                var t = o ? util.join(o, e.source) : e.source;
                r.add(
                  new SourceNode(e.originalLine, e.originalColumn, t, n, e.name)
                );
              }
            }
          }),
            (SourceNode.prototype.add = function (e) {
              if (Array.isArray(e))
                e.forEach(function (e) {
                  this.add(e);
                }, this);
              else {
                if (!e[isSourceNode] && "string" != typeof e)
                  throw new TypeError(
                    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                      e
                  );
                e && this.children.push(e);
              }
              return this;
            }),
            (SourceNode.prototype.prepend = function (e) {
              if (Array.isArray(e))
                for (var n = e.length - 1; n >= 0; n--) this.prepend(e[n]);
              else {
                if (!e[isSourceNode] && "string" != typeof e)
                  throw new TypeError(
                    "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " +
                      e
                  );
                this.children.unshift(e);
              }
              return this;
            }),
            (SourceNode.prototype.walk = function (e) {
              for (var n, o = 0, r = this.children.length; o < r; o++)
                (n = this.children[o])[isSourceNode]
                  ? n.walk(e)
                  : "" !== n &&
                    e(n, {
                      source: this.source,
                      line: this.line,
                      column: this.column,
                      name: this.name,
                    });
            }),
            (SourceNode.prototype.join = function (e) {
              var n,
                o,
                r = this.children.length;
              if (r > 0) {
                for (n = [], o = 0; o < r - 1; o++)
                  n.push(this.children[o]), n.push(e);
                n.push(this.children[o]), (this.children = n);
              }
              return this;
            }),
            (SourceNode.prototype.replaceRight = function (e, n) {
              var o = this.children[this.children.length - 1];
              return (
                o[isSourceNode]
                  ? o.replaceRight(e, n)
                  : "string" == typeof o
                  ? (this.children[this.children.length - 1] = o.replace(e, n))
                  : this.children.push("".replace(e, n)),
                this
              );
            }),
            (SourceNode.prototype.setSourceContent = function (e, n) {
              this.sourceContents[util.toSetString(e)] = n;
            }),
            (SourceNode.prototype.walkSourceContents = function (e) {
              for (var n = 0, o = this.children.length; n < o; n++)
                this.children[n][isSourceNode] &&
                  this.children[n].walkSourceContents(e);
              var r = Object.keys(this.sourceContents);
              for (n = 0, o = r.length; n < o; n++)
                e(util.fromSetString(r[n]), this.sourceContents[r[n]]);
            }),
            (SourceNode.prototype.toString = function () {
              var e = "";
              return (
                this.walk(function (n) {
                  e += n;
                }),
                e
              );
            }),
            (SourceNode.prototype.toStringWithSourceMap = function (e) {
              var n = { code: "", line: 1, column: 0 },
                o = new SourceMapGenerator(e),
                r = !1,
                t = null,
                i = null,
                u = null,
                l = null;
              return (
                this.walk(function (e, c) {
                  (n.code += e),
                    null !== c.source && null !== c.line && null !== c.column
                      ? ((t === c.source &&
                          i === c.line &&
                          u === c.column &&
                          l === c.name) ||
                          o.addMapping({
                            source: c.source,
                            original: { line: c.line, column: c.column },
                            generated: { line: n.line, column: n.column },
                            name: c.name,
                          }),
                        (t = c.source),
                        (i = c.line),
                        (u = c.column),
                        (l = c.name),
                        (r = !0))
                      : r &&
                        (o.addMapping({
                          generated: { line: n.line, column: n.column },
                        }),
                        (t = null),
                        (r = !1));
                  for (var s = 0, a = e.length; s < a; s++)
                    e.charCodeAt(s) === NEWLINE_CODE
                      ? (n.line++,
                        (n.column = 0),
                        s + 1 === a
                          ? ((t = null), (r = !1))
                          : r &&
                            o.addMapping({
                              source: c.source,
                              original: { line: c.line, column: c.column },
                              generated: { line: n.line, column: n.column },
                              name: c.name,
                            }))
                      : n.column++;
                }),
                this.walkSourceContents(function (e, n) {
                  o.setSourceContent(e, n);
                }),
                { code: n.code, map: o }
              );
            }),
            (exports.SourceNode = SourceNode);
        },
        { "./source-map-generator": 110, "./util": 112 },
      ],
      112: [
        function (require, module, exports) {
          function getArg(e, r, t) {
            if (r in e) return e[r];
            if (3 === arguments.length) return t;
            throw new Error('"' + r + '" is a required argument.');
          }
          exports.getArg = getArg;
          var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,
            dataUrlRegexp = /^data:.+\,.+$/;
          function urlParse(e) {
            var r = e.match(urlRegexp);
            return r
              ? { scheme: r[1], auth: r[2], host: r[3], port: r[4], path: r[5] }
              : null;
          }
          function urlGenerate(e) {
            var r = "";
            return (
              e.scheme && (r += e.scheme + ":"),
              (r += "//"),
              e.auth && (r += e.auth + "@"),
              e.host && (r += e.host),
              e.port && (r += ":" + e.port),
              e.path && (r += e.path),
              r
            );
          }
          function normalize(e) {
            var r = e,
              t = urlParse(e);
            if (t) {
              if (!t.path) return e;
              r = t.path;
            }
            for (
              var n,
                o = exports.isAbsolute(r),
                a = r.split(/\/+/),
                i = 0,
                u = a.length - 1;
              u >= 0;
              u--
            )
              "." === (n = a[u])
                ? a.splice(u, 1)
                : ".." === n
                ? i++
                : i > 0 &&
                  ("" === n
                    ? (a.splice(u + 1, i), (i = 0))
                    : (a.splice(u, 2), i--));
            return (
              "" === (r = a.join("/")) && (r = o ? "/" : "."),
              t ? ((t.path = r), urlGenerate(t)) : r
            );
          }
          function join(e, r) {
            "" === e && (e = "."), "" === r && (r = ".");
            var t = urlParse(r),
              n = urlParse(e);
            if ((n && (e = n.path || "/"), t && !t.scheme))
              return n && (t.scheme = n.scheme), urlGenerate(t);
            if (t || r.match(dataUrlRegexp)) return r;
            if (n && !n.host && !n.path) return (n.host = r), urlGenerate(n);
            var o =
              "/" === r.charAt(0)
                ? r
                : normalize(e.replace(/\/+$/, "") + "/" + r);
            return n ? ((n.path = o), urlGenerate(n)) : o;
          }
          function relative(e, r) {
            "" === e && (e = "."), (e = e.replace(/\/$/, ""));
            for (var t = 0; 0 !== r.indexOf(e + "/"); ) {
              var n = e.lastIndexOf("/");
              if (n < 0) return r;
              if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return r;
              ++t;
            }
            return Array(t + 1).join("../") + r.substr(e.length + 1);
          }
          (exports.urlParse = urlParse),
            (exports.urlGenerate = urlGenerate),
            (exports.normalize = normalize),
            (exports.join = join),
            (exports.isAbsolute = function (e) {
              return "/" === e.charAt(0) || urlRegexp.test(e);
            }),
            (exports.relative = relative);
          var supportsNullProto = !("__proto__" in Object.create(null));
          function identity(e) {
            return e;
          }
          function toSetString(e) {
            return isProtoString(e) ? "$" + e : e;
          }
          function fromSetString(e) {
            return isProtoString(e) ? e.slice(1) : e;
          }
          function isProtoString(e) {
            if (!e) return !1;
            var r = e.length;
            if (r < 9) return !1;
            if (
              95 !== e.charCodeAt(r - 1) ||
              95 !== e.charCodeAt(r - 2) ||
              111 !== e.charCodeAt(r - 3) ||
              116 !== e.charCodeAt(r - 4) ||
              111 !== e.charCodeAt(r - 5) ||
              114 !== e.charCodeAt(r - 6) ||
              112 !== e.charCodeAt(r - 7) ||
              95 !== e.charCodeAt(r - 8) ||
              95 !== e.charCodeAt(r - 9)
            )
              return !1;
            for (var t = r - 10; t >= 0; t--)
              if (36 !== e.charCodeAt(t)) return !1;
            return !0;
          }
          function compareByOriginalPositions(e, r, t) {
            var n = strcmp(e.source, r.source);
            return 0 !== n
              ? n
              : 0 !== (n = e.originalLine - r.originalLine)
              ? n
              : 0 !== (n = e.originalColumn - r.originalColumn) || t
              ? n
              : 0 !== (n = e.generatedColumn - r.generatedColumn)
              ? n
              : 0 !== (n = e.generatedLine - r.generatedLine)
              ? n
              : strcmp(e.name, r.name);
          }
          function compareByGeneratedPositionsDeflated(e, r, t) {
            var n = e.generatedLine - r.generatedLine;
            return 0 !== n
              ? n
              : 0 !== (n = e.generatedColumn - r.generatedColumn) || t
              ? n
              : 0 !== (n = strcmp(e.source, r.source))
              ? n
              : 0 !== (n = e.originalLine - r.originalLine)
              ? n
              : 0 !== (n = e.originalColumn - r.originalColumn)
              ? n
              : strcmp(e.name, r.name);
          }
          function strcmp(e, r) {
            return e === r
              ? 0
              : null === e
              ? 1
              : null === r
              ? -1
              : e > r
              ? 1
              : -1;
          }
          function compareByGeneratedPositionsInflated(e, r) {
            var t = e.generatedLine - r.generatedLine;
            return 0 !== t
              ? t
              : 0 !== (t = e.generatedColumn - r.generatedColumn)
              ? t
              : 0 !== (t = strcmp(e.source, r.source))
              ? t
              : 0 !== (t = e.originalLine - r.originalLine)
              ? t
              : 0 !== (t = e.originalColumn - r.originalColumn)
              ? t
              : strcmp(e.name, r.name);
          }
          function parseSourceMapInput(e) {
            return JSON.parse(e.replace(/^\)]}'[^\n]*\n/, ""));
          }
          function computeSourceURL(e, r, t) {
            if (
              ((r = r || ""),
              e &&
                ("/" !== e[e.length - 1] && "/" !== r[0] && (e += "/"),
                (r = e + r)),
              t)
            ) {
              var n = urlParse(t);
              if (!n) throw new Error("sourceMapURL could not be parsed");
              if (n.path) {
                var o = n.path.lastIndexOf("/");
                o >= 0 && (n.path = n.path.substring(0, o + 1));
              }
              r = join(urlGenerate(n), r);
            }
            return normalize(r);
          }
          (exports.toSetString = supportsNullProto ? identity : toSetString),
            (exports.fromSetString = supportsNullProto
              ? identity
              : fromSetString),
            (exports.compareByOriginalPositions = compareByOriginalPositions),
            (exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated),
            (exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated),
            (exports.parseSourceMapInput = parseSourceMapInput),
            (exports.computeSourceURL = computeSourceURL);
        },
        {},
      ],
      113: [
        function (require, module, exports) {
          (exports.SourceMapGenerator = require("./lib/source-map-generator").SourceMapGenerator),
            (exports.SourceMapConsumer = require("./lib/source-map-consumer").SourceMapConsumer),
            (exports.SourceNode = require("./lib/source-node").SourceNode);
        },
        {
          "./lib/source-map-consumer": 109,
          "./lib/source-map-generator": 110,
          "./lib/source-node": 111,
        },
      ],
      114: [
        function (require, module, exports) {
          const is = require("ramda/src/is"),
            reduce = require("ramda/src/reduce"),
            compileBank = (e) =>
              e.bank
                ? "∞" === e.bank
                  ? 99999
                  : e.bank
                : reduce(
                    (e, i) => ({ ...e, [i.number]: i.bank }),
                    {},
                    e.players || []
                  ),
            compileCertLimit = (e) =>
              e.certLimit
                ? e.certLimit
                : reduce(
                    (e, i) => ({ ...e, [i.number]: i.certLimit }),
                    {},
                    e.players || []
                  ),
            compileStartingCash = (e) =>
              e.capital
                ? e.capital
                : reduce(
                    (e, i) => ({ ...e, [i.number]: i.capital }),
                    {},
                    e.players || []
                  );
          (exports.compileBank = compileBank),
            (exports.compileCertLimit = compileCertLimit),
            (exports.compileStartingCash = compileStartingCash);
        },
        { "ramda/src/is": 94, "ramda/src/reduce": 99 },
      ],
      115: [
        function (require, module, exports) {
          const handlebars = require("handlebars"),
            gameTemplate = require("../templates/game.hbs"),
            makerTiles = require("@18xx-maker/games").tiles,
            any = require("ramda/src/any"),
            assoc = require("ramda/src/assoc"),
            concat = require("ramda/src/concat"),
            contains = require("ramda/src/contains"),
            curry = require("ramda/src/curry"),
            find = require("ramda/src/find"),
            keys = require("ramda/src/keys"),
            map = require("ramda/src/map"),
            mapObjIndexed = require("ramda/src/mapObjIndexed"),
            reduce = require("ramda/src/reduce"),
            indexOf = require("ramda/src/indexOf"),
            is = require("ramda/src/is"),
            chain = require("ramda/src/chain"),
            resolveHex = curry((e, a) => {
              if (a.copy) {
                let r = find((e) => indexOf(a.copy, e.hexes) > -1, e);
                if (r) {
                  let i = mergeHex(a, resolveHex(e, r));
                  return delete i.copy, i;
                }
              }
              return a;
            }),
            getMapHexes = (e, a) => {
              a = a || 0;
              let r = Array.isArray(e.map) ? e.map[a] : e.map;
              if (!r) return [];
              let i = map(assoc("variation", a), r.hexes || []);
              return (
                void 0 !== r.copy &&
                  (i = concat(
                    map(assoc("variation", r.copy), e.map[r.copy].hexes),
                    i
                  )),
                void 0 !== r.remove &&
                  (i = map(
                    (e) =>
                      assoc(
                        "hexes",
                        reject((e) => (r.remove || []).includes(e), e.hexes),
                        e
                      ),
                    i
                  )),
                (i = map(resolveHex(i), i))
              );
            },
            {
              compileBank: compileBank,
              compileCertLimit: compileCertLimit,
              compileStartingCash: compileStartingCash,
            } = require("./data"),
            {
              compileHex: compileHex,
              compileColor: compileColor,
            } = require("./hex"),
            { compileMarket: compileMarket } = require("./market"),
            findName = (e) => {
              let a = [
                { name: e.name },
                ...(e.cities || []),
                ...(e.centerTowns || []),
                ...(e.towns || []),
                ...(e.offBoardRevenue && !e.offBoardRevenue.hidden
                  ? [e.offBoardRevenue]
                  : []),
                ...map((e) => ({ name: e }), e.names || []),
              ];
              return chain((e) => (e.name ? [e.name.name] : []), a).join(" & ");
            },
            compileLocationNames = (e, a) =>
              reduce(
                (e, a) => {
                  let r = findName(a);
                  return r ? { ...e, [a.hexes[0]]: r } : e;
                },
                {},
                getMapHexes(e, a.map)
              ),
            compileTiles = (e, a) =>
              reduce(
                (r, i) => {
                  if (makerTiles[i] && makerTiles[i].broken) return r;
                  let o = e.tiles[i],
                    n = o;
                  return (
                    is(Object, o) &&
                      (n = o.color
                        ? {
                            count: o.quantity
                              ? "∞" === o.quantity
                                ? 20
                                : o.quantity
                              : 1,
                            color: o.color,
                            code: compileHex(o, a),
                          }
                        : o.quantity
                        ? "∞" === o.quantity
                          ? 20
                          : o.quantity
                        : 1),
                    { ...r, [i]: n }
                  );
                },
                {},
                keys(e.tiles || {})
              ),
            compileCurrency = (e) =>
              e.info.currency ? e.info.currency.replace(/\#/, "%d") : "$%d",
            compileLayout = (e) =>
              "horizontal" === e.info.orientation
                ? "flat"
                : (e.info.orientation, "pointy"),
            compileCapitalization = (e) =>
              e.info.capitalization ? e.info.capitalization : "full",
            compileMustSellInBlocks = (e) =>
              !!e.info.mustSellInBlocks && e.info.mustSellInBlocks,
            compilePrivates = (e) =>
              map(
                (e) => ({
                  name: e.name,
                  value: e.price,
                  debt: e.debt,
                  revenue: is(Array, e.revenue) ? e.revenue[0] : e.revenue || 0,
                  desc: e.description || "No special abilities.",
                  min_players: e.minPlayers,
                  sym: e.sym,
                  abilities: e.abilities,
                }),
                e.privates || []
              ),
            findHome = (e, a) => {
              let r = find((a) => {
                let r = a.cities;
                return (
                  !!r && any((a) => a.companies && a.companies.includes(e), r)
                );
              }, a);
              return r && r.hexes[0];
            },
            colors = {
              black: "#37383a",
              blue: "#0189d1",
              brightGreen: "#76a042",
              brown: "#7b352a",
              gold: "#e09001",
              gray: "#9a9a9d",
              green: "#237333",
              lavender: "#baa4cb",
              lightBlue: "#37b2e2",
              lightBrown: "#b58168",
              lime: "#bdbd00",
              natural: "#fbf4de",
              navy: "#004d95",
              orange: "#f48221",
              pink: "rgb(193,60,125)",
              red: "#d81e3e",
              turquoise: "#00a99e",
              violet: "#7f528b",
              white: "#ffffff",
              yellow: "#f8c200",
            },
            LOGO_RE = /[& ]/g,
            compileCompanies = (e, a, r) => {
              let i = map(
                (a) => (
                  a.minor && !a.tokens && e.tokenTypes && e.tokenTypes.minor
                    ? ((a.tokenType = "minor"), (a.tokens = e.tokenTypes.minor))
                    : !a.tokens && e.tokenTypes && e.tokenTypes.default
                    ? ((a.tokenType = "default"),
                      (a.tokens = e.tokenTypes.default))
                    : is(String, a.tokens) &&
                      ((a.tokenType = a.tokens),
                      (a.tokens = e.tokenTypes[a.tokens])),
                  a.minor && !a.shares && e.shareTypes && e.shareTypes.minor
                    ? ((a.shareType = "minor"), (a.shares = e.shareTypes.minor))
                    : !a.shares && e.shareTypes && e.shareTypes.default
                    ? ((a.shareType = "default"),
                      (a.shares = e.shareTypes.default))
                    : is(String, a.shares) &&
                      ((a.shareType = a.shares),
                      (a.shares = e.shareTypes[a.shares])),
                  a
                ),
                e.companies || []
              );
              return map(
                (i) => ({
                  float_percent: i.floatPercent || e.floatPercent,
                  sym: i.abbrev,
                  name: i.name,
                  logo: `${a}/${i.abbrev.replace(LOGO_RE, "")}`,
                  tokens: map((e) => (is(Number, e) ? e : 0), i.tokens || []),
                  coordinates: findHome(i.abbrev, getMapHexes(e, r.map)),
                  color: i.color,
                  text_color: i.textColor,
                }),
                i
              );
            },
            compileTrains = (e) =>
              map(
                (e) => ({
                  name: e.name,
                  distance:
                    e.distance ||
                    (isNaN(parseInt(e.name)) ? 999 : parseInt(e.name)),
                  price: e.price || 0,
                  rusts_on: e.rust,
                  num: "∞" === e.quantity ? 20 : e.quantity,
                  available_on: e.available,
                  discount: e.discount,
                }),
                e.trains
              ),
            compileModuleName = (e) => e.replace(/\ /, ""),
            compileFileName = (e) => {
              const a = e.match(/^([0-9]*)(.*)$/),
                r = a[1],
                i = a[2].toLowerCase();
              let o = r;
              return "" !== i && (o += `_${i}`), o;
            },
            tileColors = ["yellow", "green", "brown", "gray"],
            compilePhases = (e) =>
              map(
                (e) => ({
                  name: e.name || e.train,
                  on: e.on,
                  train_limit: e.limit,
                  tiles: tileColors.slice(0, tileColors.indexOf(e.tiles) + 1),
                  operating_rounds: e.rounds,
                  buy_companies: e.buy_companies,
                  events: e.events,
                }),
                e.phases || []
              ),
            compileHexes = (e, a, r) => {
              let i = {};
              return (
                getMapHexes(e, r.map).forEach((e) => {
                  let r = compileColor(e),
                    o = compileHex(e, a),
                    n = e.hexes;
                  i[r] || (i[r] = {}),
                    i[r][o] || (i[r][o] = []),
                    (i[r][o] = concat(i[r][o], n));
                }),
                i
              );
            },
            compileGame = (e, a) => {
              const r = compileFileName(e.info.title),
                i = compileModuleName(e.info.title),
                o = compileLayout(e),
                n = "flat" === o;
              return {
                filename: r,
                modulename: i,
                currencyFormatStr: compileCurrency(e),
                bankCash: compileBank(e),
                certLimit: compileCertLimit(e),
                startingCash: compileStartingCash(e),
                capitalization: compileCapitalization(e),
                layout: o,
                mustSellInBlocks: compileMustSellInBlocks(e),
                locationNames: compileLocationNames(e, a),
                tiles: compileTiles(e, n),
                market: compileMarket(e),
                companies: compilePrivates(e),
                corporations: compileCompanies(e, r, a),
                trains: compileTrains(e),
                hexes: compileHexes(e, n, a),
                phases: compilePhases(e),
              };
            },
            renderGame = (e, a) => (
              (e = compileGame(e, a)),
              gameTemplate({
                name: e.modulename,
                data: JSON.stringify(e, null, 2),
              })
            );
          (exports.compileGame = compileGame),
            (exports.renderGame = renderGame);
        },
        {
          "../templates/game.hbs": 119,
          "./data": 114,
          "./hex": 116,
          "./market": 117,
          "@18xx-maker/games": 121,
          handlebars: 35,
          "ramda/src/any": 38,
          "ramda/src/assoc": 39,
          "ramda/src/chain": 41,
          "ramda/src/concat": 42,
          "ramda/src/contains": 43,
          "ramda/src/curry": 44,
          "ramda/src/find": 48,
          "ramda/src/indexOf": 52,
          "ramda/src/is": 94,
          "ramda/src/keys": 96,
          "ramda/src/map": 97,
          "ramda/src/mapObjIndexed": 98,
          "ramda/src/reduce": 99,
        },
      ],
      116: [
        function (require, module, exports) {
          const is = require("ramda/src/is"),
            addIndex = require("ramda/src/addIndex"),
            concat = require("ramda/src/concat"),
            map = require("ramda/src/map"),
            chain = require("ramda/src/chain"),
            find = require("ramda/src/find"),
            any = require("ramda/src/any"),
            has = require("ramda/src/has"),
            terrainMapping = { river: "water", stream: "water" },
            getValues = (e) => (e.values ? map((e) => e.value, e.values) : []),
            compileValue = (e) => {
              if (!e.values) return [];
            },
            compileTowns = (e) => {
              if (!e.centerTowns && !e.towns) return [];
              let r = getValues(e);
              return addIndex(map)((a, o) => {
                let i,
                  n = `town=revenue:${(i = e.offBoardRevenue
                    ? compileMultiRevenue(e.offBoardRevenue)
                    : r[o] || r[0] || 0)}`;
                return (n += compileGroups(a.groups));
              }, concat(e.centerTowns || [], e.towns || []));
            },
            compileGroups = (e) => (e ? `,groups:${e.join("|")}` : ""),
            compileMultiRevenue = (e) => {
              let r = map(
                (e) =>
                  `${e.value || e.revenue || e.cost || 0}`.match(/^D/)
                    ? `diesel_${e.cost.replace(/^D/, "")}`
                    : `${e.color}_${e.value || e.revenue || e.cost || 0}`,
                e.revenues
              ).join("|");
              return e.hidden && (r += ",hide:1"), r;
            },
            compileCities = (e) => {
              if (!e.cities) return [];
              let r = getValues(e);
              return addIndex(map)((a, o) => {
                let i,
                  n = `city=revenue:${(i = e.offBoardRevenue
                    ? compileMultiRevenue(e.offBoardRevenue)
                    : r[o] || r[0] || 0)}`;
                return (
                  a.size > 1 && (n += `,slots:${a.size}`),
                  (n += compileGroups(a.groups))
                );
              }, e.cities);
            },
            compileTerrain = (e) => {
              if (!e.terrain) return [];
              let r = chain(
                  (e) => (e.type ? [terrainMapping[e.type] || e.type] : []),
                  e.terrain
                ),
                a = [],
                o = find((e) => e.cost, e.terrain);
              return (
                o && a.push(`upgrade=cost:${o.cost}`),
                r.length > 0 && a.push(`terrain:${r.join("|")}`),
                [a.join(",")]
              );
            },
            compileOffboard = (e) => {
              if (!e.offBoardRevenue || e.cities || e.towns || e.centerTowns)
                return [];
              return [
                `offboard=revenue:${compileMultiRevenue(
                  e.offBoardRevenue
                )}${compileGroups(e.offBoardRevenue.groups)}`,
              ];
            },
            compileLabels = (e) =>
              e.labels ? map((e) => `label=${e.label}`, e.labels) : [],
            abrev = (e, r, a) => (
              (e = (e - 1) % 6),
              (r = (r - 1) % 6),
              [`a:${Math.min(e, r)},b:_${a}`, `a:_${a},b:${Math.max(e, r)}`]
            ),
            arev = (e, r) => [`a:${(e = (e - 1) % 6)},b:_${r}`],
            ab = (e, r) => (
              (e = (e - 1) % 6),
              (r = (r - 1) % 6),
              [`a:${Math.min(e, r)},b:${Math.max(e, r)}`]
            ),
            aj = (e) => [`a:${(e = (e - 1) % 6)},b:_0`],
            compileTrackGauge = (e) => (e ? `,track:${e}` : ""),
            compileTrackSides = (e, r, a) => {
              const o = !isNaN(r),
                i = (e.side || 1) + (a ? 0 : 1);
              switch (e.type) {
                case "sharp":
                  return o ? abrev(i, i + 1, r) : ab(i, i + 1);
                case "gentle":
                  return o ? abrev(i, i + 2, r) : ab(i, i + 2);
                case "straight":
                  return o ? abrev(i, i + 3, r) : ab(i, i + 3);
                default:
                  return o ? arev(i, r) : aj(i);
              }
            },
            compileTrack = (e, r) => {
              if (!e.track) return [];
              let a = (e.values || []).length + (e.offBoardRevenue ? 1 : 0);
              return addIndex(chain)((e, o) => {
                let i = compileTrackSides(e, o % a, r);
                return map((r) => `path=${r}${compileTrackGauge(e.gauge)}`, i);
              }, e.track);
            },
            compileColor = (e) => {
              switch (e.color) {
                case "water":
                  return "blue";
                case "offboard":
                  return "red";
                case "plain":
                  return "white";
                default:
                  return e.color;
              }
            },
            compileRemoveBorders = (e, r) => {
              if (!e.removeBorders) return [];
              return [`border=edge:${(e.removeBorders[0] - (r ? 1 : 0)) % 6}`];
            },
            compileJunction = (e) =>
              e.track
                ? e.cities || e.towns || e.centerTowns || e.offBoardRevenue
                  ? []
                  : any(has("type"), e.track)
                  ? []
                  : ["junction"]
                : [],
            compileHex = (e, r) => {
              if (e.encoding) return e.encoding;
              return [
                ...compileJunction(e),
                ...compileOffboard(e),
                ...compileCities(e),
                ...compileTowns(e),
                ...compileTrack(e, r),
                ...compileLabels(e),
                ...compileTerrain(e),
                ...compileRemoveBorders(e, r),
              ].join(";");
            };
          (exports.compileColor = compileColor),
            (exports.compileHex = compileHex);
        },
        {
          "ramda/src/addIndex": 37,
          "ramda/src/any": 38,
          "ramda/src/chain": 41,
          "ramda/src/concat": 42,
          "ramda/src/find": 48,
          "ramda/src/has": 50,
          "ramda/src/is": 94,
          "ramda/src/map": 97,
        },
      ],
      117: [
        function (require, module, exports) {
          const any = require("ramda/src/any"),
            is = require("ramda/src/is"),
            isNil = require("ramda/src/isNil"),
            map = require("ramda/src/map"),
            compileCell = (e) =>
              e
                ? `${
                    void 0 !== e.value
                      ? e.value
                      : void 0 !== e.label
                      ? e.label
                      : e
                  }${e.par ? "p" : ""}${
                    void 0 !== e.legend ? ["y", "o", "b"][e.legend] : ""
                  }`
                : "",
            compileRow = (e) => map(compileCell, e),
            compileMarket = (e) => {
              let r = e.stock.market;
              return is(Array, r[0]) ? map(compileRow, r) : [compileRow(r)];
            };
          exports.compileMarket = compileMarket;
        },
        {
          "ramda/src/any": 38,
          "ramda/src/is": 94,
          "ramda/src/isNil": 95,
          "ramda/src/map": 97,
        },
      ],
      118: [
        function (require, module, exports) {
          const handlebars = require("handlebars"),
            tilesTemplate = require("../templates/tiles.hbs"),
            forEachObjIndexed = require("ramda/src/forEachObjIndexed"),
            keys = require("ramda/src/keys"),
            map = require("ramda/src/map"),
            hex = require("./hex"),
            toSymbol = (e) => e.replace(/\//, "").toLowerCase(),
            toModule = (e) =>
              hex.compileColor({ color: e }).replace(/\//, "").toUpperCase(),
            compileTiles = (e) => {
              let r = {};
              return (
                forEachObjIndexed((e, l) => {
                  let o = hex.compileColor(e);
                  r[o] || (r[o] = {}),
                    (r[o][l] = {
                      id: l,
                      encoding: hex.compileHex(e, !0),
                      broken: e.broken,
                    });
                }, e),
                {
                  colors: map(
                    (e) => ({
                      name: toModule(e),
                      tiles: map((l) => r[e][l], keys(r[e])),
                    }),
                    keys(r)
                  ),
                  symbols: map(toSymbol, keys(r)).join(" "),
                }
              );
            },
            renderTiles = (e) => {
              let r = compileTiles(e);
              return tilesTemplate(r);
            };
          (exports.compileTiles = compileTiles),
            (exports.renderTiles = renderTiles);
        },
        {
          "../templates/tiles.hbs": 120,
          "./hex": 116,
          handlebars: 35,
          "ramda/src/forEachObjIndexed": 49,
          "ramda/src/keys": 96,
          "ramda/src/map": 97,
        },
      ],
      119: [
        function (require, module, exports) {
          var HandlebarsCompiler = require("hbsfy/runtime");
          module.exports = HandlebarsCompiler.template({
            compiler: [8, ">= 4.3.0"],
            main: function (n, e, t, l, o) {
              var a,
                r,
                i = null != e ? e : n.nullContext || {},
                u = n.hooks.helperMissing,
                d =
                  n.lookupProperty ||
                  function (n, e) {
                    if (Object.prototype.hasOwnProperty.call(n, e)) return n[e];
                  };
              return (
                "# frozen_string_literal: true\n\n# File original exported from 18xx-maker/export-rb\n# https://github.com/18xx-maker/export-rb\n# rubocop:disable Lint/RedundantCopDisableDirective, Layout/LineLength, Layout/HeredocIndentation\n\nmodule Engine\n  module Config\n    module Game\n      module G" +
                (null !=
                (a =
                  "function" ==
                  typeof (r =
                    null != (r = d(t, "name") || (null != e ? d(e, "name") : e))
                      ? r
                      : u)
                    ? r.call(i, {
                        name: "name",
                        hash: {},
                        data: o,
                        loc: {
                          start: { line: 10, column: 14 },
                          end: { line: 10, column: 24 },
                        },
                      })
                    : r)
                  ? a
                  : "") +
                "\n        JSON = <<-'DATA'\n" +
                (null !=
                (a =
                  "function" ==
                  typeof (r =
                    null != (r = d(t, "data") || (null != e ? d(e, "data") : e))
                      ? r
                      : u)
                    ? r.call(i, {
                        name: "data",
                        hash: {},
                        data: o,
                        loc: {
                          start: { line: 12, column: 0 },
                          end: { line: 12, column: 10 },
                        },
                      })
                    : r)
                  ? a
                  : "") +
                "\n        DATA\n      end\n    end\n  end\nend\n\n# rubocop:enable Lint/RedundantCopDisableDirective, Layout/LineLength, Layout/HeredocIndentation\n"
              );
            },
            useData: !0,
          });
        },
        { "hbsfy/runtime": 36 },
      ],
      120: [
        function (require, module, exports) {
          var HandlebarsCompiler = require("hbsfy/runtime");
          module.exports = HandlebarsCompiler.template({
            1: function (n, e, l, o, t) {
              var r,
                a,
                u = null != e ? e : n.nullContext || {},
                i =
                  n.lookupProperty ||
                  function (n, e) {
                    if (Object.prototype.hasOwnProperty.call(n, e)) return n[e];
                  };
              return (
                "      " +
                (null !=
                (r =
                  "function" ==
                  typeof (a =
                    null != (a = i(l, "name") || (null != e ? i(e, "name") : e))
                      ? a
                      : n.hooks.helperMissing)
                    ? a.call(u, {
                        name: "name",
                        hash: {},
                        data: t,
                        loc: {
                          start: { line: 20, column: 6 },
                          end: { line: 20, column: 16 },
                        },
                      })
                    : a)
                  ? r
                  : "") +
                " = {\n" +
                (null !=
                (r = i(l, "each").call(u, null != e ? i(e, "tiles") : e, {
                  name: "each",
                  hash: {},
                  fn: n.program(2, t, 0),
                  inverse: n.noop,
                  data: t,
                  loc: {
                    start: { line: 21, column: 8 },
                    end: { line: 23, column: 17 },
                  },
                }))
                  ? r
                  : "") +
                "      }.freeze\n\n"
              );
            },
            2: function (n, e, l, o, t) {
              var r,
                a,
                u = null != e ? e : n.nullContext || {},
                i = n.hooks.helperMissing,
                c =
                  n.lookupProperty ||
                  function (n, e) {
                    if (Object.prototype.hasOwnProperty.call(n, e)) return n[e];
                  };
              return (
                "        " +
                (null !=
                (r = c(l, "if").call(u, null != e ? c(e, "broken") : e, {
                  name: "if",
                  hash: {},
                  fn: n.program(3, t, 0),
                  inverse: n.noop,
                  data: t,
                  loc: {
                    start: { line: 22, column: 8 },
                    end: { line: 22, column: 31 },
                  },
                }))
                  ? r
                  : "") +
                "'" +
                (null !=
                (r =
                  "function" ==
                  typeof (a =
                    null != (a = c(l, "id") || (null != e ? c(e, "id") : e))
                      ? a
                      : i)
                    ? a.call(u, {
                        name: "id",
                        hash: {},
                        data: t,
                        loc: {
                          start: { line: 22, column: 32 },
                          end: { line: 22, column: 40 },
                        },
                      })
                    : a)
                  ? r
                  : "") +
                "' => '" +
                (null !=
                (r =
                  "function" ==
                  typeof (a =
                    null !=
                    (a = c(l, "encoding") || (null != e ? c(e, "encoding") : e))
                      ? a
                      : i)
                    ? a.call(u, {
                        name: "encoding",
                        hash: {},
                        data: t,
                        loc: {
                          start: { line: 22, column: 46 },
                          end: { line: 22, column: 60 },
                        },
                      })
                    : a)
                  ? r
                  : "") +
                "',\n"
              );
            },
            3: function (n, e, l, o, t) {
              return "# ";
            },
            compiler: [8, ">= 4.3.0"],
            main: function (n, e, l, o, t) {
              var r,
                a,
                u = null != e ? e : n.nullContext || {},
                i =
                  n.lookupProperty ||
                  function (n, e) {
                    if (Object.prototype.hasOwnProperty.call(n, e)) return n[e];
                  };
              return (
                "# frozen_string_literal: true\n\n# File original exported from 18xx-maker/export-rb\n# https://github.com/18xx-maker/export-rb\n# rubocop:disable Layout/LineLength, Style/AsciiComments\n\nmodule Engine\n  module Config\n    module Tile\n      WHITE = {\n        'blank' => '',\n        'city' => 'city=revenue:0',\n        'town' => 'town=revenue:0',\n      }.freeze\n\n      BLUE = {}.freeze\n      RED = {}.freeze\n\n" +
                (null !=
                (r = i(l, "each").call(u, null != e ? i(e, "colors") : e, {
                  name: "each",
                  hash: {},
                  fn: n.program(1, t, 0),
                  inverse: n.noop,
                  data: t,
                  loc: {
                    start: { line: 19, column: 6 },
                    end: { line: 26, column: 15 },
                  },
                }))
                  ? r
                  : "") +
                "      COLORS = %i[white " +
                (null !=
                (r =
                  "function" ==
                  typeof (a =
                    null !=
                    (a = i(l, "symbols") || (null != e ? i(e, "symbols") : e))
                      ? a
                      : n.hooks.helperMissing)
                    ? a.call(u, {
                        name: "symbols",
                        hash: {},
                        data: t,
                        loc: {
                          start: { line: 27, column: 24 },
                          end: { line: 27, column: 37 },
                        },
                      })
                    : a)
                  ? r
                  : "") +
                " red].freeze\n    end\n  end\nend\n\n# rubocop:enable Layout/LineLength, Style/AsciiComments\n"
              );
            },
            useData: !0,
          });
        },
        { "hbsfy/runtime": 36 },
      ],
      121: [
        function (require, module, exports) {
          const tiles = require("./tiles"),
            publishers = require("./publishers/index.json"),
            games = {
              1817: {
                id: "1817",
                slug: "1817",
                file: "1817.json",
                title: "1817",
                designer: "Craig Bartell, Tim Flowers",
                publisher: "aag",
                minPlayers: 3,
                maxPlayers: 7,
              },
              "1817NA": {
                id: "1817NA",
                slug: "1817NA",
                file: "1817NA.json",
                title: "1817 NA",
                designer: "Marc Voyer",
                minPlayers: 3,
                maxPlayers: 7,
              },
              "1824GoodsTime": {
                id: "1824GoodsTime",
                slug: "1824GoodsTime",
                file: "1824GoodsTime.json",
                title: "1824 Goods Time variant",
                designer: "Lonny Orgler",
              },
              "1825-D1": {
                id: "1825-D1",
                slug: "1825-D1",
                file: "1825-D1.json",
                title: "1825 D1",
                designer: "Francis Tresham",
              },
              "1825-DB1": {
                id: "1825-DB1",
                slug: "1825-DB1",
                file: "1825-DB1.json",
                title: "1825 DB1",
                designer: "Francis Tresham",
              },
              "1825-DB3": {
                id: "1825-DB3",
                slug: "1825-DB3",
                file: "1825-DB3.json",
                title: "1825 DB3",
                designer: "Francis Tresham",
              },
              "1825-DB5": {
                id: "1825-DB5",
                slug: "1825-DB5",
                file: "1825-DB5.json",
                title: "1825 DB5",
                designer: "Francis Tresham",
              },
              "1825-K1": {
                id: "1825-K1",
                slug: "1825-K1",
                file: "1825-K1.json",
                title: "1825 K1",
                designer: "Francis Tresham",
              },
              "1825-K3": {
                id: "1825-K3",
                slug: "1825-K3",
                file: "1825-K3.json",
                title: "1825 K3",
                designer: "Francis Tresham",
              },
              "1825-K5": {
                id: "1825-K5",
                slug: "1825-K5",
                file: "1825-K5.json",
                title: "1825 K5",
                designer: "Francis Tresham",
              },
              "1825-K6": {
                id: "1825-K6",
                slug: "1825-K6",
                file: "1825-K6.json",
                title: "1825 K6",
                designer: "Francis Tresham",
              },
              "1825-Met": {
                id: "1825-Met",
                slug: "1825-Met",
                file: "1825-Met.json",
                title: "1825 - Met Line",
                designer: "Francis Tresham",
              },
              "1825-R1.1": {
                id: "1825-R1.1",
                slug: "1825-R1.1",
                file: "1825-R1.1.json",
                title: "1825 R1.1",
                designer: "Francis Tresham",
              },
              "1825-R2": {
                id: "1825-R2",
                slug: "1825-R2",
                file: "1825-R2.json",
                title: "1825 R2",
                designer: "Francis Tresham",
              },
              "1825-R3.1": {
                id: "1825-R3.1",
                slug: "1825-R3.1",
                file: "1825-R3.1.json",
                title: "1825 R3.1",
                designer: "Francis Tresham",
              },
              "1825-U1": {
                id: "1825-U1",
                slug: "1825-U1",
                file: "1825-U1.json",
                title: "1825 Unit 1",
                designer: "Francis Tresham",
              },
              "1825-U2": {
                id: "1825-U2",
                slug: "1825-U2",
                file: "1825-U2.json",
                title: "1825 Unit 2",
                designer: "Francis Tresham",
              },
              "1825-U3": {
                id: "1825-U3",
                slug: "1825-U3",
                file: "1825-U3.json",
                title: "1825 Unit 3",
                designer: "Francis Tresham",
              },
              1825: {
                id: "1825",
                slug: "1825",
                file: "1825.json",
                title: "1825",
                designer: "Francis Tresham",
                minPlayers: 4,
                maxPlayers: 9,
              },
              1832: {
                id: "1832",
                slug: "1832",
                file: "1832.json",
                title: "1832",
                subtitle: "The South",
                designer: "W.R. Dixon",
                publisher: "dtg",
                minPlayers: 2,
                maxPlayers: 7,
              },
              1834: {
                id: "1834",
                slug: "1834",
                file: "1834.json",
                title: "1834",
                subtitle: "Belgium & Luxembourg",
                designer: "Eddie Robbins",
                publisher: "winsome",
                minPlayers: 3,
                maxPlayers: 5,
              },
              1835: {
                id: "1835",
                slug: "1835",
                file: "1835.json",
                title: "1835",
                designer: "Michael Meier-Bachl",
                publisher: "hans",
                minPlayers: 3,
                maxPlayers: 7,
              },
              1836: {
                id: "1836",
                slug: "1836",
                file: "1836.json",
                title: "1836",
                designer: "Eddie Robbins",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "1838TL": {
                id: "1838TL",
                slug: "1838TL",
                file: "1838TL.json",
                title: "1838TL",
                subtitle: "The Thuringia Connection",
                designer: "Dieter Danziger",
                minPlayers: 3,
                maxPlayers: 8,
              },
              "1839NL": {
                id: "1839NL",
                slug: "1839NL",
                file: "1839NL.json",
                title: "1839",
                subtitle: "The Netherlands",
                designer: "Paul Stouthard, Rob van Wijngaarden",
              },
              1841: {
                id: "1841",
                slug: "1841",
                file: "1841.json",
                title: "1841",
                subtitle: "Railways in Northern Italy",
                designer: "Federico Vellani and Manlio Manzini",
                publisher: "dtg",
                minPlayers: 3,
                maxPlayers: 8,
              },
              1844: {
                id: "1844",
                slug: "1844",
                file: "1844.json",
                title: "1844",
                subtitle: "Switzerland",
                designer: "Helmut Ohley and Peter Minder",
                publisher: "mayfair",
                minPlayers: 3,
                maxPlayers: 7,
              },
              1845: {
                id: "1845",
                slug: "1845",
                file: "1845.json",
                title: "1845",
                designer: "Kevin Dykman",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1846: {
                id: "1846",
                slug: "1846",
                file: "1846.json",
                title: "1846",
                subtitle: "The Race for the Midwest",
                designer: "Thomas Lehmann",
                publisher: "gmt",
                minPlayers: 2,
                maxPlayers: 5,
              },
              1848: {
                id: "1848",
                slug: "1848",
                file: "1848.json",
                title: "1848",
                subtitle: "Australia",
                designer: "Helmut Ohley & Leonhard Orgler",
                publisher: "gmt",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1849: {
                id: "1849",
                slug: "1849",
                file: "1849.json",
                title: "1849",
                subtitle: "The Game of Sicilian Railways",
                designer: "Federico Vellani",
                publisher: "aag",
                minPlayers: 3,
                maxPlayers: 5,
              },
              1854: {
                id: "1854",
                slug: "1854",
                file: "1854.json",
                title: "1854",
                subtitle: "Austria",
                designer: "Lonny Orgler",
                publisher: "mayfair",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1856: {
                id: "1856",
                slug: "1856",
                file: "1856.json",
                title: "1856",
                subtitle: "Railroading in Upper Canada from 1856",
                designer: "Bill Dixon",
                publisher: "mayfair",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1857: {
                id: "1857",
                slug: "1857",
                file: "1857.json",
                title: "1857",
                designer: "Eddie Robbins",
                publisher: "winsome",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1859: {
                id: "1859",
                slug: "1859",
                file: "1859.json",
                title: "1859",
                subtitle: "South Africa",
                designer: "David V. H. Peters",
                minPlayers: 3,
                maxPlayers: 5,
              },
              1860: {
                id: "1860",
                slug: "1860",
                file: "1860.json",
                title: "1860",
                subtitle: "Railways on the Isle of Wight",
                designer: "Mike Hutton",
                publisher: "zman",
                minPlayers: 2,
                maxPlayers: 4,
              },
              1867: {
                id: "1867",
                slug: "1867",
                file: "1867.json",
                title: "1867",
                subtitle: "The Railways of Canada",
                designer: "Ian Wilson",
                publisher: "gtg",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1868: {
                id: "1868",
                slug: "1868",
                file: "1868.json",
                title: "1868",
                subtitle: "Uruguay",
                designer: "Eddie Robbins",
                publisher: "winsome",
                minPlayers: 3,
                maxPlayers: 5,
              },
              1870: {
                id: "1870",
                slug: "1870",
                file: "1870.json",
                title: "1870",
                subtitle: "Railroading across the Trans Mississippi from 1870",
                designer: "Bill Dixon",
                publisher: "mayfair",
                minPlayers: 2,
                maxPlayers: 6,
              },
              1879: {
                id: "1879",
                slug: "1879",
                file: "1879.json",
                title: "1879",
                subtitle: "US Pacific Northwest",
                designer: "Eddie Robbins",
                publisher: "winsome",
                minPlayers: 3,
                maxPlayers: 5,
              },
              1880: {
                id: "1880",
                slug: "1880",
                file: "1880.json",
                title: "1880",
                subtitle: "China",
                designer: "Helmut Ohley & Leonhard Orgler",
                minPlayers: 3,
                maxPlayers: 7,
              },
              1882: {
                id: "1882",
                slug: "1882",
                file: "1882.json",
                title: "1882",
                designer: "Marc Voyer",
                publisher: "aag",
                minPlayers: 2,
                maxPlayers: 6,
              },
              1891: {
                id: "1891",
                slug: "1891",
                file: "1891.json",
                title: "1891",
                subtitle: "Railroading in Hiroshima",
                designer: "Toryo Hojo",
              },
              "18C2C": {
                id: "18C2C",
                slug: "18C2C",
                file: "18C2C.json",
                title: "18C2C",
                subtitle: "Manifest Destiny",
                designer: "Mark Frazier",
                minPlayers: 2,
                maxPlayers: 8,
              },
              "18Chesapeake": {
                id: "18Chesapeake",
                slug: "18Chesapeake",
                file: "18Chesapeake.json",
                title: "18Chesapeake",
                subtitle: "The Birth of the American Railroads",
                designer: "Scott Petersen",
                publisher: "aag",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18CLE": {
                id: "18CLE",
                slug: "18CLE",
                file: "18CLE.json",
                title: "18CLE",
                subtitle: "Trolly Car Compaines of Cleveland, Ohio",
                designer: " Richard McGuire",
                publisher: "self",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18EU": {
                id: "18EU",
                slug: "18EU",
                file: "18EU.json",
                title: "18EU",
                subtitle: "Railraoding in Europe from the 1830's to the 1930's",
                designer: "David G. D. Hecht",
                publisher: "dtg",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18H8U": {
                id: "18H8U",
                slug: "18H8U",
                file: "18H8U.json",
                title: "18H8U",
                designer: "Mark Derrick",
                publisher: "self",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18Mex": {
                id: "18Mex",
                slug: "18Mex",
                file: "18Mex.json",
                title: "18Mex",
                designer: "Mark Derrick",
                publisher: "aag",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18MI": {
                id: "18MI",
                slug: "18MI",
                file: "18MI.json",
                title: "18MI",
                subtitle: "The Rise and Fall of Michigan's Railroads",
                designer: "Robert G. Schroeder",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18NK": {
                id: "18NK",
                slug: "18NK",
                file: "18NK.json",
                title: "18NK",
                subtitle: "Nagaokakyo City",
                designer: "CTDA",
              },
              "18Rhl": {
                id: "18Rhl",
                slug: "18Rhl",
                file: "18Rhl.json",
                title: "18Rhl",
                subtitle: "Rhineland",
                designer: "Wolfram Janich",
                publisher: "marflow",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18Scan": {
                id: "18Scan",
                slug: "18Scan",
                file: "18Scan.json",
                title: "18Scan",
                subtitle: "Railroading under the Northern Lights",
                designer: "David G. D. Hecht",
                publisher: "dtg",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "18SJ": {
                id: "18SJ",
                slug: "18SJ",
                file: "18SJ.json",
                title: "18SJ",
                subtitle: "Let there be rail",
                designer: "Örjan Wennman",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18SS": {
                id: "18SS",
                slug: "18SS",
                file: "18SS.json",
                title: "18SS",
                designer: "CTDA",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18SY": {
                id: "18SY",
                slug: "18SY",
                file: "18SY.json",
                title: "18SY",
                subtitle: "Railroading in Southern Yamaguchi",
                designer: "Toryo Hojo",
              },
              "18TK": {
                id: "18TK",
                slug: "18TK",
                file: "18TK.json",
                title: "18TK",
                subtitle: "Railroading in the Tokyo Metropolis",
                designer: "Julian Okuda",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18TN": {
                id: "18TN",
                slug: "18TN",
                file: "18TN.json",
                title: "18TN",
                subtitle: "The Railroads Comes to Tennessee",
                designer: "Mark Derrick",
                publisher: "dtg",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18TraXX2020": {
                id: "18TraXX2020",
                slug: "18TraXX2020",
                file: "18TraXX2020.json",
                title: "18TraXX",
                subtitle: "2020: Great Plains Railroading",
                designer: "Michael Carter and Anthony Fryer",
                minPlayers: 2,
                maxPlayers: 6,
              },
              FourthAge: {
                id: "FourthAge",
                slug: "FourthAge",
                file: "FourthAge.json",
                title: "Fourth Age",
                subtitle: "Railroading in Middle Earth",
                designer: "Rick Dutton",
                publisher: "self",
                minPlayers: 2,
                maxPlayers: 6,
              },
              Powerrails: {
                id: "Powerrails",
                slug: "Powerrails",
                file: "Powerrails.json",
                title: "Powerrails",
                subtitle: "Quickies für 1830-Spieler",
                designer: "Tom Schoeps",
                minPlayers: 2,
                maxPlayers: 5,
              },
              1800: {
                id: "1800",
                slug: "1800",
                file: "public/1800.json",
                title: "1800",
                subtitle: "Railroading in Colorado",
                designer: "Antonio Leal",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 3,
              },
              1830: {
                id: "1830",
                slug: "1830",
                file: "public/1830.json",
                title: "1830",
                subtitle: "Railways & Robber Barons",
                designer: "Francis Tresham",
                publisher: "lookout",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "1836jr-30": {
                id: "1836jr-30",
                slug: "1836jr-30",
                file: "public/1836jr-30.json",
                title: "1836jr",
                subtitle: "1830 Variant",
                designer: "David Hecht",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "1836jr-56": {
                id: "1836jr-56",
                slug: "1836jr-56",
                file: "public/1836jr-56.json",
                title: "1836jr",
                subtitle: "1856 Variant",
                designer: "David Hecht",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              1862: {
                id: "1862",
                slug: "1862",
                file: "public/1862.json",
                title: "1862",
                subtitle: "Railway Mania in the Eastern Counties",
                designer: "Mike Hutton",
                publisher: "gmt",
                group: "public",
              },
              1869: {
                id: "1869",
                slug: "1869",
                file: "public/1869.json",
                title: "1869",
                subtitle: "USA West",
                designer: "Alan R. Moon",
                group: "public",
                minPlayers: 2,
                maxPlayers: 8,
              },
              "1871BC": {
                id: "1871BC",
                slug: "1871BC",
                file: "public/1871BC.json",
                title: "1871: British Columbia",
                subtitle: "Confederation Railways",
                designer: "Brennan Sheremeto",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              1886: {
                id: "1886",
                slug: "1886",
                file: "public/1886.json",
                title: "1886",
                designer: "Michael Bear Cub",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1889: {
                id: "1889",
                slug: "1889",
                file: "public/1889.json",
                title: "1889",
                subtitle: "History of Shikoku Railways",
                designer: "Yasutaka Ikeda",
                publisher: "gtg",
                group: "public",
                minPlayers: 2,
                maxPlayers: 6,
              },
              1890: {
                id: "1890",
                slug: "1890",
                file: "public/1890.json",
                title: "1890",
                designer: "Shin-ichi Takasaki",
                group: "public",
                minPlayers: 2,
                maxPlayers: 7,
              },
              "18Africa": {
                id: "18Africa",
                slug: "18Africa",
                file: "public/18Africa.json",
                title: "18Africa",
                designer: "Jeff Edmunds",
                group: "public",
                minPlayers: 2,
                maxPlayers: 7,
              },
              "18AL": {
                id: "18AL",
                slug: "18AL",
                file: "public/18AL.json",
                title: "18AL",
                designer: "Mark Derrick",
                group: "public",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18EB": {
                id: "18EB",
                slug: "18EB",
                file: "public/18EB.json",
                title: "18EB",
                designer: "Michael Carter, Jeremy Long and Alexandra Sime",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "18NC": {
                id: "18NC",
                slug: "18NC",
                file: "public/18NC.json",
                title: "18NC",
                subtitle: "Railroads of the Tar Heel State",
                designer: "Matt Wilson",
                group: "public",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18NL": {
                id: "18NL",
                slug: "18NL",
                file: "public/18NL.json",
                title: "18NL",
                subtitle: "Nederland",
                designer: "Helmut Ohley",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18OC": {
                id: "18OC",
                slug: "18OC",
                file: "public/18OC.json",
                title: "18OC",
                subtitle: "Railways of Orange County",
                designer: "Christopher Giroir",
                group: "public",
                minPlayers: 3,
                maxPlayers: 4,
              },
              "18qq": {
                id: "18qq",
                slug: "18qq",
                file: "public/18qq.json",
                title: "18??",
                designer: "Alllen Sliwinski",
                group: "public",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18SW": {
                id: "18SW",
                slug: "18SW",
                file: "public/18SW.json",
                title: "18Somewhere",
                designer: "Jimmy Okolica",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "18TE": {
                id: "18TE",
                slug: "18TE",
                file: "public/18TE.json",
                title: "18TE",
                subtitle: "Eisenbahnen im Tecklenburger Land",
                designer: "Herbert Harengel",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 3,
              },
              "18TNKY": {
                id: "18TNKY",
                slug: "18TNKY",
                file: "public/18TNKY.json",
                title: "18TN/KY",
                subtitle: "An expansion of 18TN",
                designer: "KDD",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              Harzbahn: {
                id: "Harzbahn",
                slug: "Harzbahn",
                file: "public/Harzbahn.json",
                title: "Harzbahn 1873",
                subtitle: "Mining and Railways in the Harz Mountains",
                designer: "Klaus Kiermeier",
                publisher: "aag",
                group: "public",
                minPlayers: 2,
                maxPlayers: 5,
              },
              SteamOverHolland: {
                id: "SteamOverHolland",
                slug: "SteamOverHolland",
                file: "SteamOverHolland.json",
                title: "Steam Over Holland",
                designer: "Bart Van Dijk",
                minPlayers: 2,
                maxPlayers: 5,
              },
            },
            publicGames = {
              1800: {
                id: "1800",
                slug: "1800",
                file: "public/1800.json",
                title: "1800",
                subtitle: "Railroading in Colorado",
                designer: "Antonio Leal",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 3,
              },
              1830: {
                id: "1830",
                slug: "1830",
                file: "public/1830.json",
                title: "1830",
                subtitle: "Railways & Robber Barons",
                designer: "Francis Tresham",
                publisher: "lookout",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "1836jr-30": {
                id: "1836jr-30",
                slug: "1836jr-30",
                file: "public/1836jr-30.json",
                title: "1836jr",
                subtitle: "1830 Variant",
                designer: "David Hecht",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "1836jr-56": {
                id: "1836jr-56",
                slug: "1836jr-56",
                file: "public/1836jr-56.json",
                title: "1836jr",
                subtitle: "1856 Variant",
                designer: "David Hecht",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              1862: {
                id: "1862",
                slug: "1862",
                file: "public/1862.json",
                title: "1862",
                subtitle: "Railway Mania in the Eastern Counties",
                designer: "Mike Hutton",
                publisher: "gmt",
                group: "public",
              },
              1869: {
                id: "1869",
                slug: "1869",
                file: "public/1869.json",
                title: "1869",
                subtitle: "USA West",
                designer: "Alan R. Moon",
                group: "public",
                minPlayers: 2,
                maxPlayers: 8,
              },
              "1871BC": {
                id: "1871BC",
                slug: "1871BC",
                file: "public/1871BC.json",
                title: "1871: British Columbia",
                subtitle: "Confederation Railways",
                designer: "Brennan Sheremeto",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              1886: {
                id: "1886",
                slug: "1886",
                file: "public/1886.json",
                title: "1886",
                designer: "Michael Bear Cub",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              1889: {
                id: "1889",
                slug: "1889",
                file: "public/1889.json",
                title: "1889",
                subtitle: "History of Shikoku Railways",
                designer: "Yasutaka Ikeda",
                publisher: "gtg",
                group: "public",
                minPlayers: 2,
                maxPlayers: 6,
              },
              1890: {
                id: "1890",
                slug: "1890",
                file: "public/1890.json",
                title: "1890",
                designer: "Shin-ichi Takasaki",
                group: "public",
                minPlayers: 2,
                maxPlayers: 7,
              },
              "18Africa": {
                id: "18Africa",
                slug: "18Africa",
                file: "public/18Africa.json",
                title: "18Africa",
                designer: "Jeff Edmunds",
                group: "public",
                minPlayers: 2,
                maxPlayers: 7,
              },
              "18AL": {
                id: "18AL",
                slug: "18AL",
                file: "public/18AL.json",
                title: "18AL",
                designer: "Mark Derrick",
                group: "public",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18EB": {
                id: "18EB",
                slug: "18EB",
                file: "public/18EB.json",
                title: "18EB",
                designer: "Michael Carter, Jeremy Long and Alexandra Sime",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "18NC": {
                id: "18NC",
                slug: "18NC",
                file: "public/18NC.json",
                title: "18NC",
                subtitle: "Railroads of the Tar Heel State",
                designer: "Matt Wilson",
                group: "public",
                minPlayers: 3,
                maxPlayers: 5,
              },
              "18NL": {
                id: "18NL",
                slug: "18NL",
                file: "public/18NL.json",
                title: "18NL",
                subtitle: "Nederland",
                designer: "Helmut Ohley",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              "18OC": {
                id: "18OC",
                slug: "18OC",
                file: "public/18OC.json",
                title: "18OC",
                subtitle: "Railways of Orange County",
                designer: "Christopher Giroir",
                group: "public",
                minPlayers: 3,
                maxPlayers: 4,
              },
              "18qq": {
                id: "18qq",
                slug: "18qq",
                file: "public/18qq.json",
                title: "18??",
                designer: "Alllen Sliwinski",
                group: "public",
                minPlayers: 2,
                maxPlayers: 6,
              },
              "18SW": {
                id: "18SW",
                slug: "18SW",
                file: "public/18SW.json",
                title: "18Somewhere",
                designer: "Jimmy Okolica",
                group: "public",
                minPlayers: 2,
                maxPlayers: 4,
              },
              "18TE": {
                id: "18TE",
                slug: "18TE",
                file: "public/18TE.json",
                title: "18TE",
                subtitle: "Eisenbahnen im Tecklenburger Land",
                designer: "Herbert Harengel",
                publisher: "self",
                group: "public",
                minPlayers: 2,
                maxPlayers: 3,
              },
              "18TNKY": {
                id: "18TNKY",
                slug: "18TNKY",
                file: "public/18TNKY.json",
                title: "18TN/KY",
                subtitle: "An expansion of 18TN",
                designer: "KDD",
                group: "public",
                minPlayers: 3,
                maxPlayers: 6,
              },
              Harzbahn: {
                id: "Harzbahn",
                slug: "Harzbahn",
                file: "public/Harzbahn.json",
                title: "Harzbahn 1873",
                subtitle: "Mining and Railways in the Harz Mountains",
                designer: "Klaus Kiermeier",
                publisher: "aag",
                group: "public",
                minPlayers: 2,
                maxPlayers: 5,
              },
            };
          module.exports = {
            games: games,
            public: publicGames,
            publishers: publishers,
            tiles: tiles,
          };
        },
        { "./publishers/index.json": 145, "./tiles": 149 },
      ],
      122: [
        function (require, module, exports) {
          var _curry3 = require("./internal/_curry3"),
            assoc = _curry3(function (r, u, a) {
              var c = {};
              for (var e in a) c[e] = a[e];
              return (c[r] = u), c;
            });
          module.exports = assoc;
        },
        { "./internal/_curry3": 133 },
      ],
      123: [
        function (require, module, exports) {
          var _arity = require("./internal/_arity"),
            _curry2 = require("./internal/_curry2"),
            bind = _curry2(function (r, n) {
              return _arity(r.length, function () {
                return r.apply(n, arguments);
              });
            });
          module.exports = bind;
        },
        { "./internal/_arity": 127, "./internal/_curry2": 132 },
      ],
      124: [
        function (require, module, exports) {
          var _clone = require("./internal/_clone"),
            _curry1 = require("./internal/_curry1"),
            clone = _curry1(function (e) {
              return null != e && "function" == typeof e.clone
                ? e.clone()
                : _clone(e, [], [], !0);
            });
          module.exports = clone;
        },
        { "./internal/_clone": 129, "./internal/_curry1": 131 },
      ],
      125: [
        function (require, module, exports) {
          var _checkForMethod = require("./internal/_checkForMethod"),
            _curry2 = require("./internal/_curry2"),
            forEach = _curry2(
              _checkForMethod("forEach", function (r, e) {
                for (var c = e.length, o = 0; o < c; ) r(e[o]), (o += 1);
                return e;
              })
            );
          module.exports = forEach;
        },
        { "./internal/_checkForMethod": 128, "./internal/_curry2": 132 },
      ],
      126: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            keys = require("./keys"),
            forEachObjIndexed = _curry2(function (r, e) {
              for (var n = keys(e), u = 0; u < n.length; ) {
                var a = n[u];
                r(e[a], a, e), (u += 1);
              }
              return e;
            });
          module.exports = forEachObjIndexed;
        },
        { "./internal/_curry2": 132, "./keys": 142 },
      ],
      127: [
        function (require, module, exports) {
          function _arity(t, r) {
            switch (t) {
              case 0:
                return function () {
                  return r.apply(this, arguments);
                };
              case 1:
                return function (t) {
                  return r.apply(this, arguments);
                };
              case 2:
                return function (t, n) {
                  return r.apply(this, arguments);
                };
              case 3:
                return function (t, n, e) {
                  return r.apply(this, arguments);
                };
              case 4:
                return function (t, n, e, u) {
                  return r.apply(this, arguments);
                };
              case 5:
                return function (t, n, e, u, a) {
                  return r.apply(this, arguments);
                };
              case 6:
                return function (t, n, e, u, a, i) {
                  return r.apply(this, arguments);
                };
              case 7:
                return function (t, n, e, u, a, i, s) {
                  return r.apply(this, arguments);
                };
              case 8:
                return function (t, n, e, u, a, i, s, c) {
                  return r.apply(this, arguments);
                };
              case 9:
                return function (t, n, e, u, a, i, s, c, p) {
                  return r.apply(this, arguments);
                };
              case 10:
                return function (t, n, e, u, a, i, s, c, p, o) {
                  return r.apply(this, arguments);
                };
              default:
                throw new Error(
                  "First argument to _arity must be a non-negative integer no greater than ten"
                );
            }
          }
          module.exports = _arity;
        },
        {},
      ],
      128: [
        function (require, module, exports) {
          var _isArray = require("./_isArray");
          function _checkForMethod(r, e) {
            return function () {
              var t = arguments.length;
              if (0 === t) return e();
              var o = arguments[t - 1];
              return _isArray(o) || "function" != typeof o[r]
                ? e.apply(this, arguments)
                : o[r].apply(
                    o,
                    Array.prototype.slice.call(arguments, 0, t - 1)
                  );
            };
          }
          module.exports = _checkForMethod;
        },
        { "./_isArray": 136 },
      ],
      129: [
        function (require, module, exports) {
          var _cloneRegExp = require("./_cloneRegExp"),
            type = require("../type");
          function _clone(e, r, n, t) {
            var c = function (c) {
              for (var u = r.length, a = 0; a < u; ) {
                if (e === r[a]) return n[a];
                a += 1;
              }
              for (var o in ((r[a + 1] = e), (n[a + 1] = c), e))
                c[o] = t ? _clone(e[o], r, n, !0) : e[o];
              return c;
            };
            switch (type(e)) {
              case "Object":
                return c({});
              case "Array":
                return c([]);
              case "Date":
                return new Date(e.valueOf());
              case "RegExp":
                return _cloneRegExp(e);
              default:
                return e;
            }
          }
          module.exports = _clone;
        },
        { "../type": 144, "./_cloneRegExp": 130 },
      ],
      130: [
        function (require, module, exports) {
          function _cloneRegExp(e) {
            return new RegExp(
              e.source,
              (e.global ? "g" : "") +
                (e.ignoreCase ? "i" : "") +
                (e.multiline ? "m" : "") +
                (e.sticky ? "y" : "") +
                (e.unicode ? "u" : "")
            );
          }
          module.exports = _cloneRegExp;
        },
        {},
      ],
      131: [
        function (require, module, exports) {
          var _isPlaceholder = require("./_isPlaceholder");
          function _curry1(r) {
            return function e(l) {
              return 0 === arguments.length || _isPlaceholder(l)
                ? e
                : r.apply(this, arguments);
            };
          }
          module.exports = _curry1;
        },
        { "./_isPlaceholder": 138 },
      ],
      132: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _isPlaceholder = require("./_isPlaceholder");
          function _curry2(r) {
            return function e(u, c) {
              switch (arguments.length) {
                case 0:
                  return e;
                case 1:
                  return _isPlaceholder(u)
                    ? e
                    : _curry1(function (e) {
                        return r(u, e);
                      });
                default:
                  return _isPlaceholder(u) && _isPlaceholder(c)
                    ? e
                    : _isPlaceholder(u)
                    ? _curry1(function (e) {
                        return r(e, c);
                      })
                    : _isPlaceholder(c)
                    ? _curry1(function (e) {
                        return r(u, e);
                      })
                    : r(u, c);
              }
            };
          }
          module.exports = _curry2;
        },
        { "./_curry1": 131, "./_isPlaceholder": 138 },
      ],
      133: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _curry2 = require("./_curry2"),
            _isPlaceholder = require("./_isPlaceholder");
          function _curry3(r) {
            return function e(c, u, l) {
              switch (arguments.length) {
                case 0:
                  return e;
                case 1:
                  return _isPlaceholder(c)
                    ? e
                    : _curry2(function (e, u) {
                        return r(c, e, u);
                      });
                case 2:
                  return _isPlaceholder(c) && _isPlaceholder(u)
                    ? e
                    : _isPlaceholder(c)
                    ? _curry2(function (e, c) {
                        return r(e, u, c);
                      })
                    : _isPlaceholder(u)
                    ? _curry2(function (e, u) {
                        return r(c, e, u);
                      })
                    : _curry1(function (e) {
                        return r(c, u, e);
                      });
                default:
                  return _isPlaceholder(c) &&
                    _isPlaceholder(u) &&
                    _isPlaceholder(l)
                    ? e
                    : _isPlaceholder(c) && _isPlaceholder(u)
                    ? _curry2(function (e, c) {
                        return r(e, c, l);
                      })
                    : _isPlaceholder(c) && _isPlaceholder(l)
                    ? _curry2(function (e, c) {
                        return r(e, u, c);
                      })
                    : _isPlaceholder(u) && _isPlaceholder(l)
                    ? _curry2(function (e, u) {
                        return r(c, e, u);
                      })
                    : _isPlaceholder(c)
                    ? _curry1(function (e) {
                        return r(e, u, l);
                      })
                    : _isPlaceholder(u)
                    ? _curry1(function (e) {
                        return r(c, e, l);
                      })
                    : _isPlaceholder(l)
                    ? _curry1(function (e) {
                        return r(c, u, e);
                      })
                    : r(c, u, l);
              }
            };
          }
          module.exports = _curry3;
        },
        { "./_curry1": 131, "./_curry2": 132, "./_isPlaceholder": 138 },
      ],
      134: [
        function (require, module, exports) {
          function _has(t, e) {
            return Object.prototype.hasOwnProperty.call(e, t);
          }
          module.exports = _has;
        },
        {},
      ],
      135: [
        function (require, module, exports) {
          var _has = require("./_has"),
            toString = Object.prototype.toString,
            _isArguments = (function () {
              return "[object Arguments]" === toString.call(arguments)
                ? function (t) {
                    return "[object Arguments]" === toString.call(t);
                  }
                : function (t) {
                    return _has("callee", t);
                  };
            })();
          module.exports = _isArguments;
        },
        { "./_has": 134 },
      ],
      136: [
        function (require, module, exports) {
          module.exports =
            Array.isArray ||
            function (r) {
              return (
                null != r &&
                r.length >= 0 &&
                "[object Array]" === Object.prototype.toString.call(r)
              );
            };
        },
        {},
      ],
      137: [
        function (require, module, exports) {
          var _curry1 = require("./_curry1"),
            _isArray = require("./_isArray"),
            _isString = require("./_isString"),
            _isArrayLike = _curry1(function (r) {
              return (
                !!_isArray(r) ||
                (!!r &&
                  "object" == typeof r &&
                  !_isString(r) &&
                  (1 === r.nodeType
                    ? !!r.length
                    : 0 === r.length ||
                      (r.length > 0 &&
                        r.hasOwnProperty(0) &&
                        r.hasOwnProperty(r.length - 1))))
              );
            });
          module.exports = _isArrayLike;
        },
        { "./_curry1": 131, "./_isArray": 136, "./_isString": 139 },
      ],
      138: [
        function (require, module, exports) {
          function _isPlaceholder(e) {
            return (
              null != e &&
              "object" == typeof e &&
              !0 === e["@@functional/placeholder"]
            );
          }
          module.exports = _isPlaceholder;
        },
        {},
      ],
      139: [
        function (require, module, exports) {
          function _isString(t) {
            return "[object String]" === Object.prototype.toString.call(t);
          }
          module.exports = _isString;
        },
        {},
      ],
      140: [
        function (require, module, exports) {
          var _isArrayLike = require("./_isArrayLike"),
            _xwrap = require("./_xwrap"),
            bind = require("../bind");
          function _arrayReduce(e, r, t) {
            for (var u = 0, n = t.length; u < n; ) {
              if (
                (r = e["@@transducer/step"](r, t[u])) &&
                r["@@transducer/reduced"]
              ) {
                r = r["@@transducer/value"];
                break;
              }
              u += 1;
            }
            return e["@@transducer/result"](r);
          }
          function _iterableReduce(e, r, t) {
            for (var u = t.next(); !u.done; ) {
              if (
                (r = e["@@transducer/step"](r, u.value)) &&
                r["@@transducer/reduced"]
              ) {
                r = r["@@transducer/value"];
                break;
              }
              u = t.next();
            }
            return e["@@transducer/result"](r);
          }
          function _methodReduce(e, r, t, u) {
            return e["@@transducer/result"](
              t[u](bind(e["@@transducer/step"], e), r)
            );
          }
          var symIterator =
            "undefined" != typeof Symbol ? Symbol.iterator : "@@iterator";
          function _reduce(e, r, t) {
            if (("function" == typeof e && (e = _xwrap(e)), _isArrayLike(t)))
              return _arrayReduce(e, r, t);
            if ("function" == typeof t["fantasy-land/reduce"])
              return _methodReduce(e, r, t, "fantasy-land/reduce");
            if (null != t[symIterator])
              return _iterableReduce(e, r, t[symIterator]());
            if ("function" == typeof t.next) return _iterableReduce(e, r, t);
            if ("function" == typeof t.reduce)
              return _methodReduce(e, r, t, "reduce");
            throw new TypeError("reduce: list must be array or iterable");
          }
          module.exports = _reduce;
        },
        { "../bind": 123, "./_isArrayLike": 137, "./_xwrap": 141 },
      ],
      141: [
        function (require, module, exports) {
          var XWrap = (function () {
            function r(r) {
              this.f = r;
            }
            return (
              (r.prototype["@@transducer/init"] = function () {
                throw new Error("init not implemented on XWrap");
              }),
              (r.prototype["@@transducer/result"] = function (r) {
                return r;
              }),
              (r.prototype["@@transducer/step"] = function (r, t) {
                return this.f(r, t);
              }),
              r
            );
          })();
          function _xwrap(r) {
            return new XWrap(r);
          }
          module.exports = _xwrap;
        },
        {},
      ],
      142: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            _has = require("./internal/_has"),
            _isArguments = require("./internal/_isArguments"),
            hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString"),
            nonEnumerableProps = [
              "constructor",
              "valueOf",
              "isPrototypeOf",
              "toString",
              "propertyIsEnumerable",
              "hasOwnProperty",
              "toLocaleString",
            ],
            hasArgsEnumBug = (function () {
              "use strict";
              return arguments.propertyIsEnumerable("length");
            })(),
            contains = function (r, n) {
              for (var e = 0; e < r.length; ) {
                if (r[e] === n) return !0;
                e += 1;
              }
              return !1;
            },
            keys =
              "function" != typeof Object.keys || hasArgsEnumBug
                ? _curry1(function (r) {
                    if (Object(r) !== r) return [];
                    var n,
                      e,
                      t = [],
                      u = hasArgsEnumBug && _isArguments(r);
                    for (n in r)
                      !_has(n, r) || (u && "length" === n) || (t[t.length] = n);
                    if (hasEnumBug)
                      for (e = nonEnumerableProps.length - 1; e >= 0; )
                        (n = nonEnumerableProps[e]),
                          _has(n, r) && !contains(t, n) && (t[t.length] = n),
                          (e -= 1);
                    return t;
                  })
                : _curry1(function (r) {
                    return Object(r) !== r ? [] : Object.keys(r);
                  });
          module.exports = keys;
        },
        {
          "./internal/_curry1": 131,
          "./internal/_has": 134,
          "./internal/_isArguments": 135,
        },
      ],
      143: [
        function (require, module, exports) {
          var _curry2 = require("./internal/_curry2"),
            _reduce = require("./internal/_reduce"),
            keys = require("./keys"),
            mapObjIndexed = _curry2(function (e, r) {
              return _reduce(
                function (u, n) {
                  return (u[n] = e(r[n], n, r)), u;
                },
                {},
                keys(r)
              );
            });
          module.exports = mapObjIndexed;
        },
        { "./internal/_curry2": 132, "./internal/_reduce": 140, "./keys": 142 },
      ],
      144: [
        function (require, module, exports) {
          var _curry1 = require("./internal/_curry1"),
            type = _curry1(function (r) {
              return null === r
                ? "Null"
                : void 0 === r
                ? "Undefined"
                : Object.prototype.toString.call(r).slice(8, -1);
            });
          module.exports = type;
        },
        { "./internal/_curry1": 131 },
      ],
      145: [
        function (require, module, exports) {
          module.exports = {
            aag: {
              name: "All-Aboard Games",
              link: "https://all-aboardgames.com/",
            },
            dtg: {
              name: "Deep Thought Games",
              link: "http://www.deepthoughtgames.com/",
            },
            gmt: {
              name: "GMT Games",
              link: "https://www.gmtgames.com/",
            },
            gtg: {
              name: "Grand Trunk Games",
              link: "https://www.grandtrunkgames.com/",
            },
            hans: {
              name: "Hans im Glück",
              link: "https://www.hans-im-glueck.de/",
            },
            lookout: {
              name: "Lookout",
              link: "https://lookout-spiele.de/",
            },
            marflow: {
              name: "Marflow Games",
              link: "https://18xx-marflow-games.de/",
            },
            mayfair: {
              name: "Mayfair Games",
              link: "https://en.wikipedia.org/wiki/Mayfair_Games",
            },
            self: {
              name: "Self Published",
            },
            winsome: {
              name: "Winsome Games",
              link:
                "https://boardgamegeek.com/boardgamepublisher/65/winsome-games",
            },
            zman: {
              name: "Z-Man Games",
              link: "https://www.zmangames.com/",
            },
          };
        },
        {},
      ],
      146: [
        function (require, module, exports) {
          module.exports = {
            "32": {
              color: "brown",
              values: [{ angle: 180, percent: 0.2, value: 70 }],
              names: [{ percent: 0.2, name: "London", fontSize: 12 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
            },
            "33": {
              color: "brown",
              labels: [
                {
                  label: "L",
                  angle: 265,
                  percent: 0.8,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              cities: [
                {
                  angle: 320,
                  percent: 0.5,
                },
                {
                  angle: 60,
                  percent: 0.55,
                },
                {
                  angle: 160,
                  percent: 0.5,
                },
              ],
              track: [
                {
                  side: 1,
                  type: "sharpStopRev",
                },
                {
                  side: 2,
                  type: "stop",
                },
                {
                  side: 3,
                  type: "sharpStop",
                },
              ],
            },
            "34": {
              color: "brown",
              labels: [
                {
                  label: "BGM",
                  angle: 147.5,
                  percent: 0.8,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              cities: [
                {
                  percent: 0.55,
                },
                {
                  angle: 90,
                  percent: 0.6,
                },
                {
                  angle: 275,
                  percent: 0.6,
                },
              ],
              track: [
                {
                  side: 1,
                  type: "straight",
                },
                {
                  side: 3,
                  type: "sharpStopRev",
                },
                {
                  side: 5,
                  type: "sharpStop",
                },
              ],
            },
            "35": {
              color: "brown",
              values: [
                {
                  angle: 240,
                  percent: 0.7,
                  value: 40,
                },
                {
                  angle: 300,
                  percent: 0.7,
                  value: 40,
                },
              ],
              cities: [
                {
                  angle: 4,
                  percent: 0.57735,
                },
                {
                  angle: 174,
                  percent: 0.57735,
                },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 2,
                  cross: "under",
                },
              ],
            },
            "36": {
              color: "brown",
              values: [
                { angle: 120, percent: 0.7, value: 40 },
                { angle: 300, percent: 0.7, value: 40 },
              ],
              cities: [
                { angle: 354, percent: 0.57735 },
                { angle: 174, percent: 0.57735 },
              ],
              track: [
                { type: "gentle", side: 2 },
                { type: "gentle", side: 5 },
              ],
            },
            "37": {
              color: "brown",
              values: [
                {
                  angle: 120,
                  percent: 0.7,
                  value: 40,
                },
                {
                  angle: 300,
                  percent: 0.7,
                  value: 40,
                },
              ],
              cities: [
                {
                  angle: 244,
                  percent: 0.57735,
                },
                {
                  angle: 64,
                  percent: 0.57735,
                },
              ],
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "gentleStopRev",
                  side: 4,
                },
                {
                  type: "gentleStopRev",
                  side: 1,
                },
              ],
            },
            "38": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "39": {
              color: "brown",
              track: [
                { type: "gentle", side: 1 },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "40": {
              color: "brown",
              rotations: 2,
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 3,
                },
                {
                  type: "gentle",
                  side: 5,
                },
              ],
            },
            "41": {
              color: "brown",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 2,
                },
              ],
            },
            "42": {
              color: "brown",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 4,
                },
                {
                  type: "sharp",
                  side: 6,
                },
              ],
            },
            "43": {
              color: "brown",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 2,
                  cross: "under",
                },
                {
                  type: "sharp",
                  side: 2,
                },
              ],
            },
            "44": {
              color: "brown",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "straight",
                  side: 2,
                  cross: "under",
                },
                {
                  type: "sharp",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 4,
                },
              ],
            },
            "45": {
              color: "brown",
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
                { type: "gentle", side: 5 },
                { type: "sharp", side: 3 },
              ],
            },
            "46": {
              color: "brown",
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
                { type: "sharp", side: 4 },
                { type: "gentle", side: 1 },
              ],
            },
            "47": {
              color: "brown",
              rotations: 3,
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "gentle", side: 2 },
                { type: "gentle", side: 5 },
              ],
            },
            "61": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "61Y": {
              color: "brown",
              rotations: 6,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "62": {
              color: "brown",
              values: [{ angle: 270, percent: 0.85, value: 80 }],
              labels: [{ label: "NY", fontSize: 24, angle: 90, percent: 0.85 }],
              cities: [
                { angle: 0, rotate: 0, percent: 0.39, size: 2 },
                { angle: 180, rotate: 0, percent: 0.39, size: 2 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "63": {
              color: "brown",
              rotations: 1,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "1064": {
              color: "brown",
              values: [
                { angle: 60, percent: 0.7, value: 50 },
                { angle: 150, percent: 0.8, value: 50 },
              ],
              cities: [{ percent: 0.57735 }, { angle: 210, percent: 0.5 }],
              track: [
                { type: "gentle", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "64": {
              color: "brown",
              values: [
                { angle: 60, percent: 0.7, value: 50 },
                { angle: 150, percent: 0.8, value: 50 },
              ],
              labels: [{ angle: 285, percent: 0.65, label: "OO" }],
              cities: [{ percent: 0.57735 }, { angle: 210, percent: 0.5 }],
              track: [
                { type: "gentle", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "1065": {
              color: "brown",
              values: [
                { angle: 300, percent: 0.7, value: 50 },
                { angle: 210, percent: 0.8, value: 50 },
              ],
              cities: [{ percent: 0.57735 }, { angle: 150, percent: 0.5 }],
              track: [
                { type: "gentle", side: 5 },
                { type: "sharp", side: 3 },
              ],
            },
            "65": {
              color: "brown",
              values: [
                { angle: 300, percent: 0.7, value: 50 },
                { angle: 210, percent: 0.8, value: 50 },
              ],
              labels: [{ angle: 75, percent: 0.65, label: "OO" }],
              cities: [{ percent: 0.57735 }, { angle: 150, percent: 0.5 }],
              track: [
                { type: "gentle", side: 5 },
                { type: "sharp", side: 3 },
              ],
            },
            "1066": {
              color: "brown",
              values: [
                { angle: 300, percent: 0.7, value: 50 },
                { angle: 150, percent: 0.7, value: 50 },
              ],
              cities: [{ percent: 0.6 }, { angle: 90, percent: 0.5 }],
              track: [
                { type: "straight", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "66": {
              color: "brown",
              values: [
                { angle: 300, percent: 0.68, value: 50 },
                { angle: 150, percent: 0.68, value: 50 },
              ],
              labels: [{ angle: 240, percent: 0.6, label: "OO" }],
              cities: [{ percent: 0.6 }, { angle: 90, percent: 0.5 }],
              track: [
                { type: "straight", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "1067": {
              color: "brown",
              values: [
                { angle: 60, percent: 0.7, value: 50 },
                { angle: 210, percent: 0.8, value: 50 },
              ],
              cities: [
                { angle: 0, percent: 0.6 },
                { angle: 120, percent: 0.57735 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
              ],
            },
            "67": {
              color: "brown",
              values: [
                { angle: 60, percent: 0.7, value: 50 },
                { angle: 210, percent: 0.8, value: 50 },
              ],
              labels: [{ label: "OO", angle: 285, percent: 0.6 }],
              cities: [
                { angle: 0, percent: 0.6 },
                { angle: 120, percent: 0.57735 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
              ],
            },
            "1068": {
              color: "brown",
              values: [
                { angle: 150, percent: 0.7, value: 50 },
                { angle: 90, percent: 0.7, value: 50 },
              ],
              cities: [{ percent: 0.6 }, { angle: 240, percent: 0.6 }],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
              ],
            },
            "68": {
              color: "brown",
              values: [
                { angle: 150, percent: 0.7, value: 50 },
                { angle: 90, percent: 0.7, value: 50 },
              ],
              labels: [{ label: "OO", angle: 292, percent: 0.68 }],
              cities: [{ percent: 0.6 }, { angle: 240, percent: 0.6 }],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
              ],
            },
            "70": {
              color: "brown",
              track: [
                {
                  type: "sharp",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 1,
                  cross: "under",
                },
                {
                  type: "gentle",
                  side: 2,
                  cross: "over",
                },
                {
                  type: "sharp",
                  side: 3,
                },
              ],
            },
            "102": {
              color: "brown",
              values: [{ value: 30, angle: 210, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
                { side: 6, gauge: "dual" },
              ],
            },
            "103": {
              color: "brown",
              values: [{ value: 40, angle: 210, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "104": {
              color: "brown",
              values: [{ value: 70, angle: 180, percent: 0.2 }],
              labels: [{ label: "CP", percent: 0.2 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
              track: [
                { side: 1, gauge: "dual", type: "stop" },
                { side: 2, gauge: "dual", type: "stop" },
                { side: 3, gauge: "dual", type: "stop" },
                { side: 4, gauge: "dual", type: "stop" },
                { side: 5, gauge: "dual", type: "stop" },
                { side: 6, gauge: "dual", type: "stop" },
              ],
            },
            "105": {
              color: "brown",
              values: [{ value: 40, angle: 210, percent: 0.8 }],
              labels: [{ label: "BM", fontSize: 18, angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
              ],
            },
            "106": {
              color: "brown",
              track: [
                { side: 1, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 5, gauge: "dual" },
                { side: 4, gauge: "dual" },
              ],
            },
            "107": {
              color: "brown",
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "118": {
              color: "brown",
              values: [
                { angle: 325, percent: 0.6, value: 40 },
                { angle: 215, percent: 0.6, value: 40 },
              ],
              cities: [
                { angle: 30, percent: 0.6 },
                { angle: 150, percent: 0.6 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "122": {
              color: "brown",
              values: [{ angle: 270, percent: 0.85, value: 80 }],
              labels: [{ label: "T", angle: 90, percent: 0.85 }],
              cities: [
                { angle: 0, percent: 0.39, size: 2 },
                { angle: 180, percent: 0.39, size: 2 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "125": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "126": {
              color: "brown",
              labels: [{ label: "L", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "127": {
              color: "brown",
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "130": {
              color: "brown",
              values: [{ value: 100, angle: 270, percent: 0.9 }],
              labels: [{ label: "C", angle: 90, percent: 0.9 }],
              cities: [{ size: 4 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "132": {
              color: "brown",
              values: [{ value: 70, angle: 180, percent: 0.2 }],
              labels: [{ label: "C", percent: 0.2 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
              ],
              track: [
                { side: 1, type: "stop" },
                { side: 2, type: "stop" },
                { side: 3, type: "stop" },
                { side: 4, type: "stop" },
              ],
            },
            "133": {
              color: "brown",
              labels: [
                {
                  label: "M",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
              ],
            },
            "135": {
              color: "brown",
              labels: [
                { label: "KC", angle: 150, percent: 0.8, fontSize: 18 },
                { label: "SL", angle: 90, percent: 0.87, fontSize: 18 },
                { label: "MSP", angle: 30, percent: 0.8, fontSize: 18 },
              ],
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "145": {
              color: "brown",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "146": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "147": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "148": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "168": {
              color: "brown",
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              values: [{ value: 30, angle: 210, percent: 0.8 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "169": {
              color: "brown",
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              values: [{ value: 30, angle: 210, percent: 0.8 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "170": {
              color: "brown",
              cities: [
                {
                  size: 2,
                },
              ],
              labels: [
                {
                  label: "P",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "191": {
              color: "brown",
              rotations: 1,
              values: [{ angle: 270, percent: 0.9, value: 60 }],
              labels: [{ angle: 90, percent: 0.9, label: "A" }],
              cities: [{ size: 4 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "193": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              labels: [
                {
                  angle: 150,
                  percent: 0.8,
                  label: "S",
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "216": {
              color: "brown",
              cities: [
                {
                  size: 2,
                },
              ],
              labels: [
                {
                  label: "Y",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "217": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "239": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "K", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "297": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "Z", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "299": {
              color: "brown",
              labels: [{ angle: 285, percent: 0.7, label: "Chi" }],
              values: [{ angle: 315, percent: 0.75, value: 70 }],
              cities: [
                { angle: 60, percent: 0.75 },
                { angle: 120, percent: 0.75 },
                { angle: 180, percent: 0.75 },
                { angle: 240, percent: 0.75 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "gentle", side: 1 },
                { type: "straight", side: 1 },
                { type: "gentle", side: 5 },
              ],
            },
            "444a": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              cities: [{ size: 2 }],
              labels: [{ angle: 150, percent: 0.8, label: "B·M" }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "448": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "449": {
              color: "brown",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
            },
            "450": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "465": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "K", angle: 90, percent: 0.8 }],
              cities: [{ size: 3, companies: ["TR"] }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "466": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "T", angle: 150, percent: 0.8 }],
              cities: [{ size: 2, companies: ["KO"] }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "492": {
              color: "brown",
              rotations: 1,
              values: [{ angle: 210, percent: 0.8, value: 80 }],
              labels: [{ label: "H", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "515": {
              color: "brown",
              values: [{ value: 90, angle: 180, percent: 0.2 }],
              labels: [{ label: "P", percent: 0.2 }],
              track: [
                { side: 1, type: "stop" },
                { side: 2, type: "stop" },
                { side: 3, type: "stop" },
                { side: 4, type: "stop" },
                { side: 5, type: "stop" },
                { side: 6, type: "stop" },
              ],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
            },
            "544": {
              color: "brown",
              rotations: 3,
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "545": {
              color: "brown",
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "546": {
              color: "brown",
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "582": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Y", angle: 155, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "583": {
              color: "brown",
              values: [{ angle: 270, percent: 0.85, value: 80 }],
              labels: [{ label: "P", angle: 90, percent: 0.85 }],
              cities: [
                { angle: 0, rotate: 0, percent: 0.39, size: 2 },
                { angle: 180, rotate: 0, percent: 0.39, size: 2 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "584": {
              color: "brown",
              rotations: 1,
              cities: [{ size: 3 }],
              labels: [{ label: "B-V", angle: 90, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "591": {
              color: "brown",
              values: [{ angle: 270, percent: 0.85, value: 80 }],
              labels: [
                { label: "Chi", fontSize: 20, angle: 90, percent: 0.85 },
              ],
              cities: [
                { size: 2, angle: 180, percent: 0.39 },
                { size: 2, angle: 0, percent: 0.39 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 4 },
              ],
            },
            "593": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
              labels: [{ angle: 90, percent: 0.8, label: "B" }],
            },
            "603": {
              color: "brown",
              cities: [{}],
              towns: [
                {
                  angle: 300,
                  percent: 0.667,
                  rotation: -60,
                },
              ],
              values: [
                {
                  value: 30,
                  angle: 335,
                  percent: 0.8,
                },
                {
                  value: 20,
                  angle: 210,
                  percent: 0.75,
                },
              ],
              labels: [
                {
                  label: "V",
                  angle: 90,
                  percent: 0.75,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
                {
                  side: 6,
                },
              ],
            },
            "605": {
              color: "brown",
              cities: [{ size: 3 }],
              labels: [{ label: "M", angle: 90, percent: 0.8 }],
              values: [{ value: 150, angle: 210, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "607": {
              color: "brown",
              cities: [{ size: 2 }],
              labels: [{ label: "T", angle: 150, percent: 0.8 }],
              values: [{ value: 90, angle: 210, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "609": {
              color: "brown",
              cities: [
                {
                  size: 2,
                  name: { reverse: true, offset: 61, name: "Genova" },
                },
              ],
              labels: [{ label: "G", angle: 150, percent: 0.8 }],
              values: [{ value: 60, angle: 210, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "610": {
              color: "brown",
              track: [{ side: 1 }, { side: 4 }],
              cities: [{ pass: true }],
              values: [{ angle: 210, percent: 0.8, value: 0 }],
            },
            "611": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "616": {
              color: "brown",
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
              cities: [{ pass: true, size: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 0 }],
            },
            "617": {
              color: "brown",
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
              cities: [{ pass: true, size: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 0 }],
            },
            "618": {
              color: "brown",
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
              cities: [{ pass: true, size: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 0 }],
            },
            "623": {
              color: "brown",
              rotations: 1,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ angle: 150, percent: 0.8, label: "Y" }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "627": {
              color: "brown",
              track: [
                { type: "straight", side: 1 },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 2 },
                { type: "sharp", side: 3 },
              ],
            },
            "628": {
              color: "brown",
              track: [
                { type: "gentle", side: 2 },
                { type: "sharp", side: 4 },
                { type: "gentle", side: 5 },
                { type: "sharp", side: 1 },
              ],
            },
            "629": {
              color: "brown",
              track: [
                { type: "gentle", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 4 },
                { type: "gentle", side: 5 },
              ],
            },
            "646": {
              color: "brown",
              rotations: 2,
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 3,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 5,
                },
              ],
            },
            "647": {
              color: "brown",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 2,
                },
              ],
            },
            "648": {
              color: "brown",
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 2,
                },
              ],
            },
            "649": {
              color: "brown",
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 4,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 6,
                },
              ],
            },
            "652": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 130 }],
              labels: [{ label: "P", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5 },
              ],
            },
            "654": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 90 }],
              labels: [{ label: "C", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 3, gauge: "dual" },
                { side: 1 },
                { side: 5, gauge: "dual" },
                { side: 4 },
              ],
            },
            "656": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 80 }],
              labels: [{ label: "M", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 3 },
                { side: 4, gauge: "narrow" },
                { side: 5 },
                { side: 1, gauge: "dual" },
              ],
            },
            "672": {
              color: "brown",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "673": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
              ],
            },
            "674": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "676": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              labels: [{ label: "S", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3 },
              ],
            },
            "696": {
              color: "brown",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              centerTowns: [{}],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "697": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              centerTowns: [{}],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
              ],
            },
            "698": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              centerTowns: [{}],
              track: [
                { side: 1, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "764": {
              color: "brown",
              values: [{ value: 20 }],
              towns: [{ angle: 30, percent: 0.57735, rotation: -60 }],
              track: [{ type: "sharp", side: 1 }],
            },
            "765": {
              color: "brown",
              rotations: 3,
              values: [
                {
                  angle: 270,
                  percent: 0.5,
                  value: 20,
                },
              ],
              towns: [{}],
              track: [
                {
                  type: "straight",
                  side: 1,
                },
              ],
            },
            "766": {
              color: "brown",
              values: [
                {
                  angle: 240,
                  percent: 0.2,
                  value: 20,
                },
              ],
              towns: [
                {
                  angle: 60,
                  percent: 0.28,
                  rotate: -30,
                },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
              ],
            },
            "767": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "768": {
              color: "brown",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "769": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "770": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "771": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
              ],
            },
            "772": {
              color: "brown",
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              cities: [{}],
            },
            "773": {
              color: "brown",
              rotations: [60],
              values: [
                { angle: 150, percent: 0.825, value: 60 },
                { value: 20, angle: 25, percent: 0.75 },
              ],
              labels: [{ label: "N", angle: 270, percent: 0.8 }],
              cities: [
                { rotation: 330, size: 2, angle: 150, percent: 0.2 },
                { angle: 330, percent: 0.6 },
              ],
              track: [
                { side: 1, type: "mid", rotation: -30 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6, type: "sharp" },
              ],
            },
            "774": {
              color: "brown",
              rotations: [0],
              values: [
                { angle: 325, percent: 0.6, value: 50 },
                { angle: 215, percent: 0.6, value: 50 },
              ],
              labels: [{ label: "V", angle: 270, percent: 0.667 }],
              cities: [
                { angle: 150, percent: 0.5 },
                { angle: 30, percent: 0.5 },
              ],
              track: [
                { type: "sharpStopRev", side: 2 },
                { type: "sharpStop", side: 3 },
              ],
            },
            "775": {
              color: "brown",
              broken: true,
              rotations: [0],
              values: [
                { angle: 270, percent: 0.9, value: 20 },
                { angle: 213, percent: 0.8, value: 10 },
              ],
              labels: [{ label: "M", angle: 90, percent: 0.9 }],
              towns: [{ angle: 180, percent: 0.667 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "776": {
              color: "brown",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "777": {
              color: "brown",
              track: [
                {
                  side: 1,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 60,
                },
              ],
              cities: [{}],
            },
            "778": {
              color: "brown",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 6,
                  cross: "under",
                },
                {
                  type: "gentle",
                  side: 3,
                  cross: "under",
                },
              ],
            },
            "779": {
              color: "brown",
              track: [
                { type: "sharp", side: 5 },
                { type: "gentle", side: 2, cross: "under" },
                { type: "gentle", side: 1, cross: "over" },
              ],
            },
            "780": {
              color: "brown",
              rotations: 3,
              track: [
                { type: "sharp", side: 2 },
                { type: "sharp", side: 5 },
                { type: "straight", side: 1 },
              ],
            },
            "781": {
              color: "brown",
              rotations: 2,
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 5 },
              ],
            },
            "782": {
              color: "brown",
              broken: true,
              labels: [{ label: "£", angle: 205, percent: 0.78, fontSize: 30 }],
              values: [{ angle: 150, percent: 0.8, value: 20 }],
              towns: [
                { color: "halt", angle: 240, rotate: 60, percent: 0.667 },
              ],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "783": {
              color: "brown",
              broken: true,
              labels: [{ label: "£", angle: 95, percent: 0.78, fontSize: 30 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              towns: [
                { color: "halt", angle: 60, rotate: -120, percent: 0.667 },
              ],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "784": {
              color: "brown",
              broken: true,
              labels: [{ label: "£", angle: 147, percent: 0.78, fontSize: 30 }],
              values: [{ angle: 90, percent: 0.8, value: 20 }],
              towns: [{ color: "halt", angle: 180, percent: 0.667 }],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "785": {
              color: "brown",
              broken: true,
              labels: [{ label: "£", angle: 33, percent: 0.78, fontSize: 30 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              towns: [{ color: "halt", angle: 0, percent: 0.667 }],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "786": {
              color: "brown",
              rotations: [240],
              labels: [{ label: "R", angle: 150, percent: 0.8 }],
              track: [{ side: 5 }, { side: 6 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{}],
            },
            "789": {
              color: "brown",
              broken: true,
              rotations: [0],
              labels: [
                { label: "£", angle: 270, percent: 0.333, y: 50, fontSize: 30 },
                { label: "C", angle: 120, percent: 0.7 },
              ],
              values: [
                { angle: 240, percent: 0.7, value: 60 },
                { angle: 300, percent: 0.5, value: 20 },
              ],
              cities: [{ angle: 180, percent: 0.333 }],
              towns: [{ percent: 0.25 }],
              centerTowns: [{ color: "halt", percent: 0.667 }],
              track: [
                { side: 1 },
                {
                  type: "custom",
                  path: "m 0 85 C 0 50, 30 50, 45 25",
                  side: 2,
                  sides: [2],
                },
              ],
            },
            "794": {
              color: "brown",
              rotations: 1,
              values: [{ angle: 270, percent: 0.9, value: 80 }],
              labels: [{ label: "N", angle: 90, percent: 0.9 }],
              cities: [{ size: 4 }],
              track: [
                { type: "straight" },
                { type: "straight", side: 2 },
                { type: "straight", side: 3 },
              ],
            },
            "796": {
              color: "brown",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ type: "straight" }, { type: "straight", side: 2 }],
            },
            "798": {
              color: "brown",
              rotations: 1,
              track: [
                { type: "straight", cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "straight", side: 3, cross: "bottom" },
              ],
            },
            "801": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ angle: 150, percent: 0.8, label: "Y" }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "803": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "D", angle: 150, percent: 0.8 }],
              cities: [
                {
                  size: 2,
                  name: { name: "Denver", reverse: true, offset: 66.67 },
                },
              ],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "891Y": {
              color: "brown",
              rotations: 6,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "804": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "902": {
              color: "brown",
              values: [{ value: 50, angle: 210, percent: 0.8 }],
              labels: [{ label: "L", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "905": {
              color: "brown",
              values: [{ value: 50, angle: 210, percent: 0.8 }],
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "909": {
              color: "brown",
              values: [{ value: 50, angle: 210, percent: 0.8 }],
              labels: [{ label: "Z", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "911": {
              color: "brown",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "975": {
              color: "brown",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 4 },
                { gauge: "narrow", side: 5 },
              ],
            },
            "976": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 3 },
                { gauge: "narrow", side: 4 },
              ],
            },
            "977": {
              color: "brown",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 3 },
                { gauge: "narrow", side: 4 },
                { gauge: "narrow", side: 5 },
              ],
            },
            "978": {
              color: "brown",
              group: "offboard",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
              ],
            },
            "979": {
              color: "brown",
              group: "offboard",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
                { side: 5, gauge: "narrow" },
              ],
            },
            "980": {
              color: "brown",
              group: "offboard",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 6, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
              ],
            },
            "985": {
              color: "brown",
              group: "offboard",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
              ],
            },
            "986": {
              color: "brown",
              group: "offboard",
              values: [{ angle: 210, percent: 0.8, value: 80 }],
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
                { side: 5, gauge: "narrow" },
              ],
            },
            "987": {
              color: "brown",
              group: "offboard",
              labels: [
                { label: "HQG", fontSize: 14, angle: 150, percent: 0.8 },
              ],
              values: [{ angle: 210, percent: 0.8, value: 90 }],
              cities: [{ size: 2 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 3 },
                { side: 4 },
              ],
            },
          };
        },
        {},
      ],
      147: [
        function (require, module, exports) {
          module.exports = {
            "48": {
              color: "gray",
              values: [{ angle: 180, percent: 0.2, value: 100 }],
              names: [{ percent: 0.2, name: "London", fontSize: 12 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
            },
            "49": {
              color: "gray",
              labels: [{ label: "L", angle: 90, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 70 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "50": {
              color: "gray",
              labels: [{ label: "BGM", angle: 147.5, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 70 }],
              cities: [
                { percent: 0.55 },
                { angle: 90, percent: 0.6 },
                { angle: 270, percent: 0.6 },
              ],
              track: [
                { side: 1, type: "straight" },
                { side: 2, type: "sharp" },
                { side: 5, type: "sharp" },
              ],
            },
            "51": {
              color: "gray",
              cities: [{ size: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              track: [
                { type: "city", side: 1 },
                { type: "city", side: 2 },
                { type: "city", side: 3 },
                { type: "city", side: 4 },
                { type: "city", side: 5 },
              ],
            },
            "60": {
              color: "gray",
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "109": {
              color: "gray",
              values: [{ value: 50, angle: 210, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "110": {
              color: "gray",
              values: [{ value: 100, angle: 180, percent: 0.2 }],
              labels: [{ label: "CP", percent: 0.2 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
              track: [
                { side: 1, gauge: "dual", type: "stop" },
                { side: 2, gauge: "dual", type: "stop" },
                { side: 3, gauge: "dual", type: "stop" },
                { side: 4, gauge: "dual", type: "stop" },
                { side: 5, gauge: "dual", type: "stop" },
                { side: 6, gauge: "dual", type: "stop" },
              ],
            },
            "111": {
              color: "gray",
              values: [{ value: 70, angle: 210, percent: 0.8 }],
              labels: [{ label: "BM", fontSize: 18, angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
              ],
            },
            "112": {
              color: "gray",
              track: [
                { side: 1, gauge: "dual" },
                { side: 2, gauge: "dual" },
                { side: 3, gauge: "dual" },
                { side: 4, gauge: "dual" },
                { side: 5, gauge: "dual" },
              ],
            },
            "114": {
              color: "gray",
              track: [
                { side: 1, type: "gentle", cross: "over" },
                { side: 3, type: "gentle", cross: "over" },
                { side: 5, type: "gentle", cross: "over" },
                { side: 2, type: "gentle", cross: "under" },
                { side: 4, type: "gentle", cross: "under" },
                { side: 6, type: "gentle", cross: "under" },
              ],
            },
            "119": {
              color: "green/brown",
              group: "individual",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "123": {
              color: "gray",
              labels: [{ label: "H", angle: 90, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 100 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "124": {
              color: "gray",
              labels: [{ label: "T", angle: 90, percent: 0.9 }],
              values: [{ angle: 270, percent: 0.9, value: 100 }],
              cities: [{ size: 4 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "131": {
              color: "gray",
              values: [{ value: 100, angle: 270, percent: 0.9 }],
              labels: [{ label: "C", angle: 90, percent: 0.9 }],
              cities: [{ size: 4 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "134": {
              color: "gray",
              labels: [{ label: "M", angle: 90, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 100 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "136": {
              color: "gray",
              labels: [
                { label: "KC", angle: 150, percent: 0.8, fontSize: 18 },
                { label: "SL", angle: 90, percent: 0.87, fontSize: 18 },
                { label: "MSP", angle: 30, percent: 0.8, fontSize: 18 },
              ],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "166": {
              color: "brown/gray",
              group: "individual",
              values: [{ value: 40, angle: 210, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "167": {
              color: "gray",
              cities: [
                { angle: 150, percent: 0.65 },
                { angle: 30, percent: 0.65 },
              ],
              values: [
                { angle: 210, percent: 0.6, value: 70 },
                { angle: 330, percent: 0.6, value: 70 },
              ],
              track: [
                { side: 1, type: "sharp" },
                { side: 3, type: "sharp" },
                {
                  side: 5,
                  type: "custom",
                  path: "m 0 85 C 0 85, 0 0, -20 -20",
                  cross: "over",
                },
                {
                  side: 6,
                  type: "custom",
                  path: "m 0 85 C 0 85, 0 0, 20 -20",
                  cross: "under",
                },
              ],
            },
            "171": {
              color: "gray",
              rotations: 1,
              cities: [{ size: 3 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "172": {
              color: "gray",
              rotations: 1,
              cities: [
                {
                  size: 2,
                },
              ],
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 60,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
                {
                  side: 6,
                },
              ],
            },
            "240": {
              color: "gray",
              values: [{ angle: 210, percent: 0.8, value: 80 }],
              labels: [{ label: "K", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "232": {
              color: "gray",
              values: [{ value: 100, angle: 180, percent: 0.2 }],
              labels: [{ label: "C", percent: 0.2 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
              ],
              track: [
                { side: 1, type: "stop" },
                { side: 2, type: "stop" },
                { side: 3, type: "stop" },
                { side: 4, type: "stop" },
              ],
            },
            "290": {
              color: "gray",
              cities: [{ size: 3 }],
              values: [{ angle: 210, percent: 0.8, value: 70 }],
              labels: [{ label: "Z", angle: 90, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "300": {
              color: "gray",
              labels: [{ angle: 285, percent: 0.7, label: "Chi" }],
              values: [{ angle: 315, percent: 0.75, value: 90 }],
              cities: [
                { angle: 60, percent: 0.75 },
                { angle: 120, percent: 0.75 },
                { angle: 180, percent: 0.75 },
                { angle: 240, percent: 0.75 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "gentle", side: 1 },
                { type: "straight", side: 1 },
                { type: "gentle", side: 5 },
              ],
            },
            "446": {
              color: "gray",
              rotations: 1,
              values: [{ angle: 210, percent: 0.8, value: 70 }],
              labels: [{ label: "B", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "452": {
              color: "gray",
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
                { type: "gentle", side: 5 },
                { type: "gentle", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 4 },
              ],
            },
            "453": {
              color: "gray",
              rotations: 3,
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "gentle", side: 2 },
                { type: "gentle", side: 5 },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "454": {
              color: "gray",
              track: [
                { type: "straight", side: 1 },
                { type: "gentle", side: 2, cross: "under" },
                { type: "gentle", side: 1, cross: "over" },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 2 },
                { type: "sharp", side: 3 },
              ],
            },
            "455": {
              color: "gray",
              rotations: 1,
              cities: [{ size: 3 }],
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "513": {
              color: "gray",
              rotations: 1,
              cities: [{ size: 3 }],
              values: [{ angle: 210, percent: 0.82, value: 60 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "516": {
              color: "gray",
              values: [{ value: 120, angle: 180, percent: 0.2 }],
              labels: [{ label: "P", percent: 0.2 }],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
              track: [
                { type: "stop", side: 1 },
                { type: "stop", side: 2 },
                { type: "stop", side: 3 },
                { type: "stop", side: 4 },
                { type: "stop", side: 5 },
                { type: "stop", side: 6 },
              ],
            },
            "596": {
              color: "gray",
              rotations: 1,
              cities: [{ size: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
              labels: [{ angle: 150, percent: 0.8, label: "L" }],
            },
            "597": {
              color: "gray",
              values: [{ angle: 210, percent: 0.8, value: 80 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
              labels: [{ angle: 90, percent: 0.8, label: "B" }],
            },
            "639": {
              color: "gray",
              values: [{ angle: 270, percent: 0.9, value: 100 }],
              labels: [{ label: "M", angle: 90, percent: 0.9 }],
              cities: [
                { size: 4, companies: [{ label: "CN", color: "white" }] },
              ],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "805": {
              color: "gray",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 60,
                },
              ],
              labels: [
                {
                  label: "D",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                  name: {
                    name: "Denver",
                    reverse: true,
                    offset: 66.67,
                  },
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "806": {
              color: "gray",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  type: "city",
                  side: 1,
                },
                {
                  type: "city",
                  side: 6,
                },
                {
                  type: "city",
                  side: 4,
                },
              ],
            },
            "807": {
              color: "gray",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  type: "city",
                  side: 1,
                },
                {
                  type: "city",
                  side: 2,
                },
                {
                  type: "city",
                  side: 4,
                },
              ],
            },
            "808": {
              color: "gray",
              values: [{ angle: 210, percent: 0.8, value: 10 }],
              centerTowns: [{}],
              track: [
                { type: "city", side: 1 },
                { type: "city", side: 2 },
                { type: "city", side: 3 },
              ],
            },
            "895": {
              color: "gray",
              rotations: 1,
              cities: [{ size: 2, rotate: 180 }],
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "903": {
              color: "gray",
              values: [{ value: 60, angle: 210, percent: 0.8 }],
              labels: [{ label: "L", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "906": {
              color: "gray",
              values: [{ value: 60, angle: 210, percent: 0.8 }],
              labels: [{ label: "B", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "910": {
              color: "gray",
              values: [{ value: 60, angle: 270, percent: 0.9 }],
              labels: [{ label: "Z", angle: 90, percent: 0.9 }],
              cities: [{ size: 4 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "912": {
              color: "gray",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "915": {
              color: "gray",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "988": {
              color: "gray",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              cities: [{ size: 3 }],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 3 },
                { gauge: "narrow", side: 4 },
                { gauge: "narrow", side: 5 },
              ],
            },
            "989": {
              color: "gray",
              group: "offboard",
              values: [{ angle: 210, percent: 0.8, value: 70 }],
              cities: [{ size: 3 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 3 },
                { gauge: "narrow", side: 4 },
                { gauge: "narrow", side: 5 },
              ],
            },
            "990": {
              color: "gray",
              group: "offboard",
              rotations: 1,
              labels: [{ label: "B", angle: 90, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 100 }],
              cities: [{ size: 3 }],
              borders: [
                { side: 1, color: "offboard" },
                { side: 2, color: "offboard" },
                { side: 3, color: "offboard" },
                { side: 4, color: "offboard" },
                { side: 5, color: "offboard" },
                { side: 6, color: "offboard" },
              ],
              track: [
                { gauge: "narrow", side: 1 },
                { gauge: "narrow", side: 2 },
                { gauge: "narrow", side: 3 },
                { gauge: "narrow", side: 4 },
                { gauge: "narrow", side: 5 },
                { gauge: "narrow", side: 6 },
              ],
            },
            "1167": {
              color: "gray",
              rotations: [300],
              cities: [
                { angle: 150, percent: 0.65 },
                { angle: 30, percent: 0.65 },
              ],
              values: [
                { angle: 210, percent: 0.6, value: 70 },
                { angle: 330, percent: 0.6, value: 70 },
              ],
              track: [
                { side: 1, type: "sharp" },
                { side: 3, type: "sharp" },
                {
                  side: 5,
                  type: "custom",
                  path: "m 0 85 C 0 85, 0 0, -20 -20",
                  cross: "over",
                },
                {
                  side: 6,
                  type: "custom",
                  path: "m 0 85 C 0 85, 0 0, 20 -20",
                  cross: "under",
                },
              ],
            },
            "1168": {
              color: "gray",
              rotations: [180],
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              cities: [{ size: 3 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "1200": {
              color: "brown/gray",
              group: "individual",
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              cities: [{}],
              goods: [{ color: "black", width: 60 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 5 },
                { side: 6 },
              ],
            },
            "467": {
              color: "none",
              tunnelEntrances: [
                { angle: 0, rotation: 0, percent: 1 },
                { angle: 180, rotation: 180, percent: 1 },
              ],
              track: [
                { side: 1, type: "straight", gauge: "narrow", offset: 0.5 },
              ],
            },
            "468": {
              color: "none",
              tunnelEntrances: [
                { angle: 0, rotation: 0, percent: 1 },
                { angle: 120, rotation: 120, percent: 1 },
              ],
              track: [
                { side: 1, type: "gentle", gauge: "narrow", offset: -1.5 },
              ],
            },
            "469": {
              color: "none",
              tunnelEntrances: [
                { angle: 0, rotation: 0, percent: 1 },
                { angle: 60, rotation: 60, percent: 1 },
              ],
              track: [
                { side: 1, type: "sharp", gauge: "narrow", offset: -1.5 },
              ],
            },
          };
        },
        {},
      ],
      148: [
        function (require, module, exports) {
          module.exports = {
            "10": {
              color: "green",
              values: [
                {
                  angle: 275,
                  percent: 0.667,
                  value: 30,
                },
                {
                  angle: 95,
                  percent: 0.667,
                  value: 30,
                },
              ],
              cities: [
                {
                  angle: 30,
                  percent: 0.5,
                },
                {
                  angle: 210,
                  percent: 0.5,
                },
              ],
              track: [
                {
                  side: 1,
                  type: "sharpStop",
                },
                {
                  side: 4,
                  type: "sharpStop",
                },
              ],
            },
            "11": {
              color: "green",
              labels: [
                {
                  angle: 180,
                  percent: 0.8,
                  label: "HALT",
                },
              ],
              towns: [
                {
                  angle: 180,
                  percent: 0.275,
                  rotate: 90,
                },
              ],
              values: [
                {
                  angle: 300,
                  percent: 0.667,
                  value: 10,
                },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 3,
                },
                {
                  type: "gentle",
                  side: 5,
                },
              ],
            },
            "12": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "13": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "14": {
              color: "green",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
            },
            "15": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "16": {
              color: "green",
              track: [
                { type: "gentle", side: 1, cross: "over" },
                { type: "gentle", side: 2, cross: "under" },
              ],
            },
            "17": {
              color: "green",
              rotations: 3,
              track: [
                { type: "gentle", side: 2 },
                { type: "gentle", side: 5 },
              ],
            },
            "18": {
              color: "green",
              track: [
                { type: "straight", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "19": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 3,
                  cross: "under",
                },
              ],
            },
            "20": {
              color: "green",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  side: 1,
                  cross: "over",
                },
                {
                  type: "straight",
                  side: 2,
                  cross: "under",
                },
              ],
            },
            "21": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 4,
                },
              ],
            },
            "22": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 5,
                },
                {
                  type: "sharp",
                  side: 3,
                },
              ],
            },
            "23": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 5,
                },
              ],
            },
            "24": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 1,
                },
              ],
            },
            "25": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "gentle",
                  side: 5,
                },
              ],
            },
            "26": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 6,
                },
              ],
            },
            "27": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 1,
                },
              ],
            },
            "28": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 5,
                },
                {
                  type: "sharp",
                  side: 6,
                },
              ],
            },
            "29": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 1,
                },
              ],
            },
            "30": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 5,
                },
                {
                  type: "sharp",
                  side: 1,
                },
              ],
            },
            "31": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
                {
                  type: "sharp",
                  side: 6,
                },
              ],
            },
            "52": {
              color: "green",
              values: [
                { angle: 300, percent: 0.7, value: 40 },
                { angle: 180, percent: 0.7, value: 40 },
              ],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 120, percent: 0.5 },
              ],
              track: [
                { type: "stop", side: 1 },
                { type: "stop", side: 3 },
              ],
            },
            "53": {
              color: "green",
              rotations: 2,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 1,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 5,
                },
              ],
            },
            "53Y": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "54": {
              color: "green",
              values: [
                { angle: 325, percent: 0.6, value: 60 },
                { angle: 215, percent: 0.6, value: 60 },
              ],
              labels: [{ label: "NY", fontSize: 24, angle: 90, percent: 0.8 }],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 150, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "59": {
              color: "green",
              values: [
                { angle: 300, percent: 0.7, value: 40 },
                { angle: 180, percent: 0.7, value: 40 },
              ],
              labels: [{ angle: 240, percent: 0.5, label: "OO" }],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 120, percent: 0.5 },
              ],
              track: [
                { type: "stop", side: 1 },
                { type: "stop", side: 3 },
              ],
            },
            "80": {
              color: "green",
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "81": {
              color: "green",
              rotations: 2,
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "82": {
              color: "green",
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "83": {
              color: "green",
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "84": {
              color: "green",
              track: [
                { side: 1, type: "sharp", gauge: "narrow" },
                { side: 2, type: "sharp", gauge: "narrow" },
                { side: 1, type: "gentle", gauge: "narrow" },
              ],
            },
            "85": {
              color: "green",
              track: [
                { side: 4, type: "gentle", gauge: "narrow" },
                { side: 6, type: "sharp", gauge: "narrow" },
                { side: 1, type: "straight", gauge: "narrow" },
              ],
            },
            "86": {
              color: "green",
              track: [
                { side: 1, type: "sharp", gauge: "narrow" },
                { side: 2, type: "gentle", gauge: "narrow" },
                { side: 1, type: "straight", gauge: "narrow" },
              ],
            },
            "87": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "88": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
            },
            "89": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
                { side: 5, gauge: "narrow" },
              ],
            },
            "90": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
                {
                  side: 6,
                },
              ],
            },
            "91": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 6,
                },
              ],
            },
            "92": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
                {
                  side: 6,
                },
              ],
            },
            "93": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
                {
                  side: 6,
                },
              ],
            },
            "94": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "95": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "96": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "97": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "98": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
              ],
            },
            "99": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "100": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
              ],
            },
            "101": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
                { side: 5, gauge: "narrow" },
              ],
            },
            "116": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
              ],
            },
            "117": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
              ],
            },
            "120": {
              color: "green",
              values: [
                { angle: 325, percent: 0.6, value: 60 },
                { angle: 215, percent: 0.6, value: 60 },
              ],
              labels: [{ label: "T", angle: 90, percent: 0.8 }],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 150, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "121": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "B-L", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "129": {
              color: "green",
              values: [
                { angle: 270, percent: 0.8, value: 60 },
                { angle: 210, percent: 0.8, value: 60 },
              ],
              labels: [{ label: "C", angle: 90, percent: 0.8 }],
              cities: [
                { size: 2, angle: 0, percent: 0.4 },
                { angle: 150, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "141": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 4 }, { side: 2 }],
            },
            "142": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "143": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "144": {
              color: "green",
              rotations: 2,
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "190": {
              color: "green",
              rotations: 2,
              values: [{ angle: 270, percent: 0.9, value: 40 }],
              labels: [{ angle: 90, percent: 0.9, label: "A" }],
              cities: [
                { angle: 240, percent: 0.55 },
                { percent: 0.55 },
                { angle: 120, percent: 0.55 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "straight", side: 3, cross: "bottom" },
              ],
            },
            "203": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "204": {
              color: "green",
              centerTowns: [{}],
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "205": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "206": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "207": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "208": {
              color: "green",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
            },
            "233": {
              color: "green",
              track: [{ side: 1, type: "straight", gauge: "dual" }],
            },
            "234": {
              color: "green",
              track: [{ side: 1, type: "sharp", gauge: "dual" }],
            },
            "236": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "K", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "237": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "K", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "238": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "K", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "294": {
              color: "green",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }, { side: 5 }],
            },
            "295": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "296": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "298": {
              color: "green",
              labels: [{ angle: 285, percent: 0.7, label: "Chi" }],
              values: [{ angle: 315, percent: 0.75, value: 40 }],
              cities: [
                { angle: 60, percent: 0.75 },
                { angle: 120, percent: 0.75 },
                {
                  angle: 180,
                  percent: 0.75,
                  companies: [{ label: "C&WI", color: "white" }],
                },
                { angle: 240, percent: 0.75 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "gentle", side: 1 },
                { type: "straight", side: 1 },
                { type: "gentle", side: 5 },
              ],
            },
            "439": {
              color: "green",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              terrain: [{ angle: 30, percent: 0.8, cost: 80, size: "tiny" }],
              labels: [{ label: "H", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "440": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "T", angle: 150, percent: 0.8 }],
              cities: [{ size: 2, companies: ["KO"] }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "441": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "442": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "443": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "444": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "442a": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              labels: [{ angle: 150, percent: 0.8, label: "B" }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "443a": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              cities: [{ size: 2 }],
              labels: [{ angle: 150, percent: 0.8, label: "M" }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "457": {
              color: "green",
              cities: [{ percent: 0.5 }, { percent: 0.5, angle: 180 }],
              values: [
                { angle: 300, percent: 0.7, value: 20 },
                { angle: 240, percent: 0.7, value: 20 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "gentle", side: 2, cross: "under" },
                { type: "gentle", side: 1, cross: "over" },
                { type: "sharp", side: 3 },
              ],
            },
            "458": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 60 },
                { percent: 0.6, angle: 180 },
              ],
              values: [
                { angle: 270, percent: 0.65, value: 20 },
                { angle: 330, percent: 0.65, value: 20 },
              ],
              track: [
                { type: "straight", side: 2, cross: "under" },
                { type: "straight", side: 1, cross: "over" },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "459": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 0 },
                { percent: 0.6, angle: 240 },
              ],
              values: [
                { angle: 90, percent: 0.65, value: 20 },
                { angle: 150, percent: 0.65, value: 20 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "sharp", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "460": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 255 },
                { percent: 0.6, angle: 165 },
              ],
              values: [
                { angle: 110, percent: 0.7, value: 20 },
                { angle: 310, percent: 0.7, value: 20 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
                { type: "gentle", side: 5 },
                { type: "gentle", side: 2 },
              ],
            },
            "461": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 195, y: 10 },
                { percent: 0.75, angle: 120 },
              ],
              values: [
                { value: 20, angle: 270, percent: 0.7 },
                { value: 20, angle: 30, percent: 0.8 },
              ],
              track: [
                { type: "straight", side: 1 },
                { type: "gentle", side: 1, cross: "over" },
                { type: "gentle", side: 2, cross: "under" },
                { type: "sharp", side: 2 },
              ],
            },
            "462": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 345, y: -10 },
                { percent: 0.75, angle: 60 },
              ],
              values: [
                { value: 20, angle: 270, percent: 0.7 },
                { value: 20, angle: 150, percent: 0.8 },
              ],
              track: [
                { type: "straight", side: 1 },
                { type: "gentle", side: 2, cross: "under" },
                { type: "gentle", side: 1, cross: "over" },
                { type: "sharp", side: 2 },
              ],
            },
            "463": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 0 },
                { percent: 0.6, angle: 120 },
              ],
              values: [
                { value: 20, angle: 60, percent: 0.7 },
                { value: 20, angle: 210, percent: 0.8 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
                { type: "gentle", side: 5 },
                { type: "sharp", side: 3 },
              ],
            },
            "464": {
              color: "green",
              cities: [
                { percent: 0.6, angle: 0 },
                { percent: 0.6, angle: 240 },
              ],
              values: [
                { value: 20, angle: 300, percent: 0.7 },
                { value: 20, angle: 150, percent: 0.8 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
                { type: "gentle", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "474": {
              color: "green",
              values: [{ value: 10, angle: 210, percent: 0.8 }],
              centerTowns: [{}],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "514": {
              color: "green",
              values: [{ value: 70, angle: 180, percent: 0.2 }],
              labels: [{ label: "P", percent: 0.2 }],
              track: [
                { side: 1, type: "stop" },
                { side: 2, type: "stop" },
                { side: 3, type: "stop" },
                { side: 4, type: "stop" },
                { side: 5, type: "stop" },
                { side: 6, type: "stop" },
              ],
              cities: [
                { percent: 0.8 },
                { angle: 60, percent: 0.8 },
                { angle: 120, percent: 0.8 },
                { angle: 180, percent: 0.8 },
                { angle: 240, percent: 0.8 },
                { angle: 300, percent: 0.8 },
              ],
            },
            "576": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 4 }, { side: 2 }],
            },
            "577": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "578": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "579": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "580": {
              color: "green",
              values: [
                { angle: 325, percent: 0.6, value: 60 },
                { angle: 215, percent: 0.6, value: 60 },
              ],
              labels: [{ label: "P", angle: 90, percent: 0.8 }],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 150, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "581": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "B-V", angle: 90, percent: 0.8 }],
              cities: [
                { angle: 270, percent: 0.5 },
                { angle: 30, percent: 0.5 },
                { angle: 150, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 5 },
              ],
            },
            "590": {
              color: "green",
              values: [
                { angle: 325, percent: 0.6, value: 60 },
                { angle: 285, percent: 0.5, value: 60 },
              ],
              labels: [{ label: "Chi", fontSize: 20, angle: 90, percent: 0.8 }],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 180, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
                { type: "sharp", side: 4 },
              ],
            },
            "592": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ angle: 150, percent: 0.8, label: "B" }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "602": {
              color: "green",
              cities: [{ name: { offset: 16, name: "Venezia" } }],
              towns: [{ angle: 240, percent: 0.667, rotation: 60 }],
              values: [
                { value: 30, angle: 280, percent: 0.75 },
                { value: 10, angle: 150, percent: 0.8 },
              ],
              labels: [{ label: "V", angle: 90, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "604": {
              color: "green",
              cities: [
                {
                  size: 2,
                  name: { offset: 40, reverse: true, name: "Milano" },
                },
              ],
              labels: [{ label: "M", angle: 150, percent: 0.8 }],
              values: [{ value: 100, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "606": {
              color: "green",
              cities: [
                {
                  size: 2,
                  name: { offset: 60, reverse: true, name: "Torino" },
                },
              ],
              labels: [{ label: "T", angle: 150, percent: 0.8 }],
              values: [{ value: 60, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "612": {
              color: "green",
              cities: [{ name: { offset: 75, name: "Genova" } }],
              labels: [{ label: "G", angle: 150, percent: 0.8 }],
              values: [{ value: 40, angle: 210, percent: 0.8 }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }, { side: 4 }],
            },
            "613": {
              color: "green",
              track: [{ side: 1 }, { side: 4 }],
              cities: [{ pass: true }],
              values: [{ angle: 210, percent: 0.75, value: 0 }],
            },
            "614": {
              color: "green",
              track: [{ side: 1 }, { side: 3 }],
              cities: [{ pass: true }],
              values: [{ angle: 210, percent: 0.75, value: 0 }],
            },
            "615": {
              color: "green",
              track: [{ side: 1 }, { side: 2 }],
              cities: [{ pass: true }],
              values: [{ angle: 210, percent: 0.75, value: 0 }],
            },
            "619": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "622": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
            "624": {
              color: "green",
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "625": {
              color: "green",
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "626": {
              color: "green",
              rotations: 3,
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "637": {
              color: "green",
              rotations: 6,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ angle: 90, percent: 0.8, label: "M" }],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 150, percent: 0.5 },
                { angle: 270, percent: 0.5 },
              ],
              track: [
                { type: "sharp", side: 1, cross: "over" },
                { type: "sharp", side: 5, cross: "under" },
                { type: "sharp", side: 3, cross: "under" },
              ],
            },
            "650": {
              color: "green",
              track: [
                { type: "sharp", side: 1, gauge: "narrow" },
                { type: "sharp", side: 2, gauge: "narrow" },
              ],
            },
            "651": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 90 }],
              labels: [{ label: "P", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [
                { side: 2, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
                { side: 4 },
                { side: 5 },
                { side: 1 },
              ],
            },
            "653": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "C", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2, gauge: "narrow" }, { side: 4 }],
            },
            "655": {
              color: "green",
              rotations: 2,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "M", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "660": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "661": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
              ],
            },
            "662": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "663": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  type: "city",
                  side: 1,
                  gauge: "narrow",
                },
                {
                  type: "city",
                  side: 2,
                },
                {
                  type: "city",
                  side: 4,
                },
                {
                  type: "city",
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "664": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "665": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "666": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "667": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "668": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 4,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "669": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 3,
                },
                {
                  side: 5,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "670": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "671": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 4,
                },
                {
                  side: 5,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
              ],
            },
            "675": {
              color: "green",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              labels: [{ label: "S", angle: 150, percent: 0.8 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 2, gauge: "narrow" }, { side: 3 }],
            },
            "677": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                  gauge: "narrow",
                },
                {
                  type: "gentle",
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "678": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                  gauge: "narrow",
                },
                {
                  type: "gentle",
                  side: 1,
                  gauge: "narrow",
                },
              ],
            },
            "680": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "681": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "682": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "683": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "684": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 4,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
              ],
            },
            "685": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 3,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "686": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 3,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
              ],
            },
            "687": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "688": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 2,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "689": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 5,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "690": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 4,
                },
              ],
            },
            "691": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 2,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                },
              ],
            },
            "692": {
              color: "green",
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 6,
                },
              ],
            },
            "693": {
              color: "green",
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 1,
                },
              ],
            },
            "694": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 5,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 6,
                },
              ],
            },
            "695": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 1,
                },
              ],
            },
            "699": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                  gauge: "narrow",
                },
                {
                  type: "gentle",
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "700": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 1,
                },
                {
                  side: 3,
                },
              ],
            },
            "701": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 1,
                },
                {
                  side: 2,
                },
              ],
            },
            "702": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 1,
                },
                {
                  side: 5,
                },
              ],
            },
            "703": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 10,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
                {
                  side: 1,
                },
                {
                  side: 3,
                },
              ],
            },
            "704": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "705": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 5,
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
              ],
            },
            "706": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
              ],
            },
            "707": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
              ],
            },
            "708": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 5,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 1,
                },
              ],
            },
            "709": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  side: 1,
                },
                {
                  type: "sharp",
                  gauge: "narrow",
                  side: 6,
                },
              ],
            },
            "710": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  gauge: "narrow",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "gentle",
                  cross: "under",
                  side: 2,
                },
              ],
            },
            "711": {
              color: "green",
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "gentle",
                  cross: "under",
                  side: 3,
                },
              ],
            },
            "712": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  cross: "under",
                  side: 2,
                },
              ],
            },
            "713": {
              color: "green",
              track: [
                {
                  type: "straight",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "gentle",
                  gauge: "narrow",
                  cross: "under",
                  side: 3,
                },
              ],
            },
            "714": {
              color: "green",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "straight",
                  gauge: "narrow",
                  cross: "under",
                  side: 2,
                },
              ],
            },
            "715": {
              color: "green",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  gauge: "narrow",
                  cross: "over",
                  side: 1,
                },
                {
                  type: "straight",
                  cross: "under",
                  side: 2,
                },
              ],
            },
            "747": {
              color: "green",
              values: [
                {
                  value: 10,
                },
              ],
              towns: [
                {
                  angle: 30,
                  percent: 0.57735,
                  rotation: -60,
                },
              ],
              track: [
                {
                  type: "sharp",
                  side: 1,
                },
              ],
            },
            "748": {
              color: "green",
              values: [
                {
                  angle: 240,
                  percent: 0.2,
                  value: 10,
                },
              ],
              towns: [
                {
                  angle: 60,
                  percent: 0.28,
                  rotate: -30,
                },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
              ],
            },
            "750": {
              color: "green",
              labels: [{ label: "£", angle: 210, percent: 0.8, fontSize: 30 }],
              centerTowns: [{ color: "halt" }],
              track: [{ side: 1 }, { side: 2 }, { side: 3 }],
            },
            "751": {
              color: "green",
              labels: [{ label: "£", angle: 210, percent: 0.8, fontSize: 30 }],
              centerTowns: [{ color: "halt" }],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "752": {
              color: "green",
              labels: [{ label: "£", angle: 210, percent: 0.8, fontSize: 30 }],
              centerTowns: [{ color: "halt" }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "753": {
              color: "green",
              rotations: 2,
              labels: [{ label: "£", angle: 210, percent: 0.8, fontSize: 30 }],
              centerTowns: [{ color: "halt" }],
              track: [{ side: 1 }, { side: 3 }, { side: 5 }],
            },
            "754": {
              color: "green",
              broken: true,
              labels: [
                {
                  label: "£",
                  angle: 90,
                  percent: 0.45,
                  y: -37.5,
                  fontSize: 30,
                },
              ],
              values: [{ value: 10, angle: 90, percent: 0.5 }],
              towns: [{ color: "halt", angle: 180, percent: 0.5 }],
              centerTowns: [{}],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "755": {
              color: "green",
              broken: true,
              labels: [
                {
                  label: "£",
                  angle: 270,
                  percent: 0.45,
                  y: -37.5,
                  fontSize: 30,
                },
              ],
              values: [{ value: 10, angle: 270, percent: 0.5 }],
              towns: [{ color: "halt", angle: 180, percent: 0.5 }],
              centerTowns: [{}],
              track: [{ side: 1 }, { side: 4 }, { side: 2 }],
            },
            "756": {
              color: "green",
              track: [{ side: 1 }, { side: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              cities: [{}],
            },
            "757": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 1,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "758": {
              color: "green",
              labels: [{ label: "R", angle: 150, percent: 0.8 }],
              track: [{ side: 5 }, { side: 6 }],
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              cities: [{}],
            },
            "759": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                },
              ],
            },
            "760": {
              color: "green",
              values: [
                { angle: 325, percent: 0.6, value: 40 },
                { angle: 215, percent: 0.6, value: 40 },
              ],
              labels: [{ label: "V", angle: 270, percent: 0.667 }],
              cities: [
                { angle: 150, percent: 0.5 },
                { angle: 30, percent: 0.5 },
              ],
              track: [
                { type: "sharpStopRev", side: 2 },
                { type: "sharpStop", side: 3 },
              ],
            },
            "761": {
              color: "green",
              broken: true,
              labels: [
                { label: "£", angle: 90, percent: 0.45, y: -50, fontSize: 30 },
                { label: "M", angle: 90, percent: 0.8 },
              ],
              values: [{ angle: 270, percent: 0.8, value: 20 }],
              towns: [{ color: "halt", angle: 180, percent: 0.667 }],
              cities: [{}],
              track: [{ side: 1 }, { side: 5 }, { side: 6 }, { side: 4 }],
            },
            "762": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 1,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "763": {
              color: "green",
              values: [
                { angle: 210, percent: 0.8, value: 50 },
                { value: 30, angle: 300, percent: 0.667 },
              ],
              labels: [{ label: "N", angle: 150, percent: 0.8 }],
              cities: [
                { angle: 150, percent: 0.2 },
                { angle: 0, percent: 0.6 },
              ],
              track: [
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
                { side: 1, type: "stop" },
              ],
            },
            "788": {
              color: "green",
              broken: true,
              rotations: [0],
              labels: [
                {
                  label: "£",
                  angle: 270,
                  percent: 0.333,
                  y: 50,
                  fontSize: 30,
                },
                {
                  label: "C",
                  angle: 120,
                  percent: 0.7,
                },
              ],
              values: [
                {
                  angle: 240,
                  percent: 0.7,
                  value: 30,
                },
                {
                  angle: 300,
                  percent: 0.5,
                  value: 10,
                },
              ],
              cities: [
                {
                  angle: 180,
                  percent: 0.333,
                },
              ],
              towns: [
                {
                  percent: 0.25,
                },
              ],
              centerTowns: [
                {
                  color: "halt",
                  percent: 0.667,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  type: "custom",
                  path: "m 0 85 C 0 50, 30 50, 45 25",
                  side: 2,
                  sides: [2],
                },
              ],
            },
            "791": {
              color: "green",
              rotations: 6,
              values: [{ angle: 210, percent: 0.8, value: 60 }],
              labels: [{ label: "N", angle: 90, percent: 0.8 }],
              cities: [{ size: 3 }],
              track: [
                { side: 1 },
                { side: 2 },
                { side: 3 },
                { side: 4 },
                { side: 5 },
              ],
            },
            "792": {
              color: "green",
              rotations: 6,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 50,
                },
              ],
              labels: [
                {
                  label: "Y",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [{ side: 1 }, { side: 6 }, { side: 4 }],
            },
            "793": {
              color: "green",
              rotations: 6,
              values: [{ angle: 210, percent: 0.8, value: 50 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ side: 1 }, { side: 2 }, { side: 4 }],
            },
            "800": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              labels: [
                {
                  label: "D&SL",
                  angle: 270,
                  percent: 0.575,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
              ],
            },
            "802": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              labels: [
                {
                  label: "D",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                  name: {
                    name: "Denver",
                    reverse: true,
                    offset: 66.67,
                  },
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "887": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 1,
                },
                {
                  side: 3,
                },
              ],
            },
            "888": {
              color: "green",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 20,
                },
              ],
              centerTowns: [{}],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "901": {
              color: "green",
              values: [
                {
                  value: 40,
                  angle: 270,
                  percent: 0.25,
                },
              ],
              cities: [
                {
                  angle: 30,
                  percent: 0.5,
                },
                {
                  angle: 150,
                  percent: 0.5,
                },
              ],
              track: [
                {
                  side: 1,
                  type: "sharp",
                },
                {
                  side: 3,
                  type: "sharp",
                },
              ],
            },
            "904": {
              color: "green",
              values: [
                {
                  value: 40,
                  angle: 210,
                  percent: 0.8,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 3,
                },
                {
                  side: 4,
                },
                {
                  side: 5,
                },
              ],
            },
            "907": {
              color: "green",
              values: [
                {
                  value: 40,
                  angle: 210,
                  percent: 0.8,
                },
              ],
              labels: [
                {
                  label: "Z",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 6,
                },
                {
                  side: 4,
                },
              ],
            },
            "908": {
              color: "green",
              values: [
                {
                  value: 40,
                  angle: 210,
                  percent: 0.8,
                },
              ],
              labels: [
                {
                  label: "Z",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              track: [
                {
                  side: 1,
                },
                {
                  side: 2,
                },
                {
                  side: 4,
                },
              ],
            },
            "957": {
              color: "green",
              track: [
                {
                  type: "gentle",
                  side: 1,
                  gauge: "narrow",
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 2,
                  gauge: "narrow",
                  cross: "under",
                },
              ],
            },
            "958": {
              color: "green",
              track: [
                { type: "gentle", side: 2, gauge: "narrow" },
                { type: "gentle", side: 5, gauge: "narrow" },
              ],
            },
            "959": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                  gauge: "narrow",
                },
                {
                  type: "sharp",
                  side: 2,
                  gauge: "narrow",
                },
              ],
            },
            "960": {
              color: "green",
              track: [
                {
                  type: "straight",
                  side: 1,
                  gauge: "narrow",
                  cross: "over",
                },
                {
                  type: "gentle",
                  side: 3,
                  gauge: "narrow",
                  cross: "under",
                },
              ],
            },
            "961": {
              color: "green",
              rotations: 3,
              track: [
                {
                  type: "straight",
                  side: 1,
                  gauge: "narrow",
                  cross: "over",
                },
                {
                  type: "straight",
                  side: 2,
                  gauge: "narrow",
                  cross: "under",
                },
              ],
            },
            "962": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 6,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "963": {
              color: "green",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 30,
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "964": {
              color: "green",
              rotations: 3,
              values: [
                { angle: 275, percent: 0.667, value: 20 },
                { angle: 95, percent: 0.667, value: 20 },
              ],
              cities: [
                { angle: 30, percent: 0.5 },
                { angle: 210, percent: 0.5 },
              ],
              track: [
                { type: "sharp", gauge: "narrow", side: 1 },
                { type: "sharp", gauge: "narrow", side: 4 },
              ],
            },
            "965": {
              color: "green",
              rotations: 3,
              values: [
                { angle: 120, percent: 0.7, value: 20 },
                { angle: 300, percent: 0.7, value: 20 },
              ],
              cities: [{ percent: 0.5 }, { angle: 180, percent: 0.5 }],
              track: [
                { type: "gentle", gauge: "narrow", side: 2 },
                { type: "gentle", gauge: "narrow", side: 5 },
              ],
            },
            "966": {
              color: "green",
              values: [
                { angle: 240, percent: 0.7, value: 20 },
                { angle: 300, percent: 0.7, value: 20 },
              ],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 180, percent: 0.5 },
              ],
              track: [
                { type: "gentle", gauge: "narrow", cross: "over", side: 1 },
                { type: "gentle", gauge: "narrow", cross: "under", side: 2 },
              ],
            },
            "967": {
              color: "green",
              values: [
                { angle: 60, percent: 0.7, value: 20 },
                { angle: 150, percent: 0.8, value: 20 },
              ],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 210, percent: 0.5 },
              ],
              track: [
                { type: "gentle", gauge: "narrow", side: 1 },
                { type: "sharp", gauge: "narrow", side: 4 },
              ],
            },
            "968": {
              color: "green",
              values: [
                { angle: 300, percent: 0.68, value: 20 },
                { angle: 150, percent: 0.68, value: 20 },
              ],
              cities: [{ angle: 90, percent: 0.6 }, { percent: 0.575 }],
              track: [
                { type: "straight", gauge: "narrow", side: 1 },
                { type: "sharp", gauge: "narrow", side: 2 },
              ],
            },
            "969": {
              color: "green",
              values: [
                { angle: 60, percent: 0.7, value: 20 },
                { angle: 210, percent: 0.8, value: 20 },
              ],
              cities: [
                { angle: 120, percent: 0.6 },
                { angle: 0, percent: 0.575 },
              ],
              track: [
                { type: "straight", gauge: "narrow", cross: "over", side: 1 },
                { type: "gentle", gauge: "narrow", cross: "under", side: 3 },
              ],
            },
            "970": {
              color: "green",
              rotations: 3,
              values: [
                { angle: 150, percent: 0.7, value: 20 },
                { angle: 90, percent: 0.7, value: 20 },
              ],
              cities: [{ percent: 0.575 }, { angle: 240, percent: 0.575 }],
              track: [
                { type: "straight", gauge: "narrow", cross: "over", side: 1 },
                { type: "straight", gauge: "narrow", cross: "under", side: 2 },
              ],
            },
            "971": {
              color: "green",
              group: "offboard",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              borders: [
                {
                  side: 1,
                  color: "offboard",
                },
                {
                  side: 2,
                  color: "offboard",
                },
                {
                  side: 3,
                  color: "offboard",
                },
                {
                  side: 4,
                  color: "offboard",
                },
                {
                  side: 5,
                  color: "offboard",
                },
                {
                  side: 6,
                  color: "offboard",
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 2,
                  gauge: "narrow",
                },
              ],
            },
            "972": {
              color: "green",
              group: "offboard",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              borders: [
                {
                  side: 1,
                  color: "offboard",
                },
                {
                  side: 2,
                  color: "offboard",
                },
                {
                  side: 3,
                  color: "offboard",
                },
                {
                  side: 4,
                  color: "offboard",
                },
                {
                  side: 5,
                  color: "offboard",
                },
                {
                  side: 6,
                  color: "offboard",
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
              ],
            },
            "973": {
              color: "green",
              group: "offboard",
              rotations: 3,
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 40,
                },
              ],
              borders: [
                {
                  side: 1,
                  color: "offboard",
                },
                {
                  side: 2,
                  color: "offboard",
                },
                {
                  side: 3,
                  color: "offboard",
                },
                {
                  side: 4,
                  color: "offboard",
                },
                {
                  side: 5,
                  color: "offboard",
                },
                {
                  side: 6,
                  color: "offboard",
                },
              ],
              cities: [{}],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
              ],
            },
            "974": {
              color: "green",
              group: "offboard",
              values: [
                {
                  angle: 210,
                  percent: 0.8,
                  value: 60,
                },
              ],
              labels: [
                {
                  label: "B",
                  angle: 150,
                  percent: 0.8,
                },
              ],
              cities: [
                {
                  size: 2,
                },
              ],
              borders: [
                {
                  side: 1,
                  color: "offboard",
                },
                {
                  side: 2,
                  color: "offboard",
                },
                {
                  side: 3,
                  color: "offboard",
                },
                {
                  side: 4,
                  color: "offboard",
                },
                {
                  side: 5,
                  color: "offboard",
                },
                {
                  side: 6,
                  color: "offboard",
                },
              ],
              track: [
                {
                  side: 1,
                  gauge: "narrow",
                },
                {
                  side: 3,
                  gauge: "narrow",
                },
                {
                  side: 4,
                  gauge: "narrow",
                },
                {
                  side: 5,
                  gauge: "narrow",
                },
              ],
            },
            "981": {
              color: "green",
              values: [
                { angle: 150, percent: 0.8, x: -5, value: 10 },
                { angle: 210, percent: 0.8, x: 5, value: 10 },
              ],
              towns: [
                { angle: 180, percent: 0.667 },
                {
                  x: -129.90375,
                  y: 75,
                  rotate: -45,
                  angle: 225,
                  percent: 1.7216875,
                },
              ],
              track: [
                { side: 1, type: "straight" },
                { side: 1, type: "gentle" },
              ],
            },
            "991": {
              color: "green",
              values: [
                { angle: 210, percent: 0.8, x: 5, value: 10 },
                { angle: 150, percent: 0.8, x: -5, value: 10 },
              ],
              towns: [
                { angle: 180, percent: 0.667 },
                {
                  x: 129.90375,
                  y: 75,
                  rotate: 45,
                  angle: 135,
                  percent: 1.7216875,
                },
              ],
              track: [
                { side: 1, type: "straight" },
                { side: 5, type: "gentle" },
              ],
            },
            "802|3": {
              color: "green",
              broken: true,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "D", angle: 150, percent: 0.8 }],
              cities: [
                {
                  size: 2,
                  companies: [{}, { label: "C&W", color: "blue" }],
                  name: { name: "Denver", reverse: true, offset: 66.67 },
                },
              ],
              track: [{ side: 1 }, { side: 3 }, { side: 4 }, { side: 5 }],
            },
          };
        },
        {},
      ],
      149: [
        function (require, module, exports) {
          const yellow = require("./yellow"),
            green = require("./green"),
            brown = require("./brown"),
            gray = require("./gray"),
            assoc = require("ramda/src/assoc"),
            clone = require("ramda/src/clone"),
            mapObjIndexed = require("ramda/src/mapObjIndexed"),
            forEach = require("ramda/src/forEach"),
            forEachObjIndexed = require("ramda/src/forEachObjIndexed");
          let aliases = {};
          const gatherAliases = (e) => {
            forEachObjIndexed((e, r) => {
              forEach((r) => {
                aliases[r] = clone(e);
              }, e.aliases || []);
            }, e);
          };
          gatherAliases(yellow),
            gatherAliases(green),
            gatherAliases(brown),
            gatherAliases(gray);
          const allTiles = {
            ...yellow,
            ...green,
            ...brown,
            ...gray,
            ...aliases,
          };
          module.exports = mapObjIndexed((e, r) => assoc("id", r, e), allTiles);
        },
        {
          "./brown": 146,
          "./gray": 147,
          "./green": 148,
          "./yellow": 150,
          "ramda/src/assoc": 122,
          "ramda/src/clone": 124,
          "ramda/src/forEach": 125,
          "ramda/src/forEachObjIndexed": 126,
          "ramda/src/mapObjIndexed": 143,
        },
      ],
      150: [
        function (require, module, exports) {
          module.exports = {
            "1": {
              color: "yellow",
              values: [
                { value: 10, angle: 120, percent: 0.667 },
                { value: 10, angle: 300, percent: 0.667 },
              ],
              towns: [
                {
                  x: -129.90375,
                  y: -75,
                  rotate: 15,
                  angle: 285,
                  percent: 1.73,
                },
                { x: 129.90375, y: 75, rotate: 15, angle: 105, percent: 1.73 },
              ],
              track: [
                { type: "gentle", side: 2 },
                { type: "gentle", side: 5 },
              ],
            },
            "2": {
              color: "yellow",
              values: [
                { angle: 320, percent: 0.667, value: 10 },
                { angle: 145, percent: 0.667, value: 10 },
              ],
              towns: [{ percent: 0.667 }, { angle: 90, percent: 0.57735 }],
              track: [
                { type: "straight", side: 1 },
                { type: "sharp", side: 2 },
              ],
            },
            "3": {
              color: "yellow",
              values: [{ value: 10 }],
              towns: [{ angle: 30, percent: 0.57735, rotation: -60 }],
              track: [{ type: "sharp", side: 1 }],
            },
            "4": {
              color: "yellow",
              rotations: 3,
              values: [{ x: 35, value: 10 }],
              towns: [{}],
              track: [{ type: "straight", side: 1 }],
            },
            "5": {
              color: "yellow",
              rotations: 6,
              track: [{ side: 1 }, { side: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "6": {
              color: "yellow",
              track: [{ side: 1 }, { side: 3 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "7": {
              color: "yellow",
              track: [{ type: "sharp", side: 1 }],
            },
            "8": {
              color: "yellow",
              track: [{ type: "gentle", side: 1 }],
            },
            "9": {
              color: "yellow",
              rotations: 3,
              track: [{ type: "straight", side: 1 }],
            },
            "55": {
              color: "yellow",
              values: [
                { value: 10, percent: 0.667, x: -35 },
                { value: 10, angle: 205, percent: 0.8 },
              ],
              towns: [
                { percent: 0.667 },
                { angle: 240, percent: 0.667, rotation: 60 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "straight", side: 2, cross: "under" },
              ],
            },
            "56": {
              color: "yellow",
              values: [
                { x: -129.90375, y: 75, angle: 255, percent: 2.2, value: 10 },
                { x: -129.90375, y: -75, angle: 285, percent: 2.2, value: 10 },
              ],
              towns: [
                {
                  x: -129.90375,
                  y: 75,
                  angle: 255,
                  percent: 1.7216875,
                  rotate: -15,
                },
                {
                  x: -129.90375,
                  y: -75,
                  angle: 285,
                  percent: 1.7216875,
                  rotate: 15,
                },
              ],
              track: [
                { type: "gentle", side: 1, cross: "over" },
                { type: "gentle", side: 2, cross: "under" },
              ],
            },
            "57": {
              color: "yellow",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [{ type: "straight" }],
            },
            "58": {
              color: "yellow",
              values: [{ angle: 240, percent: 0.2, value: 10 }],
              towns: [{ angle: 60, percent: 0.28, rotate: -30 }],
              track: [{ type: "gentle", side: 1 }],
            },
            "69": {
              color: "yellow",
              values: [
                { angle: 320, percent: 0.667, value: 10 },
                { y: -150, angle: 15, percent: 2.2, value: 10 },
              ],
              towns: [
                { percent: 0.667 },
                { y: -150, angle: 15, percent: 1.7216875, rotate: 105 },
              ],
              track: [
                { type: "straight", side: 1, cross: "over" },
                { type: "gentle", side: 3, cross: "under" },
              ],
            },
            "71": {
              color: "yellow",
              broken: true,
              values: [
                { angle: 180, percent: 0.4, value: 10 },
                { angle: 315, percent: 0.55, value: 10 },
              ],
              towns: [
                { angle: 7.5, percent: 0.5, rotate: -15.5 },
                { angle: 107.5, percent: 0.4, rotate: -40 },
              ],
              track: [
                { type: "gentle", side: 1, gauge: "narrow", offset: 2.5 },
              ],
            },
            "72": {
              color: "yellow",
              values: [{ value: 10 }],
              towns: [{ angle: 30, percent: 0.57735, rotation: -60 }],
              track: [
                { type: "sharp", side: 1, gauge: "narrow", offset: 12.5 },
              ],
            },
            "73": {
              color: "yellow",
              values: [{ angle: 240, percent: 0.2, value: 10 }],
              towns: [{ angle: 60, percent: 0.28, rotate: -30 }],
              track: [
                { type: "gentle", side: 1, gauge: "narrow", offset: -10.5 },
              ],
            },
            "74": {
              color: "yellow",
              rotations: 3,
              values: [{ angle: 270, percent: 0.5, value: 10 }],
              towns: [{}],
              track: [
                { type: "straight", side: 1, gauge: "narrow", offset: 1 },
              ],
            },
            "75": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 2, gauge: "narrow" },
              ],
            },
            "76": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 3, gauge: "narrow" },
              ],
            },
            "77": {
              color: "yellow",
              track: [
                { type: "sharp", side: 1, gauge: "narrow", offset: 12.5 },
              ],
            },
            "78": {
              color: "yellow",
              track: [
                { type: "gentle", side: 1, gauge: "narrow", offset: -10.5 },
              ],
            },
            "79": {
              color: "yellow",
              rotations: 3,
              track: [
                { type: "straight", side: 1, gauge: "narrow", offset: 1 },
              ],
            },
            "113": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [{ side: 1, gauge: "narrow" }],
            },
            "115": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [{ side: 1 }],
            },
            "128": {
              color: "yellow",
              values: [
                { angle: 300, percent: 0.7, value: 40 },
                { angle: 180, percent: 0.7, value: 40 },
              ],
              labels: [{ angle: 240, percent: 0.5, label: "C" }],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 120, percent: 0.5 },
              ],
              track: [
                { type: "stop", side: 1 },
                { type: "stop", side: 3 },
              ],
            },
            "201": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 2 }],
            },
            "202": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }, { side: 3 }],
            },
            "235": {
              color: "yellow",
              values: [{ angle: 270, percent: 0.6, value: 30 }],
              labels: [{ angle: 90, percent: 0.6, label: "OO" }],
              cities: [
                { angle: 0, percent: 0.5 },
                { angle: 180, percent: 0.5 },
              ],
              track: [{ type: "stop", side: 1 }],
            },
            "291": {
              color: "yellow",
              cities: [{}],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              track: [{ side: 1 }, { side: 2 }],
            },
            "292": {
              color: "yellow",
              cities: [{}],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              track: [{ side: 1 }, { side: 3 }],
            },
            "293": {
              color: "yellow",
              rotations: 3,
              cities: [{}],
              labels: [{ label: "Z", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              track: [{ side: 1 }, { side: 4 }],
            },
            "403": {
              color: "yellow",
              broken: true,
              cities: [{ angle: 180, percent: 0.333 }],
              towns: [{ percent: 0.5 }],
              labels: [{ label: "B", x: 40, y: 20 }],
              values: [
                { angle: 240, percent: 0.7, value: 30 },
                { angle: 45, percent: 0.7, value: 10 },
              ],
              terrain: [{ cost: 40, size: "tiny", x: -50, y: -20 }],
              track: [{ side: 1 }],
            },
            "437": {
              color: "yellow",
              labels: [{ label: "P", angle: 180, percent: 0.5 }],
              icons: [{ type: "port", angle: 180, percent: 0.5 }],
              values: [{ angle: 300, percent: 0.5, value: 30 }],
              towns: [{ angle: 60, percent: 0.28, rotate: -30 }],
              track: [{ type: "gentle", side: 1 }],
            },
            "438": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "H", angle: 150, percent: 0.8 }],
              cities: [{}],
              terrain: [{ angle: 270, percent: 0.8, cost: 80, size: "tiny" }],
              track: [{ side: 1 }, { side: 3 }],
            },
            "441a": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 10 }],
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              cities: [{ size: 1 }],
              track: [{ side: 1 }],
            },
            "445": {
              color: "yellow",
              values: [{ angle: 240, percent: 0.2, value: 10 }],
              towns: [{ angle: 60, percent: 0.28, rotate: -30 }],
              track: [{ type: "gentle", side: 1 }],
            },
            "601": {
              color: "yellow",
              broken: true,
              cities: [{ name: { name: "Venezia" } }],
              towns: [{ angle: 0, percent: 0.667, rotation: 0 }],
              values: [
                { value: 10, angle: 210, percent: 0.8 },
                { value: 20, angle: 40, percent: 0.75 },
              ],
              labels: [{ label: "V", angle: 150, percent: 0.8 }],
              track: [{ side: 1 }, { side: 3 }],
            },
            "621": {
              color: "yellow",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 30 }],
              labels: [{ label: "Y", angle: 150, percent: 0.8 }],
              cities: [{}],
              track: [{ type: "straight" }],
            },
            "630": {
              color: "yellow",
              values: [
                { angle: 45, percent: 0.55, value: 10 },
                { angle: 210, percent: 0.8, value: 10 },
              ],
              towns: [
                { angle: 150, percent: 0.57735, rotation: 60 },
                { x: 129.90375, y: 75, rotate: 15, angle: 105, percent: 1.73 },
              ],
              track: [
                { type: "sharp", side: 3 },
                { type: "gentle", side: 5 },
              ],
            },
            "631": {
              color: "yellow",
              values: [
                { angle: 315, percent: 0.55, value: 10 },
                { angle: 150, percent: 0.8, value: 10 },
              ],
              towns: [
                { angle: 210, percent: 0.57735, rotation: -60 },
                {
                  x: -129.90375,
                  y: 75,
                  rotate: -15,
                  angle: 255,
                  percent: 1.73,
                },
              ],
              track: [
                { type: "sharp", side: 4 },
                { type: "gentle", side: 1 },
              ],
            },
            "632": {
              color: "yellow",
              values: [
                { angle: 210, percent: 0.6, value: 10 },
                { angle: 330, percent: 0.6, value: 10 },
              ],
              towns: [
                { angle: 30, percent: 0.57735, rotation: 120 },
                { angle: 150, percent: 0.57735, rotation: 60 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 3 },
              ],
            },
            "633": {
              color: "yellow",
              values: [
                { angle: 90, percent: 0.6, value: 10 },
                { angle: 270, percent: 0.6, value: 10 },
              ],
              towns: [
                { angle: 30, percent: 0.57735, rotation: -60 },
                { angle: 210, percent: 0.57735, rotation: -60 },
              ],
              track: [
                { type: "sharp", side: 1 },
                { type: "sharp", side: 4 },
              ],
            },
            "644": {
              color: "yellow",
              track: [{ side: 1, gauge: "narrow" }, { side: 2 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "645": {
              color: "yellow",
              track: [{ side: 1, gauge: "narrow" }, { side: 3 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "657": {
              color: "yellow",
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [{ side: 1, gauge: "narrow" }, { side: 4 }],
            },
            "658": {
              color: "yellow",
              track: [{ side: 1 }, { side: 3, gauge: "narrow" }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "659": {
              color: "yellow",
              track: [{ side: 1 }, { side: 2, gauge: "narrow" }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
            },
            "679": {
              color: "yellow",
              values: [{ value: 10 }],
              towns: [{ angle: 30, percent: 0.57735, rotation: -60 }],
              track: [
                { type: "sharp", side: 1, gauge: "narrow", offset: 12.5 },
              ],
            },
            "741": {
              color: "yellow",
              broken: true,
              labels: [
                {
                  label: "£",
                  angle: 30,
                  percent: 0.1,
                  fontSize: 30,
                },
              ],
              towns: [
                {
                  angle: 30,
                  percent: 0.57735,
                  rotation: -60,
                  color: "halt",
                },
              ],
              track: [
                {
                  type: "sharp",
                  side: 1,
                },
              ],
            },
            "742": {
              color: "yellow",
              broken: true,
              labels: [
                {
                  angle: 240,
                  percent: 0.2,
                  fontSize: 30,
                  label: "£",
                },
              ],
              towns: [
                {
                  angle: 60,
                  percent: 0.28,
                  rotate: -30,
                  color: "halt",
                },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
              ],
            },
            "743": {
              color: "yellow",
              broken: true,
              rotations: 3,
              labels: [
                {
                  angle: 270,
                  percent: 0.45,
                  fontSize: 30,
                  label: "£",
                },
              ],
              towns: [
                {
                  color: "halt",
                },
              ],
              track: [
                {
                  type: "straight",
                  side: 1,
                },
              ],
            },
            "744": {
              color: "yellow",
              broken: true,
              rotations: 3,
              labels: [
                {
                  angle: 270,
                  percent: 0.45,
                  y: -25,
                  fontSize: 30,
                  label: "£",
                },
                {
                  angle: 270,
                  percent: 0.45,
                  y: 25,
                  fontSize: 30,
                  label: "£",
                },
              ],
              towns: [
                {
                  percent: 0.333,
                  color: "halt",
                },
                {
                  angle: 180,
                  percent: 0.333,
                  color: "halt",
                },
              ],
              track: [
                {
                  type: "straight",
                  side: 1,
                },
              ],
            },
            "745": {
              color: "yellow",
              broken: true,
              labels: [
                { angle: 180, percent: 0.4, fontSize: 30, label: "£" },
                { angle: 315, percent: 0.55, fontSize: 30, label: "£" },
              ],
              towns: [
                { angle: 7.5, percent: 0.5, rotate: -15.5, color: "halt" },
                { angle: 107.5, percent: 0.4, rotate: -40, color: "halt" },
              ],
              track: [
                {
                  type: "gentle",
                  side: 1,
                },
              ],
            },
            "746": {
              color: "yellow",
              rotations: 3,
              labels: [{ label: "B", angle: 150, percent: 0.8 }],
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [{ type: "straight" }],
            },
            "787": {
              color: "yellow",
              broken: true,
              rotations: [0],
              labels: [
                { label: "£", angle: 90, percent: 0.333, y: 50, fontSize: 30 },
                { label: "C", angle: 120, percent: 0.7 },
              ],
              values: [
                { angle: 240, percent: 0.7, value: 20 },
                { angle: 60, percent: 0.5, value: 10 },
              ],
              cities: [{ angle: 180, percent: 0.333 }],
              towns: [{ percent: 0.25 }, { color: "halt", percent: 0.667 }],
              track: [{ side: 1 }],
            },
            "790": {
              color: "yellow",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 40 }],
              labels: [{ label: "N", angle: 150, percent: 0.8 }],
              cities: [{ size: 2 }],
              track: [{ type: "straight" }, { type: "straight", side: 2 }],
            },
            "956": {
              color: "yellow",
              rotations: 3,
              values: [{ angle: 210, percent: 0.8, value: 20 }],
              cities: [{}],
              track: [
                { side: 1, gauge: "narrow" },
                { side: 4, gauge: "narrow" },
              ],
            },
          };
        },
        {},
      ],
    },
    {},
    [1]
  )(1);
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
